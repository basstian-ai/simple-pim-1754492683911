// Consolidated lightweight health endpoint\n+// Returns basic runtime info + a small product surface metric to help quickly\n+// verify the API and data availability from monitoring systems or deploy checks.\n+export default function handler(req, res) {\n+  // Ensure JSON responses\n+  try {\n+    res.setHeader('Content-Type', 'application/json; charset=utf-8');\n+  } catch (_) {}\n+\n+  // Allow simple CORS for probes and local tooling\n+  try {\n+    res.setHeader('Access-Control-Allow-Origin', '*');\n+    res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS');\n+    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n+  } catch (_) {}\n+\n+  if (req.method === 'OPTIONS') {\n+    // preflight\n+    res.status(204).end();\n+    return;\n+  }\n+\n+  if (req.method !== 'GET') {\n+    res.setHeader('Allow', 'GET,OPTIONS');\n+    return res.status(405).json({ error: 'Method Not Allowed' });\n+  }\n+\n+  // Short edge cache so frequent probes do not hit origin repeatedly.\n+  try {\n+    res.setHeader('Cache-Control', 's-maxage=5, stale-while-revalidate=10');\n+  } catch (_) {}\n+\n+  // Best-effort version from package.json\n+  let version = null;\n+  try {\n+    // eslint-disable-next-line global-require, import/no-dynamic-require\n+    const pkg = require(process.cwd() + '/package.json');\n+    if (pkg && pkg.version) version = String(pkg.version);\n+  } catch (_) {\n+    // ignore\n+  }\n+\n+  // Product count: read static data fallback (fast & deterministic)\n+  let productCount = null;\n+  try {\n+    // Try to load structured products via the data file (fast and safe in serverless)\n+    // Path is relative to this file: pages/api -> ../../data\n+    // eslint-disable-next-line global-require, import/no-dynamic-require\n+    const products = require('../../data/products.json');\n+    if (Array.isArray(products)) productCount = products.length;\n+    else if (products && Array.isArray(products.products)) productCount = products.products.length;\n+  } catch (_) {\n+    // ignore; productCount stays null\n+  }\n+\n+  return res.status(200).json({\n+    ok: true,\n+    timestamp: new Date().toISOString(),\n+    uptimeSeconds: typeof process !== 'undefined' && process.uptime ? Math.floor(process.uptime()) : null,\n+    version,\n+    productCount,\n+  });\n+}\n+
