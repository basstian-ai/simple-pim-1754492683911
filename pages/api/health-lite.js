// Lightweight health / readiness endpoint (small footprint)\n+// - Returns minimal JSON useful for uptime probes / load balancers\n+// - Includes permissive CORS and short edge cache headers\n+\n+export default function handler(req, res) {\n+  // Allow preflight for probes/tools\n+  try {\n+    res.setHeader('Access-Control-Allow-Origin', '*');\n+    res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS');\n+    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n+  } catch (_) {}\n+\n+  if (req.method === 'OPTIONS') {\n+    try { res.setHeader('Allow', 'GET,OPTIONS'); } catch (_) {}\n+    return res.status(204).end();\n+  }\n+\n+  if (req.method !== 'GET') {\n+    try { res.setHeader('Allow', 'GET,OPTIONS'); } catch (_) {}\n+    res.setHeader('Content-Type', 'application/json; charset=utf-8');\n+    return res.status(405).json({ ok: false, error: 'Method Not Allowed' });\n+  }\n+\n+  // Short edge cache â€” health endpoints are read-heavy but should stay fresh\n+  try {\n+    res.setHeader('Cache-Control', 's-maxage=5, stale-while-revalidate=10');\n+  } catch (_) {}\n+\n+  // Best-effort package version (non-fatal if missing)\n+  let version = null;\n+  try {\n+    // eslint-disable-next-line global-require, import/no-dynamic-require\n+    const pkg = require(process.cwd() + '/package.json');\n+    if (pkg && pkg.version) version = String(pkg.version);\n+  } catch (_) {\n+    // ignore\n+  }\n+\n+  const payload = {\n+    ok: true,\n+    timestamp: new Date().toISOString(),\n+    uptimeSeconds: typeof process !== 'undefined' && process.uptime ? Math.floor(process.uptime()) : null,\n+    version,\n+  };\n+\n+  res.setHeader('Content-Type', 'application/json; charset=utf-8');\n+  return res.status(200).json(payload);\n+}\n+\n
