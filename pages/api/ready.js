// Lightweight readiness endpoint for deploy checks.\n+// Verifies that key static data files exist and are parseable.\n+// Returns a small JSON payload suitable for health/readiness probes.\n+\n+export default function handler(req, res) {\n+  try {\n+    // Allow simple CORS so external checks (pager tools, uptime monitors)\n+    // can query this endpoint without extra config.\n+    res.setHeader('Access-Control-Allow-Origin', '*');\n+    res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS');\n+    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n+  } catch (_) {}\n+\n+  if (req.method === 'OPTIONS') {\n+    res.status(204).end();\n+    return;\n+  }\n+\n+  if (req.method !== 'GET') {\n+    res.setHeader('Allow', 'GET,OPTIONS');\n+    return res.status(405).json({ ok: false, error: 'Method Not Allowed' });\n+  }\n+\n+  try {\n+    // Short edge cache: keep readiness responses fresh but reduce origin hits.\n+    try {\n+      res.setHeader('Cache-Control', 's-maxage=5, stale-while-revalidate=10');\n+    } catch (_) {}\n+\n+    const result = { ok: true, timestamp: new Date().toISOString(), checks: {} };\n+\n+    // Check products data\n+    try {\n+      // eslint-disable-next-line global-require, import/no-dynamic-require\n+      const products = require('../../data/products.json');\n+      const count = Array.isArray(products) ? products.length : (products && Array.isArray(products.products) ? products.products.length : null);\n+      result.checks.products = { ok: true, count };\n+    } catch (e) {\n+      result.checks.products = { ok: false, error: 'failed to load data/products.json' };\n+      result.ok = false;\n+    }\n+\n+    // Check attribute groups data\n+    try {\n+      // eslint-disable-next-line global-require, import/no-dynamic-require\n+      const groups = require('../../data/attribute-groups.json');\n+      const count = Array.isArray(groups) ? groups.length : (groups && Array.isArray(groups.groups) ? groups.groups.length : null);\n+      result.checks.attributeGroups = { ok: true, count };\n+    } catch (e) {\n+      result.checks.attributeGroups = { ok: false, error: 'failed to load data/attribute-groups.json' };\n+      result.ok = false;\n+    }\n+\n+    // Try to read package.json version if available\n+    try {\n+      // eslint-disable-next-line global-require, import/no-dynamic-require\n+      const pkg = require(process.cwd() + '/package.json');\n+      if (pkg && pkg.version) result.version = String(pkg.version);\n+    } catch (_) {\n+      // ignore\n+    }\n+\n+    return res.status(result.ok ? 200 : 503).json(result);\n+  } catch (err) {\n+    // Catch-all: don't expose internals\n+    try {\n+      res.status(500).json({ ok: false, error: 'readiness check failed' });\n+    } catch (_) {}\n+    return;\n+  }\n+}\n+
