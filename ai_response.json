{
  "commit_message": "Feature: CSV export now respects active filters via URL sync. Updated home page to sync filters (search, tags, stock) to the URL, and ExportCsvLink builds href with those query params. Added test to verify ExportCsvLink query propagation.",
  "files": [
    {
      "path": "components/ExportCsvLink.js",
      "content": "import React, { useMemo } from 'react';\nimport { useRouter } from 'next/router';\n\nfunction buildExportHref(query) {\n  const allowed = ['search', 'tags', 'inStock'];\n  const params = new URLSearchParams();\n  for (const key of allowed) {\n    const val = query?.[key];\n    if (val != null && val !== '' && !(Array.isArray(val) && val.length === 0)) {\n      // Support arrays for tags if present\n      if (Array.isArray(val)) {\n        params.set(key, val.join(','));\n      } else {\n        params.set(key, String(val));\n      }\n    }\n  }\n  const qs = params.toString();\n  return '/api/products/export' + (qs ? `?${qs}` : '');\n}\n\nconst ExportCsvLink = ({ children = 'Export CSV', style, className, ...rest }) => {\n  const router = useRouter();\n\n  const href = useMemo(() => buildExportHref(router?.query || {}), [router?.query]);\n\n  return (\n    <a\n      href={href}\n      download\n      className={className}\n      style={style}\n      data-testid=\"export-csv-link\"\n      {...rest}\n    >\n      {children}\n    </a>\n  );\n};\n\nexport default ExportCsvLink;\n"
    },
    {
      "path": "pages/index.js",
      "content": "import React, { useEffect, useRef, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport ProductList from '../components/ProductList';\nimport ExportCsvLink from '../components/ExportCsvLink';\nimport StockFilterToggle from '../components/StockFilterToggle';\n\nconst Home = () => {\n  const router = useRouter();\n  const [products, setProducts] = useState([]);\n  const [query, setQuery] = useState('');\n  const [allTags, setAllTags] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [inStockOnly, setInStockOnly] = useState(false);\n\n  const initializedFromUrl = useRef(false);\n\n  // Initialize filter state from URL on first render\n  useEffect(() => {\n    if (initializedFromUrl.current) return;\n    const q = router?.query || {};\n    if (typeof q.search === 'string') setQuery(q.search);\n    if (typeof q.tags === 'string' && q.tags.trim()) {\n      setSelectedTags(q.tags.split(',').map((t) => decodeURIComponent(t)));\n    }\n    if (q.inStock === '1' || q.inStock === 'true') setInStockOnly(true);\n    initializedFromUrl.current = true;\n  }, [router?.query]);\n\n  // Keep URL in sync with filters (for shareable links and CSV export)\n  useEffect(() => {\n    // Avoid pushing identical queries repeatedly\n    const nextQuery = {};\n    if (query) nextQuery.search = query;\n    if (selectedTags.length) nextQuery.tags = selectedTags.join(',');\n    if (inStockOnly) nextQuery.inStock = '1';\n\n    const current = router?.query || {};\n    const same =\n      current.search === nextQuery.search &&\n      (current.tags || '') === (nextQuery.tags || '') &&\n      (current.inStock || '') === (nextQuery.inStock || '');\n\n    if (!same) {\n      router.replace({ pathname: router.pathname, query: nextQuery }, undefined, { shallow: true });\n    }\n  }, [query, selectedTags, inStockOnly]);\n\n  useEffect(() => {\n    let cancelled = false;\n    const loadTags = async () => {\n      try {\n        const res = await fetch('/api/tags');\n        const data = await res.json();\n        if (!cancelled) setAllTags(Array.isArray(data) ? data : []);\n      } catch (e) {\n        if (!cancelled) setAllTags([]);\n      }\n    };\n    loadTags();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  useEffect(() => {\n    let active = true;\n    const controller = new AbortController();\n\n    const fetchProducts = async () => {\n      const params = [];\n      if (query) params.push(`search=${encodeURIComponent(query)}`);\n      if (selectedTags.length > 0) params.push(`tags=${selectedTags.map(encodeURIComponent).join(',')}`);\n      if (inStockOnly) params.push('inStock=1');\n      const qs = params.length ? `?${params.join('&')}` : '';\n      const res = await fetch(`/api/products${qs}`, { signal: controller.signal });\n      const data = await res.json();\n      if (active) setProducts(data);\n    };\n\n    const t = setTimeout(fetchProducts, 250);\n\n    return () => {\n      active = false;\n      controller.abort();\n      clearTimeout(t);\n    };\n  }, [query, selectedTags, inStockOnly]);\n\n  const toggleTag = (tag) => {\n    setSelectedTags((prev) => {\n      if (prev.includes(tag)) return prev.filter((t) => t !== tag);\n      return [...prev, tag];\n    });\n  };\n\n  return (\n    <div style={{ maxWidth: 900, margin: '0 auto', padding: '1rem' }}>\n      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem', flexWrap: 'wrap' }}>\n        <input\n          type=\"search\"\n          placeholder=\"Search products by name, SKU or description...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          style={{ flex: 1, minWidth: 260, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n          aria-label=\"Search products\"\n        />\n        <StockFilterToggle checked={inStockOnly} onChange={setInStockOnly} />\n        <span style={{ color: '#666', fontSize: 12 }}>\n          {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n        </span>\n        <ExportCsvLink style={{ fontSize: 12 }} />\n      </div>\n\n      {allTags.length > 0 && (\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem', marginBottom: '1rem' }}>\n          {allTags.map((tag) => {\n            const active = selectedTags.includes(tag);\n            return (\n              <button\n                key={tag}\n                onClick={() => toggleTag(tag)}\n                aria-pressed={active}\n                style={{\n                  padding: '0.25rem 0.5rem',\n                  borderRadius: 999,\n                  border: '1px solid ' + (active ? '#0b64d8' : '#ddd'),\n                  background: active ? '#e7f1ff' : 'white',\n                  color: active ? '#0b64d8' : '#333',\n                  cursor: 'pointer',\n                  fontSize: 12,\n                }}\n              >\n                {tag}\n              </button>\n            );\n          })}\n          {selectedTags.length > 0 && (\n            <button\n              onClick={() => setSelectedTags([])}\n              style={{\n                marginLeft: 'auto',\n                padding: '0.25rem 0.5rem',\n                borderRadius: 6,\n                border: '1px solid #ddd',\n                background: '#fafafa',\n                cursor: 'pointer',\n                fontSize: 12,\n              }}\n              aria-label=\"Clear selected tags\"\n            >\n              Clear tags\n            </button>\n          )}\n        </div>\n      )}\n\n      <ProductList products={products} />\n    </div>\n  );\n};\n\nexport default Home;\n"
    },
    {
      "path": "tests/exportCsvLinkWithFilters.test.js",
      "content": "import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom/extend-expect';\nimport ExportCsvLink from '../components/ExportCsvLink';\n\njest.mock('next/router', () => {\n  return {\n    useRouter: () => ({\n      pathname: '/',\n      query: { search: 'mug', tags: 'red,large', inStock: '1' },\n      replace: jest.fn(),\n    }),\n  };\n});\n\ndescribe('ExportCsvLink filter propagation', () => {\n  it('includes current filters from router.query in the export href', () => {\n    render(<ExportCsvLink />);\n    const link = screen.getByTestId('export-csv-link');\n    const href = link.getAttribute('href');\n    expect(href).toContain('/api/products/export');\n    expect(href).toContain('search=mug');\n    // comma should be URL encoded in query string\n    expect(href).toContain('tags=red%2Clarge');\n    expect(href).toContain('inStock=1');\n  });\n});\n"
    }
  ]
}