{
  "files": [
    {
      "path": "data/attribute-groups.json",
      "content": "{\n  \"groups\": [\n    {\n      \"id\": \"basic\",\n      \"name\": \"Basic\",\n      \"attributes\": [\n        { \"code\": \"name\", \"label\": \"Name\", \"type\": \"text\", \"required\": true },\n        { \"code\": \"sku\", \"label\": \"SKU\", \"type\": \"text\", \"required\": true },\n        { \"code\": \"price\", \"label\": \"Price\", \"type\": \"number\", \"required\": true }\n      ]\n    },\n    {\n      \"id\": \"seo\",\n      \"name\": \"SEO\",\n      \"attributes\": [\n        { \"code\": \"metaTitle\", \"label\": \"Meta Title\", \"type\": \"text\" },\n        { \"code\": \"metaDescription\", \"label\": \"Meta Description\", \"type\": \"textarea\" }\n      ]\n    }\n  ]\n}\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "const groups = require('../../data/attribute-groups.json');\n\nmodule.exports = (req, res) => {\n  if (req.method !== 'GET') {\n    res.status(405).json({ error: 'Method Not Allowed' });\n    return;\n  }\n  res.setHeader('Content-Type', 'application/json; charset=utf-8');\n  res.status(200).json(groups);\n};\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import React, { useEffect, useState } from 'react';\n\nexport default function AdminAttributeGroups() {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let cancelled = false;\n    async function load() {\n      try {\n        const res = await fetch('/api/attribute-groups');\n        if (!res.ok) throw new Error(`Failed to load: ${res.status}`);\n        const json = await res.json();\n        if (!cancelled) setData(json);\n      } catch (e) {\n        if (!cancelled) setError(e.message || String(e));\n      } finally {\n        if (!cancelled) setLoading(false);\n      }\n    }\n    load();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  return (\n    <div style={{ padding: 24, fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial' }}>\n      <h1 style={{ marginBottom: 8 }}>Attribute Groups</h1>\n      <p style={{ color: '#555', marginTop: 0 }}>Organize product attributes into manageable groups.</p>\n      <div style={{ marginBottom: 16 }}>\n        <a href=\"/\" style={{ color: '#0366d6', textDecoration: 'none' }}>&larr; Back</a>\n      </div>\n\n      {loading && <p>Loading…</p>}\n      {error && (\n        <p style={{ color: 'crimson' }}>Error: {error}</p>\n      )}\n\n      {!loading && !error && data && (\n        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(260px, 1fr))', gap: 16 }}>\n          {data.groups && data.groups.length > 0 ? (\n            data.groups.map((group) => (\n              <div key={group.id} style={{ border: '1px solid #e1e4e8', borderRadius: 6, padding: 16 }}>\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                  <h2 style={{ fontSize: 18, margin: 0 }}>{group.name}</h2>\n                  <code style={{ color: '#6a737d' }}>{group.id}</code>\n                </div>\n                <ul style={{ paddingLeft: 18, marginTop: 12, marginBottom: 0 }}>\n                  {(group.attributes || []).map((attr) => (\n                    <li key={attr.code} style={{ marginBottom: 6 }}>\n                      <strong>{attr.label}</strong>\n                      <span style={{ color: '#6a737d' }}> ({attr.code})</span>\n                      <span style={{ color: '#6a737d' }}> • {attr.type}</span>\n                      {attr.required ? <span style={{ color: '#22863a' }}> • required</span> : null}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            ))\n          ) : (\n            <p>No attribute groups found.</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/api-attribute-groups.test.js",
      "content": "const assert = require('assert');\nconst handler = require('../pages/api/attribute-groups.js');\n\nfunction mockReq(method = 'GET') {\n  return { method };\n}\n\nfunction mockRes() {\n  const res = {\n    statusCode: 200,\n    headers: {},\n    body: undefined,\n    finished: false,\n    status(code) {\n      this.statusCode = code;\n      return this;\n    },\n    setHeader(key, value) {\n      this.headers[key] = value;\n    },\n    json(obj) {\n      this.body = obj;\n      this.finished = true;\n    },\n    end(str) {\n      this.body = str;\n      this.finished = true;\n    }\n  };\n  return res;\n}\n\n// Simple invocation test\n(function testGetAttributeGroups() {\n  const req = mockReq('GET');\n  const res = mockRes();\n  handler(req, res);\n\n  assert.strictEqual(res.statusCode, 200, 'should return 200');\n  assert.ok(res.finished, 'response should be finished');\n  assert.ok(res.body, 'should have a body');\n  assert.ok(Array.isArray(res.body.groups), 'groups should be an array');\n  const ids = res.body.groups.map((g) => g.id);\n  assert.ok(ids.includes('basic'), 'should include basic group');\n  assert.ok(ids.includes('seo'), 'should include seo group');\n  // If it reaches here, output a tiny success message so running with `node` shows progress.\n  if (require.main === module) {\n    // eslint-disable-next-line no-console\n    console.log('✓ api-attribute-groups GET test passed');\n  }\n})();\n\n// method not allowed test\n(function testMethodNotAllowed() {\n  const req = mockReq('POST');\n  const res = mockRes();\n  handler(req, res);\n\n  assert.strictEqual(res.statusCode, 405, 'should return 405 for non-GET');\n  assert.ok(res.finished, 'response should be finished');\n  assert.deepStrictEqual(res.body, { error: 'Method Not Allowed' });\n  if (require.main === module) {\n    // eslint-disable-next-line no-console\n    console.log('✓ api-attribute-groups method not allowed test passed');\n  }\n})();\n"
    }
  ]
}