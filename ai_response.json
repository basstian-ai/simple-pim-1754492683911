{
  "diff": "*** Begin Patch\n*** Add File: pages/api/quick-add-suggest.js\n+import slugify from '../../lib/slugify';\n+\n+function hashString(str = '') {\n+  let h = 0;\n+  for (let i = 0; i < str.length; i++) {\n+    h = (h * 31 + str.charCodeAt(i)) | 0;\n+  }\n+  return h >>> 0;\n+}\n+\n+function generateSkuFromName(name) {\n+  const slug = slugify(name) || 'item';\n+  const base = slug.replace(/-/g, '').toUpperCase();\n+  const head = base.slice(0, 6) || 'ITEM';\n+  const suffix = Math.abs(hashString(String(name)))\n+    .toString(36)\n+    .toUpperCase()\n+    .slice(0, 4)\n+    .padEnd(4, '0');\n+  return `${head}-${suffix}`;\n+}\n+\n+export default async function handler(req, res) {\n+  if (req.method !== 'GET') {\n+    res.status(405).json({ error: 'Method Not Allowed' });\n+    return;\n+  }\n+\n+  const nameRaw = (req.query && req.query.name) || '';\n+  const name = String(nameRaw).trim();\n+  if (!name) {\n+    res.status(400).json({ error: 'Missing required query parameter: name' });\n+    return;\n+  }\n+\n+  const slug = slugify(name);\n+  const sku = generateSkuFromName(name);\n+\n+  res.status(200).json({ name, slug, sku });\n+}\n+\n*** End Patch\n",
  "files": [
    {
      "path": "pages/admin/quick-add.js",
      "content": "import React, { useState } from 'react';\n\nconst QuickAdd = () => {\n  const [name, setName] = useState('');\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    setError(null);\n    setResult(null);\n    const q = name.trim();\n    if (!q) {\n      setError('Please enter a product name.');\n      return;\n    }\n    setLoading(true);\n    try {\n      const res = await fetch(`/api/quick-add-suggest?name=${encodeURIComponent(q)}`);\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Request failed');\n      setResult(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const copy = async (text) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      alert('Copied to clipboard');\n    } catch (_) {}\n  };\n\n  return (\n    <div style={{ maxWidth: 720, margin: '0 auto', padding: '1rem' }}>\n      <h1 style={{ marginBottom: 8 }}>Quick Add: Name, Slug & SKU</h1>\n      <p style={{ color: '#555', marginTop: 0 }}>Generate a clean slug and a stable SKU suggestion from a product name.</p>\n      <form onSubmit={onSubmit} style={{ display: 'flex', gap: 8, marginBottom: 16 }}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter product name (e.g. Red Mug 12oz)\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          aria-label=\"Product name\"\n          style={{ flex: 1, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n        />\n        <button type=\"submit\" disabled={loading} style={{ padding: '0.5rem 0.75rem' }}>\n          {loading ? 'Generatingâ€¦' : 'Generate'}\n        </button>\n      </form>\n\n      {error && (\n        <div role=\"alert\" style={{ background: '#fee', border: '1px solid #fbb', padding: 12, borderRadius: 6, color: '#900' }}>\n          {error}\n        </div>\n      )}\n\n      {result && (\n        <div style={{ border: '1px solid #eee', borderRadius: 8, padding: 12 }}>\n          <div style={{ display: 'grid', gridTemplateColumns: '120px 1fr auto', gap: 8, alignItems: 'center' }}>\n            <div style={{ color: '#666' }}>Name</div>\n            <div>{result.name}</div>\n            <button type=\"button\" onClick={() => copy(result.name)}>Copy</button>\n\n            <div style={{ color: '#666' }}>Slug</div>\n            <div><code>{result.slug}</code></div>\n            <button type=\"button\" onClick={() => copy(result.slug)}>Copy</button>\n\n            <div style={{ color: '#666' }}>SKU</div>\n            <div><code>{result.sku}</code></div>\n            <button type=\"button\" onClick={() => copy(result.sku)}>Copy</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default QuickAdd;\n"
    },
    {
      "path": "tests/quickAddSuggest.test.js",
      "content": "import handler from '../pages/api/quick-add-suggest';\nimport slugify from '../lib/slugify';\n\ndescribe('API /api/quick-add-suggest', () => {\n  function createMockRes() {\n    const res = {};\n    res.statusCode = 200;\n    res.status = (code) => {\n      res.statusCode = code;\n      return res;\n    };\n    res.json = (data) => {\n      res.body = data;\n      return res;\n    };\n    return res;\n  }\n\n  test('returns slug and sku for provided name', async () => {\n    const req = { method: 'GET', query: { name: 'Red Mug 12oz' } };\n    const res = createMockRes();\n\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toHaveProperty('name', 'Red Mug 12oz');\n    expect(res.body).toHaveProperty('slug', slugify('Red Mug 12oz'));\n    expect(res.body).toHaveProperty('sku');\n    expect(res.body.sku).toMatch(/^[A-Z0-9-]{5,}$/);\n  });\n\n  test('returns 400 when name is missing', async () => {\n    const req = { method: 'GET', query: {} };\n    const res = createMockRes();\n\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(400);\n    expect(res.body).toHaveProperty('error');\n  });\n});\n"
    }
  ]
}