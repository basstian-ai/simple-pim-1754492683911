{
  "files": [
    {
      "path": "lib/data/sampleProducts.js",
      "content": "const sampleProducts = [\n  {\n    id: 'prod_1001',\n    sku: 'TSHIRT-BASIC',\n    name: 'Basic T-Shirt',\n    description: 'A soft, comfortable cotton t-shirt perfect for everyday wear.',\n    status: 'active',\n    price: 19.99,\n    currency: 'USD',\n    images: [\n      { url: '/images/products/tshirt-basic/main.jpg', alt: 'Basic T-Shirt front' },\n      { url: '/images/products/tshirt-basic/back.jpg', alt: 'Basic T-Shirt back' }\n    ],\n    categories: ['apparel', 'tops'],\n    stock: { managed: true, available: 120, reserved: 5 },\n    attributes: [\n      {\n        group: 'General',\n        fields: [\n          { code: 'brand', name: 'Brand', type: 'text', value: 'SimpleWear' },\n          { code: 'material', name: 'Material', type: 'text', value: '100% Cotton' }\n        ]\n      },\n      {\n        group: 'Dimensions',\n        fields: [\n          { code: 'weight', name: 'Weight', type: 'number', unit: 'g', value: 180 },\n          { code: 'length', name: 'Length', type: 'number', unit: 'cm', value: 70 }\n        ]\n      },\n      {\n        group: 'SEO',\n        fields: [\n          { code: 'meta_title', name: 'Meta Title', type: 'text', value: 'Basic T-Shirt' },\n          { code: 'meta_description', name: 'Meta Description', type: 'text', value: 'Soft and comfy cotton tee in multiple colors and sizes.' }\n        ]\n      }\n    ],\n    options: [\n      { code: 'color', name: 'Color', values: ['Red', 'Blue', 'Black'] },\n      { code: 'size', name: 'Size', values: ['S', 'M', 'L', 'XL'] }\n    ],\n    variants: [\n      { id: 'var_1001_1', sku: 'TSHIRT-BASIC-RED-S', options: { color: 'Red', size: 'S' }, price: 19.99, stock: { available: 20 } },\n      { id: 'var_1001_2', sku: 'TSHIRT-BASIC-RED-M', options: { color: 'Red', size: 'M' }, price: 19.99, stock: { available: 25 } },\n      { id: 'var_1001_3', sku: 'TSHIRT-BASIC-BLUE-L', options: { color: 'Blue', size: 'L' }, price: 21.99, stock: { available: 18 } },\n      { id: 'var_1001_4', sku: 'TSHIRT-BASIC-BLACK-XL', options: { color: 'Black', size: 'XL' }, price: 21.99, stock: { available: 15 } }\n    ],\n    createdAt: '2024-08-01T10:00:00.000Z',\n    updatedAt: '2024-12-15T08:30:00.000Z'\n  },\n  {\n    id: 'prod_1002',\n    sku: 'SNEAKER-RUN',\n    name: 'Runner Sneakers',\n    description: 'Lightweight running sneakers with breathable mesh and cushioned sole.',\n    status: 'active',\n    price: 79.0,\n    currency: 'USD',\n    images: [\n      { url: '/images/products/sneaker-run/main.jpg', alt: 'Runner Sneakers' }\n    ],\n    categories: ['footwear', 'sport'],\n    stock: { managed: true, available: 42, reserved: 2 },\n    attributes: [\n      { group: 'General', fields: [ { code: 'brand', name: 'Brand', type: 'text', value: 'SimpleWear' } ] },\n      { group: 'Dimensions', fields: [ { code: 'weight', name: 'Weight', type: 'number', unit: 'g', value: 650 } ] }\n    ],\n    options: [ { code: 'size', name: 'Size', values: ['40', '41', '42', '43', '44'] } ],\n    variants: [\n      { id: 'var_1002_1', sku: 'SNEAKER-RUN-42', options: { size: '42' }, price: 79.0, stock: { available: 10 } },\n      { id: 'var_1002_2', sku: 'SNEAKER-RUN-43', options: { size: '43' }, price: 79.0, stock: { available: 8 } }\n    ],\n    createdAt: '2024-09-10T10:00:00.000Z',\n    updatedAt: '2024-12-12T06:00:00.000Z'\n  },\n  {\n    id: 'prod_1003',\n    sku: 'MUG-COFFEE',\n    name: 'Ceramic Coffee Mug',\n    description: '11oz ceramic mug, dishwasher and microwave safe.',\n    status: 'active',\n    price: 12.5,\n    currency: 'USD',\n    images: [ { url: '/images/products/mug-coffee/main.jpg', alt: 'Ceramic Coffee Mug' } ],\n    categories: ['home', 'kitchen'],\n    stock: { managed: true, available: 200, reserved: 0 },\n    attributes: [\n      { group: 'General', fields: [ { code: 'brand', name: 'Brand', type: 'text', value: 'SimpleHome' }, { code: 'color', name: 'Color', type: 'text', value: 'White' } ] },\n      { group: 'Dimensions', fields: [ { code: 'capacity', name: 'Capacity', type: 'number', unit: 'oz', value: 11 } ] }\n    ],\n    options: [],\n    variants: [],\n    createdAt: '2024-07-21T10:00:00.000Z',\n    updatedAt: '2024-11-05T16:45:00.000Z'\n  },\n  {\n    id: 'prod_1004',\n    sku: 'BACKPACK-URBAN',\n    name: 'Urban Backpack',\n    description: 'Water-resistant urban backpack with padded laptop compartment (15-inch).',\n    status: 'draft',\n    price: 59.99,\n    currency: 'USD',\n    images: [ { url: '/images/products/backpack-urban/main.jpg', alt: 'Urban Backpack' } ],\n    categories: ['bags', 'accessories'],\n    stock: { managed: true, available: 12, reserved: 1 },\n    attributes: [\n      { group: 'General', fields: [ { code: 'brand', name: 'Brand', type: 'text', value: 'SimpleGear' }, { code: 'material', name: 'Material', type: 'text', value: 'Polyester' } ] },\n      { group: 'Dimensions', fields: [ { code: 'volume', name: 'Volume', type: 'number', unit: 'L', value: 24 } ] },\n      { group: 'SEO', fields: [ { code: 'meta_title', name: 'Meta Title', type: 'text', value: 'Urban Backpack - Water Resistant' } ] }\n    ],\n    options: [ { code: 'color', name: 'Color', values: ['Gray', 'Navy'] } ],\n    variants: [\n      { id: 'var_1004_1', sku: 'BACKPACK-URBAN-GRAY', options: { color: 'Gray' }, price: 59.99, stock: { available: 6 } },\n      { id: 'var_1004_2', sku: 'BACKPACK-URBAN-NAVY', options: { color: 'Navy' }, price: 59.99, stock: { available: 5 } }\n    ],\n    createdAt: '2024-10-01T09:00:00.000Z',\n    updatedAt: '2024-12-20T12:00:00.000Z'\n  }\n];\n\nfunction getSampleProducts() {\n  return sampleProducts;\n}\n\nmodule.exports = { sampleProducts, getSampleProducts };\n"
    },
    {
      "path": "pages/api/pim/products.js",
      "content": "const { getSampleProducts } = require('../../../lib/data/sampleProducts');\n\nmodule.exports = (req, res) => {\n  if (req.method !== 'GET') {\n    res.setHeader('Allow', 'GET');\n    return res.status(405).end('Method Not Allowed');\n  }\n\n  // Cache for edge/CDN\n  res.setHeader('Cache-Control', 's-maxage=60, stale-while-revalidate=300');\n\n  const products = getSampleProducts();\n  return res.status(200).json({ products, count: products.length });\n};\n"
    },
    {
      "path": "components/PimAdminProductList.js",
      "content": "import React from 'react';\n\nfunction formatPrice(value, currency) {\n  try {\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency }).format(value);\n  } catch (e) {\n    return `${currency} ${value.toFixed ? value.toFixed(2) : value}`;\n  }\n}\n\nexport default function PimAdminProductList({ products }) {\n  if (!products || products.length === 0) {\n    return (\n      <div style={{ padding: '12px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial' }}>\n        <p>No products found.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ padding: '16px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial' }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n        <h1 style={{ margin: 0, fontSize: 20 }}>PIM Admin Â· Products</h1>\n        <span style={{ color: '#666' }}>{products.length} items</span>\n      </div>\n      <div style={{ overflowX: 'auto', border: '1px solid #e5e7eb', borderRadius: 8 }}>\n        <table style={{ width: '100%', borderCollapse: 'separate', borderSpacing: 0 }}>\n          <thead>\n            <tr style={{ background: '#f9fafb', textAlign: 'left' }}>\n              <th style={{ padding: '10px 12px', fontWeight: 600, fontSize: 12, color: '#374151', borderBottom: '1px solid #e5e7eb' }}>SKU</th>\n              <th style={{ padding: '10px 12px', fontWeight: 600, fontSize: 12, color: '#374151', borderBottom: '1px solid #e5e7eb' }}>Name</th>\n              <th style={{ padding: '10px 12px', fontWeight: 600, fontSize: 12, color: '#374151', borderBottom: '1px solid #e5e7eb' }}>Price</th>\n              <th style={{ padding: '10px 12px', fontWeight: 600, fontSize: 12, color: '#374151', borderBottom: '1px solid #e5e7eb' }}>Variants</th>\n              <th style={{ padding: '10px 12px', fontWeight: 600, fontSize: 12, color: '#374151', borderBottom: '1px solid #e5e7eb' }}>Status</th>\n              <th style={{ padding: '10px 12px', fontWeight: 600, fontSize: 12, color: '#374151', borderBottom: '1px solid #e5e7eb' }}>Stock</th>\n            </tr>\n          </thead>\n          <tbody>\n            {products.map((p, idx) => (\n              <tr key={p.id} style={{ background: idx % 2 ? '#fff' : '#fcfcfd' }}>\n                <td style={{ padding: '10px 12px', borderBottom: '1px solid #f3f4f6', whiteSpace: 'nowrap', fontFamily: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas' }}>{p.sku}</td>\n                <td style={{ padding: '10px 12px', borderBottom: '1px solid #f3f4f6' }}>\n                  <div style={{ display: 'flex', alignItems: 'center', gap: 10 }}>\n                    {p.images && p.images[0] ? (\n                      // eslint-disable-next-line @next/next/no-img-element\n                      <img src={p.images[0].url} alt={p.images[0].alt || p.name} width={40} height={40} style={{ borderRadius: 6, objectFit: 'cover', background: '#f3f4f6' }} />\n                    ) : (\n                      <div style={{ width: 40, height: 40, borderRadius: 6, background: '#f3f4f6' }} />\n                    )}\n                    <div>\n                      <div style={{ fontWeight: 600 }}>{p.name}</div>\n                      <div style={{ color: '#6b7280', fontSize: 12 }}>{p.categories && p.categories.join(' / ')}</div>\n                    </div>\n                  </div>\n                </td>\n                <td style={{ padding: '10px 12px', borderBottom: '1px solid #f3f4f6', whiteSpace: 'nowrap' }}>{formatPrice(p.price, p.currency || 'USD')}</td>\n                <td style={{ padding: '10px 12px', borderBottom: '1px solid #f3f4f6' }}>\n                  <span style={{ display: 'inline-block', padding: '2px 8px', borderRadius: 999, background: '#eef2ff', color: '#3730a3', fontSize: 12 }}>\n                    {Array.isArray(p.variants) ? p.variants.length : 0}\n                  </span>\n                </td>\n                <td style={{ padding: '10px 12px', borderBottom: '1px solid #f3f4f6' }}>\n                  <span\n                    style={{\n                      display: 'inline-block',\n                      padding: '2px 8px',\n                      borderRadius: 999,\n                      background: p.status === 'active' ? '#ecfdf5' : '#fff7ed',\n                      color: p.status === 'active' ? '#065f46' : '#9a3412',\n                      fontSize: 12\n                    }}\n                  >\n                    {p.status}\n                  </span>\n                </td>\n                <td style={{ padding: '10px 12px', borderBottom: '1px solid #f3f4f6' }}>\n                  {(p.stock && typeof p.stock.available === 'number') ? p.stock.available : '-'}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "pages/pim/admin/index.js",
      "content": "import React from 'react';\nimport PimAdminProductList from '../../../components/PimAdminProductList';\n\nexport default function PimAdminPage() {\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(null);\n  const [products, setProducts] = React.useState([]);\n\n  React.useEffect(() => {\n    let mounted = true;\n    async function load() {\n      try {\n        const res = await fetch('/api/pim/products');\n        if (!res.ok) throw new Error(`Failed to load products (${res.status})`);\n        const data = await res.json();\n        if (mounted) {\n          setProducts(Array.isArray(data.products) ? data.products : []);\n          setLoading(false);\n        }\n      } catch (e) {\n        if (mounted) {\n          setError(e.message || 'Failed to load');\n          setLoading(false);\n        }\n      }\n    }\n    load();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <div style={{ maxWidth: 980, margin: '24px auto' }}>\n      {loading && (\n        <div style={{ padding: '16px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial' }}>Loading productsâ¦</div>\n      )}\n      {error && (\n        <div style={{ padding: '16px', color: '#b91c1c', background: '#fef2f2', border: '1px solid #fee2e2', borderRadius: 8, marginBottom: 12 }}>{error}</div>\n      )}\n      {!loading && !error && <PimAdminProductList products={products} />}\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/sampleProducts.test.js",
      "content": "const assert = require('assert');\nconst { getSampleProducts } = require('../lib/data/sampleProducts');\n\nfunction run() {\n  const products = getSampleProducts();\n  assert(Array.isArray(products), 'products should be an array');\n  assert(products.length >= 3, 'should have at least 3 sample products');\n\n  for (const p of products) {\n    assert(p.id && typeof p.id === 'string', 'product.id should be string');\n    assert(p.sku && typeof p.sku === 'string', 'product.sku should be string');\n    assert(p.name && typeof p.name === 'string', 'product.name should be string');\n    assert(typeof p.price === 'number', 'product.price should be number');\n    assert(p.currency && typeof p.currency === 'string', 'product.currency should be string');\n    assert(p.attributes && Array.isArray(p.attributes), 'product.attributes should be array');\n  }\n\n  // Check attribute groups include General at least for first product\n  const hasGeneral = products[0].attributes.some((g) => g.group === 'General');\n  assert(hasGeneral, 'first product should have General attribute group');\n\n  // Variants shape check (if any)\n  const prodWithVariants = products.find((p) => Array.isArray(p.variants) && p.variants.length > 0);\n  if (prodWithVariants) {\n    const v = prodWithVariants.variants[0];\n    assert(v.id && v.sku, 'variant should have id and sku');\n    assert(v.options && typeof v.options === 'object', 'variant.options should be object');\n  }\n\n  console.log('OK: sampleProducts shape is valid.');\n}\n\nif (require.main === module) {\n  try {\n    run();\n  } catch (err) {\n    console.error('Test failed:', err && err.message ? err.message : err);\n    process.exit(1);\n  }\n}\n\nmodule.exports = { run };\n"
    }
  ]
}