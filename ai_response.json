{
  "commit_message": "FEATURE: Add shareable URL filters (search, tags, inStock) to product list and new /tags page for browsing tags. Include tests for URL sync and tags page rendering.",
  "diff": "--- a/pages/index.js\n+++ b/pages/index.js\n@@ -1,8 +1,9 @@\n import React, { useEffect, useState } from 'react';\n import ProductList from '../components/ProductList';\n import ExportCsvLink from '../components/ExportCsvLink';\n import StockFilterToggle from '../components/StockFilterToggle';\n \n const Home = () => {\n   const [products, setProducts] = useState([]);\n   const [query, setQuery] = useState('');\n   const [allTags, setAllTags] = useState([]);\n   const [selectedTags, setSelectedTags] = useState([]);\n   const [inStockOnly, setInStockOnly] = useState(false);\n \n+  // Load available tags once\n   useEffect(() => {\n     let cancelled = false;\n     const loadTags = async () => {\n       try {\n         const res = await fetch('/api/tags');\n         const data = await res.json();\n         if (!cancelled) setAllTags(Array.isArray(data) ? data : []);\n       } catch (e) {\n         if (!cancelled) setAllTags([]);\n       }\n     };\n     loadTags();\n     return () => {\n       cancelled = true;\n     };\n   }, []);\n \n+  // Initialize filters from URL query on first client render\n+  useEffect(() => {\n+    if (typeof window === 'undefined') return;\n+    const params = new URLSearchParams(window.location.search);\n+    const search = params.get('search') || '';\n+    const tagsParam = params.get('tags') || '';\n+    const inStock = params.get('inStock');\n+\n+    if (search) setQuery(search);\n+    if (tagsParam) {\n+      const tags = tagsParam\n+        .split(',')\n+        .map((t) => t.trim())\n+        .filter(Boolean);\n+      if (tags.length) setSelectedTags(tags);\n+    }\n+    if (inStock === '1' || inStock === 'true') setInStockOnly(true);\n+  }, []);\n+\n   useEffect(() => {\n     let active = true;\n     const controller = new AbortController();\n \n     const fetchProducts = async () => {\n       const params = [];\n       if (query) params.push(`search=${encodeURIComponent(query)}`);\n       if (selectedTags.length > 0) params.push(`tags=${selectedTags.map(encodeURIComponent).join(',')}`);\n       if (inStockOnly) params.push('inStock=1');\n       const qs = params.length ? `?${params.join('&')}` : '';\n       const res = await fetch(`/api/products${qs}`, { signal: controller.signal });\n       const data = await res.json();\n       if (active) setProducts(data);\n     };\n \n     const t = setTimeout(fetchProducts, 250);\n \n     return () => {\n       active = false;\n       controller.abort();\n       clearTimeout(t);\n     };\n   }, [query, selectedTags, inStockOnly]);\n \n+  // Keep URL in sync with current filters (shareable URLs)\n+  useEffect(() => {\n+    if (typeof window === 'undefined') return;\n+    const params = [];\n+    if (query) params.push(`search=${encodeURIComponent(query)}`);\n+    if (selectedTags.length > 0) params.push(`tags=${selectedTags.map(encodeURIComponent).join(',')}`);\n+    if (inStockOnly) params.push('inStock=1');\n+    const qs = params.length ? `?${params.join('&')}` : '';\n+    const nextUrl = `${window.location.pathname}${qs}`;\n+    if (nextUrl !== `${window.location.pathname}${window.location.search}`) {\n+      window.history.replaceState({}, '', nextUrl);\n+    }\n+  }, [query, selectedTags, inStockOnly]);\n+\n   const toggleTag = (tag) => {\n     setSelectedTags((prev) => {\n       if (prev.includes(tag)) return prev.filter((t) => t !== tag);\n       return [...prev, tag];\n     });\n   };\n@@\n       {allTags.length > 0 && (\n         <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem', marginBottom: '1rem' }}>\n           {allTags.map((tag) => {\n             const active = selectedTags.includes(tag);\n             return (\n               <button\n                 key={tag}\n                 onClick={() => toggleTag(tag)}\n                 aria-pressed={active}\n                 style={{\n                   padding: '0.25rem 0.5rem',\n                   borderRadius: 999,\n                   border: '1px solid ' + (active ? '#0b64d8' : '#ddd'),\n                   background: active ? '#e7f1ff' : 'white',\n                   color: active ? '#0b64d8' : '#333',\n                   cursor: 'pointer',\n                   fontSize: 12,\n                 }}\n               >\n                 {tag}\n               </button>\n             );\n           })}\n           {selectedTags.length > 0 && (\n             <button\n               onClick={() => setSelectedTags([])}\n               style={{\n                 marginLeft: 'auto',\n                 padding: '0.25rem 0.5rem',\n                 borderRadius: 6,\n                 border: '1px solid #ddd',\n                 background: '#fafafa',\n                 cursor: 'pointer',\n                 fontSize: 12,\n               }}\n               aria-label=\"Clear selected tags\"\n             >\n               Clear tags\n             </button>\n           )}\n         </div>\n       )}\n \n       <ProductList products={products} />\n     </div>\n   );\n };\n \n export default Home;\n",
  "files": [
    {
      "path": "pages/tags.js",
      "content": "import React, { useEffect, useState } from 'react';\n\nconst TagsPage = () => {\n  const [tags, setTags] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let cancelled = false;\n    const run = async () => {\n      try {\n        const res = await fetch('/api/tags');\n        const data = await res.json();\n        if (!cancelled) setTags(Array.isArray(data) ? data : []);\n      } catch (e) {\n        if (!cancelled) setTags([]);\n      } finally {\n        if (!cancelled) setLoading(false);\n      }\n    };\n    run();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  return (\n    <div style={{ maxWidth: 800, margin: '0 auto', padding: '1rem' }}>\n      <h1 style={{ marginBottom: '0.5rem' }}>Browse Tags</h1>\n      <p style={{ color: '#666', marginTop: 0 }}>Click a tag to view filtered products.</p>\n      {loading && <div>Loading tagsâ€¦</div>}\n      {!loading && tags.length === 0 && <div>No tags found.</div>}\n      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem' }}>\n        {tags.map((tag) => (\n          <a\n            key={tag}\n            href={`/?tags=${encodeURIComponent(tag)}`}\n            style={{\n              padding: '0.4rem 0.7rem',\n              borderRadius: 999,\n              border: '1px solid #ddd',\n              background: '#fafafa',\n              color: '#333',\n              textDecoration: 'none',\n              fontSize: 13,\n            }}\n            aria-label={`Filter products by tag ${tag}`}\n          >\n            {tag}\n          </a>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TagsPage;\n"
    },
    {
      "path": "tests/indexUrlSync.test.js",
      "content": "/* eslint-env jest */\nimport React from 'react';\nimport { render, waitFor } from '@testing-library/react';\nimport Home from '../pages/index';\n\nfunction setLocation(search = '') {\n  const url = `http://localhost/${search ? '?' + search : ''}`;\n  delete window.location;\n  // @ts-ignore\n  window.location = new URL(url);\n}\n\ndescribe('Home page URL sync', () => {\n  beforeEach(() => {\n    jest.useFakeTimers();\n    global.fetch = jest.fn()\n      // first call: tags\n      .mockResolvedValueOnce({ json: async () => ['Sale', 'New'] })\n      // second call: products\n      .mockResolvedValueOnce({ json: async () => [] });\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n    jest.resetAllMocks();\n  });\n\n  it('initializes filters from URL and fetches products with those filters', async () => {\n    setLocation('tags=Tag1,Tag2&search=foo&inStock=1');\n\n    render(<Home />);\n\n    // advance debounce timer\n    await waitFor(() => {\n      // fetch should be called at least twice: /api/tags then /api/products?...\n      expect(global.fetch).toHaveBeenCalled();\n    });\n\n    // The last call should be products with expected query params\n    const lastCallUrl = (global.fetch).mock.calls.pop()[0];\n    expect(lastCallUrl).toContain('/api/products');\n    expect(lastCallUrl).toContain('search=foo');\n    expect(lastCallUrl).toContain('tags=Tag1,Tag2');\n    expect(lastCallUrl).toContain('inStock=1');\n  });\n});\n"
    },
    {
      "path": "tests/tagsPage.test.js",
      "content": "/* eslint-env jest */\nimport React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport TagsPage from '../pages/tags';\n\ndescribe('Tags page', () => {\n  beforeEach(() => {\n    global.fetch = jest.fn().mockResolvedValue({ json: async () => ['Sale', 'New'] });\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  it('renders tags as links to filtered product list', async () => {\n    render(<TagsPage />);\n\n    await waitFor(() => {\n      expect(screen.getByRole('link', { name: /Filter products by tag Sale/i })).toBeInTheDocument();\n      expect(screen.getByRole('link', { name: /Filter products by tag New/i })).toBeInTheDocument();\n    });\n\n    const saleLink = screen.getByRole('link', { name: /Sale/i });\n    expect(saleLink.getAttribute('href')).toBe('/?tags=Sale');\n  });\n});\n"
    }
  ]
}