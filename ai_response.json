{
  "files": [
    {
      "path": "data/attribute-groups.json",
      "content": "{\n  \"groups\": [\n    {\n      \"id\": \"variants\",\n      \"name\": \"Variants\",\n      \"description\": \"Attributes that define purchasable variants.\",\n      \"attributes\": [\n        {\n          \"code\": \"color\",\n          \"label\": \"Color\",\n          \"type\": \"select\",\n          \"options\": [\"Red\", \"Green\", \"Blue\", \"Black\", \"White\"],\n          \"useInVariant\": true,\n          \"required\": true\n        },\n        {\n          \"code\": \"size\",\n          \"label\": \"Size\",\n          \"type\": \"select\",\n          \"options\": [\"XS\", \"S\", \"M\", \"L\", \"XL\"],\n          \"useInVariant\": true,\n          \"required\": true\n        }\n      ]\n    },\n    {\n      \"id\": \"specifications\",\n      \"name\": \"Specifications\",\n      \"description\": \"General product attributes for merchandising and filters.\",\n      \"attributes\": [\n        {\n          \"code\": \"material\",\n          \"label\": \"Material\",\n          \"type\": \"text\",\n          \"useInVariant\": false,\n          \"required\": false\n        },\n        {\n          \"code\": \"weight\",\n          \"label\": \"Weight\",\n          \"type\": \"number\",\n          \"unit\": \"kg\",\n          \"useInVariant\": false,\n          \"required\": false\n        },\n        {\n          \"code\": \"brand\",\n          \"label\": \"Brand\",\n          \"type\": \"text\",\n          \"useInVariant\": false,\n          \"required\": false\n        }\n      ]\n    }\n  ]\n}\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "import fs from 'fs';\nimport path from 'path';\n\nconst filePath = path.join(process.cwd(), 'data', 'attribute-groups.json');\n\nfunction loadAttributeGroups() {\n  const raw = fs.readFileSync(filePath, 'utf8');\n  const data = JSON.parse(raw);\n  return data && Array.isArray(data.groups) ? data.groups : [];\n}\n\nexport default function handler(req, res) {\n  try {\n    const groups = loadAttributeGroups();\n\n    if (req.method === 'GET') {\n      const { flat } = req.query || {};\n      if (flat === '1' || flat === 'true') {\n        const attributes = groups.flatMap((g) =>\n          (g.attributes || []).map((a) => ({\n            groupId: g.id,\n            groupName: g.name,\n            ...a,\n          }))\n        );\n        return res.status(200).json({ attributes, count: attributes.length });\n      }\n\n      return res.status(200).json({ groups, count: groups.length });\n    }\n\n    res.setHeader('Allow', 'GET');\n    return res.status(405).json({ error: 'Method Not Allowed' });\n  } catch (err) {\n    return res.status(500).json({ error: 'Failed to load attribute groups' });\n  }\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import { useEffect, useMemo, useState } from 'react';\n\nexport default function AttributeGroupsAdmin() {\n  const [data, setData] = useState({ groups: [], count: 0 });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    let cancelled = false;\n    async function run() {\n      try {\n        const res = await fetch('/api/attribute-groups');\n        if (!res.ok) throw new Error('Failed to load attribute groups');\n        const json = await res.json();\n        if (!cancelled) setData(json);\n      } catch (e) {\n        if (!cancelled) setError(e.message || 'Unknown error');\n      } finally {\n        if (!cancelled) setLoading(false);\n      }\n    }\n    run();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  const filtered = useMemo(() => {\n    if (!query) return data.groups || [];\n    const q = query.toLowerCase();\n    return (data.groups || []).map((g) => ({\n      ...g,\n      attributes: (g.attributes || []).filter(\n        (a) =>\n          a.code.toLowerCase().includes(q) ||\n          (a.label || '').toLowerCase().includes(q) ||\n          (g.name || '').toLowerCase().includes(q)\n      ),\n    })).filter((g) => (g.attributes || []).length > 0);\n  }, [data.groups, query]);\n\n  return (\n    <div style={{ padding: '24px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1 style={{ margin: '0 0 8px' }}>Attribute Groups</h1>\n      <p style={{ margin: '0 0 16px', color: '#555' }}>\n        Read-only view of attribute groups and variant attributes. Use this to align product data modeling.\n      </p>\n\n      <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>\n        <input\n          type=\"search\"\n          placeholder=\"Filter by group, code, or label...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          style={{ flex: '1 1 auto', padding: '8px 12px', border: '1px solid #ddd', borderRadius: 6 }}\n          aria-label=\"Filter attributes\"\n        />\n        <a href=\"/api/attribute-groups\" target=\"_blank\" rel=\"noreferrer\" style={{ textDecoration: 'none' }}>\n          <button style={buttonStyle}>API</button>\n        </a>\n        <a href=\"/api/attribute-groups?flat=1\" target=\"_blank\" rel=\"noreferrer\" style={{ textDecoration: 'none' }}>\n          <button style={buttonStyle}>Flat JSON</button>\n        </a>\n      </div>\n\n      {loading && <div>Loading attribute groupsâ€¦</div>}\n      {error && <div style={{ color: 'crimson' }}>{error}</div>}\n\n      {!loading && !error && (\n        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', gap: 16 }}>\n          {filtered.map((group) => (\n            <div key={group.id} style={cardStyle}>\n              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>\n                <h2 style={{ margin: 0, fontSize: 18 }}>{group.name}</h2>\n                <span style={pillStyle}>{group.id}</span>\n              </div>\n              {group.description && (\n                <p style={{ margin: '4px 0 12px', color: '#666', fontSize: 14 }}>{group.description}</p>\n              )}\n              <ul style={{ listStyle: 'none', padding: 0, margin: 0, display: 'grid', gap: 8 }}>\n                {(group.attributes || []).map((attr) => (\n                  <li key={attr.code} style={{ border: '1px solid #eee', borderRadius: 6, padding: 10 }}>\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'baseline' }}>\n                      <strong style={{ fontSize: 14 }}>{attr.label}</strong>\n                      <code style={{ color: '#555', fontSize: 12 }}>{attr.code}</code>\n                    </div>\n                    <div style={{ display: 'flex', gap: 8, marginTop: 6, flexWrap: 'wrap' }}>\n                      <span style={metaStyle}>type: {attr.type}</span>\n                      {attr.unit && <span style={metaStyle}>unit: {attr.unit}</span>}\n                      <span style={metaStyle}>variant: {attr.useInVariant ? 'yes' : 'no'}</span>\n                      {attr.required && <span style={metaStyle}>required</span>}\n                    </div>\n                    {Array.isArray(attr.options) && attr.options.length > 0 && (\n                      <div style={{ marginTop: 8, display: 'flex', gap: 6, flexWrap: 'wrap' }}>\n                        {attr.options.map((opt) => (\n                          <span key={opt} style={optionStyle}>{opt}</span>\n                        ))}\n                      </div>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst buttonStyle = {\n  padding: '8px 12px',\n  borderRadius: 6,\n  border: '1px solid #ddd',\n  background: '#fff',\n  cursor: 'pointer'\n};\n\nconst cardStyle = {\n  border: '1px solid #e5e7eb',\n  borderRadius: 8,\n  padding: 16,\n  background: '#fff',\n  boxShadow: '0 1px 2px rgba(0,0,0,0.04)'\n};\n\nconst pillStyle = {\n  background: '#f3f4f6',\n  border: '1px solid #e5e7eb',\n  borderRadius: 999,\n  padding: '2px 8px',\n  fontSize: 12,\n  color: '#374151'\n};\n\nconst metaStyle = {\n  background: '#f9fafb',\n  border: '1px solid #f3f4f6',\n  borderRadius: 4,\n  padding: '2px 6px',\n  fontSize: 12,\n  color: '#374151'\n};\n\nconst optionStyle = {\n  background: '#eef2ff',\n  border: '1px solid #e0e7ff',\n  borderRadius: 999,\n  padding: '2px 8px',\n  fontSize: 12,\n  color: '#3730a3'\n};\n"
    },
    {
      "path": "__tests__/api-attribute-groups.test.js",
      "content": "import handler from '../pages/api/attribute-groups';\n\nfunction createMockRes() {\n  return {\n    statusCode: 200,\n    headers: {},\n    body: undefined,\n    setHeader(name, value) {\n      this.headers[name] = value;\n    },\n    status(code) {\n      this.statusCode = code;\n      return this;\n    },\n    json(payload) {\n      this.body = payload;\n      return this;\n    },\n  };\n}\n\ntest('GET /api/attribute-groups returns groups', async () => {\n  const req = { method: 'GET', query: {} };\n  const res = createMockRes();\n  await handler(req, res);\n  expect(res.statusCode).toBe(200);\n  expect(res.body).toBeDefined();\n  expect(Array.isArray(res.body.groups)).toBe(true);\n  expect(res.body.count).toBeGreaterThan(0);\n});\n\ntest('GET /api/attribute-groups?flat=1 returns flattened attributes', async () => {\n  const req = { method: 'GET', query: { flat: '1' } };\n  const res = createMockRes();\n  await handler(req, res);\n  expect(res.statusCode).toBe(200);\n  expect(res.body).toBeDefined();\n  expect(Array.isArray(res.body.attributes)).toBe(true);\n  expect(res.body.count).toBeGreaterThan(0);\n  // Contains group metadata on flattened entries\n  const first = res.body.attributes[0];\n  expect(first).toHaveProperty('groupId');\n  expect(first).toHaveProperty('groupName');\n});\n"
    },
    {
      "path": "commit_message",
      "content": "FEATURE: Add attribute groups API and admin UI with sample data and tests. Introduces /api/attribute-groups (with flat mode) and /admin/attribute-groups read-only dashboard backed by data/attribute-groups.json, plus a small API handler test."
    }
  ]
}