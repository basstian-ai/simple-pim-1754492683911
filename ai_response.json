{
  "commit_message": "Feature: Add product-based attribute suggestion API and admin UI with test",
  "diff": "--- a/pages/api/attributes/suggest-for-product.js\n+++ b/pages/api/attributes/suggest-for-product.js\n@@\n+// Suggest attributes for a product based on its name/description/tags\n+// POST /api/attributes/suggest-for-product\n+// Body: { name?: string, description?: string, tags?: string[] }\n+// Returns: string[] of suggested attribute names\n+\n+export default function handler(req, res) {\n+  if (req.method !== 'POST') {\n+    res.setHeader('Allow', ['POST']);\n+    return res.status(405).json({ error: 'Method Not Allowed' });\n+  }\n+\n+  try {\n+    // Load attributes data; handle both array of strings and array of objects\n+    const attributesData = require('../../../data/attributes.json');\n+\n+    const { name = '', description = '', tags = [] } = req.body || {};\n+\n+    const text = [name, description, Array.isArray(tags) ? tags.join(' ') : '']\n+      .filter(Boolean)\n+      .join(' ')\n+      .toLowerCase();\n+\n+    const attributeNames = normalizeAttributes(attributesData);\n+\n+    const suggestions = [];\n+    const seen = new Set();\n+    for (const attr of attributeNames) {\n+      if (!attr) continue;\n+      const needle = String(attr).toLowerCase().trim();\n+      if (!needle) continue;\n+      if (text.includes(needle) && !seen.has(needle)) {\n+        seen.add(needle);\n+        suggestions.push(attr);\n+      }\n+    }\n+\n+    return res.status(200).json(suggestions);\n+  } catch (e) {\n+    // Fallback safe response\n+    return res.status(200).json([]);\n+  }\n+}\n+\n+function normalizeAttributes(data) {\n+  if (!data) return [];\n+  // Accept various shapes: [\"color\", \"size\"], [{ name: \"color\" }], { items: [...] }\n+  const source = Array.isArray(data) ? data : Array.isArray(data.items) ? data.items : [];\n+  const result = [];\n+  for (const item of source) {\n+    if (item == null) continue;\n+    if (typeof item === 'string') {\n+      result.push(item);\n+    } else if (typeof item === 'object') {\n+      const candidate = item.name || item.label || item.slug || item.key || '';\n+      if (candidate) result.push(candidate);\n+    }\n+  }\n+  return result;\n+}\n+\n",
  "files": [
    {
      "path": "pages/admin/attribute-suggest-product.js",
      "content": "import React, { useState } from 'react';\n\nconst AttributeSuggestProduct = () => {\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [tags, setTags] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setSuggestions([]);\n    setLoading(true);\n    try {\n      const body = {\n        name,\n        description,\n        tags: tags\n          .split(',')\n          .map((t) => t.trim())\n          .filter(Boolean),\n      };\n      const res = await fetch('/api/attributes/suggest-for-product', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(body),\n      });\n      const data = await res.json();\n      if (Array.isArray(data)) setSuggestions(data);\n    } catch (err) {\n      setError('Failed to fetch suggestions');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: 800, margin: '0 auto', padding: '1rem' }}>\n      <h1 style={{ marginBottom: '0.5rem' }}>Suggest Attributes for a Product</h1>\n      <p style={{ marginTop: 0, color: '#555' }}>\n        Paste a product name/description and optional tags to get attribute suggestions.\n      </p>\n      <form onSubmit={onSubmit} style={{ display: 'grid', gap: '0.75rem', marginBottom: '1rem' }}>\n        <input\n          type=\"text\"\n          placeholder=\"Product name\"\n          aria-label=\"Product name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          style={{ padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n        />\n        <textarea\n          placeholder=\"Product description\"\n          aria-label=\"Product description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          rows={5}\n          style={{ padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Tags (comma-separated)\"\n          aria-label=\"Tags\"\n          value={tags}\n          onChange={(e) => setTags(e.target.value)}\n          style={{ padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n        />\n        <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center' }}>\n          <button\n            type=\"submit\"\n            disabled={loading}\n            style={{\n              padding: '0.5rem 0.75rem',\n              border: '1px solid #0b64d8',\n              background: '#0b64d8',\n              color: 'white',\n              borderRadius: 6,\n              cursor: 'pointer',\n            }}\n          >\n            {loading ? 'Suggestingâ€¦' : 'Suggest Attributes'}\n          </button>\n          {suggestions.length > 0 && (\n            <span style={{ color: '#555', fontSize: 12 }}>\n              {suggestions.length} suggestion{suggestions.length === 1 ? '' : 's'}\n            </span>\n          )}\n        </div>\n      </form>\n\n      {error && (\n        <div role=\"alert\" style={{ color: '#b00020', marginBottom: '1rem' }}>\n          {error}\n        </div>\n      )}\n\n      {suggestions.length > 0 && (\n        <div>\n          <h2 style={{ fontSize: 16, marginBottom: '0.5rem' }}>Suggested Attributes</h2>\n          <ul>\n            {suggestions.map((s) => (\n              <li key={s}>{s}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AttributeSuggestProduct;\n"
    },
    {
      "path": "tests/attributeSuggestProduct.ui.test.js",
      "content": "import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport Page from '../pages/admin/attribute-suggest-product';\n\ndescribe('Admin Attribute Suggest (Product-based)', () => {\n  beforeEach(() => {\n    global.fetch = jest.fn().mockResolvedValue({\n      ok: true,\n      json: async () => ['color', 'size'],\n    });\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  it('submits product details and renders suggestions', async () => {\n    render(<Page />);\n\n    const nameInput = screen.getByLabelText('Product name');\n    const descInput = screen.getByLabelText('Product description');\n    const tagsInput = screen.getByLabelText('Tags');\n\n    fireEvent.change(nameInput, { target: { value: 'Red Cotton T-Shirt' } });\n    fireEvent.change(descInput, { target: { value: 'Soft cotton tee in red color' } });\n    fireEvent.change(tagsInput, { target: { value: 'apparel, tee, red' } });\n\n    fireEvent.click(screen.getByRole('button', { name: /suggest attributes/i }));\n\n    await waitFor(() => {\n      expect(global.fetch).toHaveBeenCalledWith(\n        '/api/attributes/suggest-for-product',\n        expect.objectContaining({ method: 'POST' })\n      );\n    });\n\n    // Render suggestions\n    expect(await screen.findByText('color')).toBeInTheDocument();\n    expect(await screen.findByText('size')).toBeInTheDocument();\n  });\n});\n"
    }
  ]
}