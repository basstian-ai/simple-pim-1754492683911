{
  "files": [
    {
      "path": "pages/api/attributes/index.js",
      "content": "const fs = require('fs');\nconst path = require('path');\n\nfunction loadAttributes() {\n  try {\n    const p = path.join(process.cwd(), 'data', 'attributes.json');\n    const raw = fs.readFileSync(p, 'utf8');\n    const data = JSON.parse(raw);\n    return data;\n  } catch (err) {\n    return {\n      groups: [],\n      updatedAt: new Date(0).toISOString(),\n      error: 'Sample attributes not found',\n    };\n  }\n}\n\nfunction allowCors(res) {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET,POST,PUT,OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n}\n\nasync function handler(req, res) {\n  allowCors(res);\n  const { method } = req;\n\n  if (method === 'OPTIONS') {\n    res.status(204).end();\n    return;\n  }\n\n  if (method === 'GET') {\n    const data = loadAttributes();\n    res.status(200).json(data);\n    return;\n  }\n\n  if (method === 'POST' || method === 'PUT') {\n    // Demo-only: echo back without persisting\n    const incoming = req.body || {};\n    res.status(202).json({\n      ok: true,\n      persisted: false,\n      message: 'Demo mode: changes are not persisted on the server. Use local save in the admin UI.',\n      data: incoming,\n      serverSample: loadAttributes(),\n    });\n    return;\n  }\n\n  res.status(405).json({ error: 'Method Not Allowed' });\n}\n\nmodule.exports = handler;\nmodule.exports.default = handler;\n"
    },
    {
      "path": "pages/admin/attributes.js",
      "content": "import React, { useEffect, useMemo, useState } from 'react';\n\nconst LOCAL_KEY = 'pim:attributeGroups';\n\nfunction slugify(value) {\n  return String(value || '')\n    .toLowerCase()\n    .trim()\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/(^-|-$)+/g, '');\n}\n\nfunction newAttribute() {\n  return { code: '', label: '', type: 'text', options: [], unit: '' };\n}\n\nfunction newGroup() {\n  return { id: '', name: '', attributes: [newAttribute()] };\n}\n\nexport default function AttributeGroupsAdmin() {\n  const [groups, setGroups] = useState([]);\n  const [loadedFrom, setLoadedFrom] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    async function init() {\n      setLoading(true);\n      setError('');\n      setMessage('');\n      try {\n        const local = typeof window !== 'undefined' ? window.localStorage.getItem(LOCAL_KEY) : null;\n        if (local) {\n          const parsed = JSON.parse(local);\n          setGroups(parsed);\n          setLoadedFrom('local');\n        } else {\n          const res = await fetch('/api/attributes');\n          if (!res.ok) throw new Error('Failed to load sample attributes');\n          const data = await res.json();\n          setGroups(Array.isArray(data.groups) ? data.groups : []);\n          setLoadedFrom('server');\n        }\n      } catch (e) {\n        setError(e.message || 'Failed to initialize');\n      } finally {\n        setLoading(false);\n      }\n    }\n    init();\n  }, []);\n\n  const groupIds = useMemo(() => new Set(groups.map((g) => g.id)), [groups]);\n\n  function updateGroup(index, updater) {\n    setGroups((prev) => {\n      const next = [...prev];\n      next[index] = updater({ ...next[index] });\n      return next;\n    });\n  }\n\n  function addGroup() {\n    setGroups((prev) => [...prev, newGroup()]);\n  }\n\n  function removeGroup(index) {\n    setGroups((prev) => prev.filter((_, i) => i !== index));\n  }\n\n  function addAttributeToGroup(gIndex) {\n    updateGroup(gIndex, (g) => ({ ...g, attributes: [...(g.attributes || []), newAttribute()] }));\n  }\n\n  function removeAttributeFromGroup(gIndex, aIndex) {\n    updateGroup(gIndex, (g) => ({ ...g, attributes: (g.attributes || []).filter((_, i) => i !== aIndex) }));\n  }\n\n  function saveLocal() {\n    try {\n      if (typeof window === 'undefined') return;\n      window.localStorage.setItem(LOCAL_KEY, JSON.stringify(groups));\n      setLoadedFrom('local');\n      setMessage('Saved to local device.');\n    } catch (e) {\n      setError('Failed to save locally');\n    }\n  }\n\n  async function resetFromServer() {\n    setLoading(true);\n    setError('');\n    setMessage('');\n    try {\n      const res = await fetch('/api/attributes');\n      if (!res.ok) throw new Error('Failed to load sample');\n      const data = await res.json();\n      setGroups(Array.isArray(data.groups) ? data.groups : []);\n      setLoadedFrom('server');\n    } catch (e) {\n      setError(e.message || 'Failed to reset');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  function handleNameChange(i, name) {\n    updateGroup(i, (g) => {\n      const id = g.id || slugify(name);\n      return { ...g, name, id };\n    });\n  }\n\n  function handleIdChange(i, id) {\n    updateGroup(i, (g) => ({ ...g, id: slugify(id) }));\n  }\n\n  function handleAttrChange(gi, ai, field, value) {\n    updateGroup(gi, (g) => {\n      const attrs = [...(g.attributes || [])];\n      const next = { ...attrs[ai], [field]: value };\n      // Keep code slug-like\n      if (field === 'label' && !next.code) {\n        next.code = slugify(value);\n      }\n      if (field === 'type' && value !== 'select') {\n        next.options = [];\n      }\n      attrs[ai] = next;\n      return { ...g, attributes: attrs };\n    });\n  }\n\n  function addOption(gi, ai) {\n    updateGroup(gi, (g) => {\n      const attrs = [...(g.attributes || [])];\n      const a = { ...attrs[ai] };\n      a.options = Array.isArray(a.options) ? [...a.options, ''] : [''];\n      attrs[ai] = a;\n      return { ...g, attributes: attrs };\n    });\n  }\n\n  function updateOption(gi, ai, oi, val) {\n    updateGroup(gi, (g) => {\n      const attrs = [...(g.attributes || [])];\n      const a = { ...attrs[ai] };\n      const opts = Array.isArray(a.options) ? [...a.options] : [];\n      opts[oi] = val;\n      a.options = opts;\n      attrs[ai] = a;\n      return { ...g, attributes: attrs };\n    });\n  }\n\n  function removeOption(gi, ai, oi) {\n    updateGroup(gi, (g) => {\n      const attrs = [...(g.attributes || [])];\n      const a = { ...attrs[ai] };\n      const opts = Array.isArray(a.options) ? a.options.filter((_, i) => i !== oi) : [];\n      a.options = opts;\n      attrs[ai] = a;\n      return { ...g, attributes: attrs };\n    });\n  }\n\n  const headerNote = loadedFrom === 'local' ? 'Loaded from local device' : loadedFrom === 'server' ? 'Loaded from server sample' : '';\n\n  return (\n    <div style={{ maxWidth: 1100, margin: '0 auto', padding: 24, fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1 style={{ fontSize: 26, margin: 0 }}>Attribute Groups</h1>\n      <div style={{ color: '#555', marginTop: 4 }}>{headerNote}</div>\n\n      <div style={{ marginTop: 16, display: 'flex', gap: 8, flexWrap: 'wrap' }}>\n        <button onClick={addGroup} style={{ padding: '8px 12px', background: '#111827', color: 'white', border: 0, borderRadius: 6, cursor: 'pointer' }}>Add Group</button>\n        <button onClick={saveLocal} style={{ padding: '8px 12px', background: '#2563eb', color: 'white', border: 0, borderRadius: 6, cursor: 'pointer' }}>Save (local)</button>\n        <button onClick={resetFromServer} style={{ padding: '8px 12px', background: '#6b7280', color: 'white', border: 0, borderRadius: 6, cursor: 'pointer' }}>Reset to Server Sample</button>\n      </div>\n\n      {loading && <div style={{ marginTop: 16 }}>Loadingâ€¦</div>}\n      {error && <div style={{ marginTop: 16, color: '#b91c1c' }}>{error}</div>}\n      {message && <div style={{ marginTop: 16, color: '#065f46' }}>{message}</div>}\n\n      <div style={{ marginTop: 24, display: 'grid', gap: 16 }}>\n        {groups.map((g, gi) => (\n          <div key={gi} style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: 16 }}>\n            <div style={{ display: 'flex', gap: 12, alignItems: 'center', marginBottom: 12 }}>\n              <input\n                placeholder=\"Group name\"\n                value={g.name}\n                onChange={(e) => handleNameChange(gi, e.target.value)}\n                style={{ flex: 2, padding: 8, border: '1px solid #d1d5db', borderRadius: 6 }}\n              />\n              <input\n                placeholder=\"group-id\"\n                value={g.id}\n                onChange={(e) => handleIdChange(gi, e.target.value)}\n                style={{ flex: 1, padding: 8, border: '1px solid #d1d5db', borderRadius: 6 }}\n              />\n              <button onClick={() => addAttributeToGroup(gi)} style={{ padding: '8px 12px', background: '#10b981', color: 'white', border: 0, borderRadius: 6, cursor: 'pointer' }}>Add Attribute</button>\n              <button onClick={() => removeGroup(gi)} style={{ padding: '8px 12px', background: '#ef4444', color: 'white', border: 0, borderRadius: 6, cursor: 'pointer' }}>Remove Group</button>\n            </div>\n            {groupIds.has(g.id) || !g.id ? null : (\n              <div style={{ color: '#b45309', marginBottom: 8 }}>Duplicate group id detected</div>\n            )}\n\n            <div style={{ display: 'grid', gap: 12 }}>\n              {(g.attributes || []).map((a, ai) => (\n                <div key={ai} style={{ padding: 12, background: '#f9fafb', borderRadius: 6 }}>\n                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 1fr auto', gap: 8, alignItems: 'center' }}>\n                    <input\n                      placeholder=\"Label\"\n                      value={a.label}\n                      onChange={(e) => handleAttrChange(gi, ai, 'label', e.target.value)}\n                      style={{ padding: 8, border: '1px solid #d1d5db', borderRadius: 6 }}\n                    />\n                    <input\n                      placeholder=\"code\"\n                      value={a.code}\n                      onChange={(e) => handleAttrChange(gi, ai, 'code', slugify(e.target.value))}\n                      style={{ padding: 8, border: '1px solid #d1d5db', borderRadius: 6 }}\n                    />\n                    <select\n                      value={a.type || 'text'}\n                      onChange={(e) => handleAttrChange(gi, ai, 'type', e.target.value)}\n                      style={{ padding: 8, border: '1px solid #d1d5db', borderRadius: 6 }}\n                    >\n                      <option value=\"text\">Text</option>\n                      <option value=\"number\">Number</option>\n                      <option value=\"select\">Select</option>\n                      <option value=\"boolean\">Boolean</option>\n                    </select>\n                    <input\n                      placeholder=\"Unit (optional)\"\n                      value={a.unit || ''}\n                      onChange={(e) => handleAttrChange(gi, ai, 'unit', e.target.value)}\n                      style={{ padding: 8, border: '1px solid #d1d5db', borderRadius: 6 }}\n                    />\n                    <button onClick={() => removeAttributeFromGroup(gi, ai)} style={{ padding: '8px 12px', background: '#ef4444', color: 'white', border: 0, borderRadius: 6, cursor: 'pointer' }}>Remove</button>\n                  </div>\n                  {a.type === 'select' && (\n                    <div style={{ marginTop: 8 }}>\n                      <div style={{ display: 'flex', gap: 8, alignItems: 'center', marginBottom: 6 }}>\n                        <strong>Options</strong>\n                        <button onClick={() => addOption(gi, ai)} style={{ padding: '4px 8px', background: '#111827', color: 'white', border: 0, borderRadius: 6, cursor: 'pointer' }}>Add Option</button>\n                      </div>\n                      <div style={{ display: 'grid', gap: 6 }}>\n                        {(a.options || []).map((opt, oi) => (\n                          <div key={oi} style={{ display: 'grid', gridTemplateColumns: '1fr auto', gap: 8 }}>\n                            <input\n                              placeholder={`Option ${oi + 1}`}\n                              value={opt}\n                              onChange={(e) => updateOption(gi, ai, oi, e.target.value)}\n                              style={{ padding: 8, border: '1px solid #d1d5db', borderRadius: 6 }}\n                            />\n                            <button onClick={() => removeOption(gi, ai, oi)} style={{ padding: '8px 12px', background: '#6b7280', color: 'white', border: 0, borderRadius: 6, cursor: 'pointer' }}>Remove</button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "data/attributes.json",
      "content": "{\n  \"groups\": [\n    {\n      \"id\": \"specs\",\n      \"name\": \"Specifications\",\n      \"attributes\": [\n        { \"code\": \"material\", \"label\": \"Material\", \"type\": \"text\" },\n        { \"code\": \"weight\", \"label\": \"Weight\", \"type\": \"text\" },\n        { \"code\": \"color\", \"label\": \"Color\", \"type\": \"select\", \"options\": [\"Red\", \"Green\", \"Blue\", \"Black\", \"White\"] }\n      ]\n    },\n    {\n      \"id\": \"dimensions\",\n      \"name\": \"Dimensions\",\n      \"attributes\": [\n        { \"code\": \"length\", \"label\": \"Length\", \"type\": \"number\", \"unit\": \"cm\" },\n        { \"code\": \"width\", \"label\": \"Width\", \"type\": \"number\", \"unit\": \"cm\" },\n        { \"code\": \"height\", \"label\": \"Height\", \"type\": \"number\", \"unit\": \"cm\" }\n      ]\n    },\n    {\n      \"id\": \"shipping\",\n      \"name\": \"Shipping\",\n      \"attributes\": [\n        { \"code\": \"ships_from\", \"label\": \"Ships From\", \"type\": \"text\" },\n        { \"code\": \"hazmat\", \"label\": \"Hazardous Material\", \"type\": \"boolean\" }\n      ]\n    }\n  ],\n  \"updatedAt\": \"2025-08-01T00:00:00.000Z\"\n}\n"
    },
    {
      "path": "__tests__/api.attributes.test.js",
      "content": "const assert = require('assert');\nconst handler = require('../pages/api/attributes/index.js');\n\nfunction createMocks(method = 'GET', body = null) {\n  let statusCode = 200;\n  const headers = {};\n  let jsonData = null;\n  let ended = false;\n\n  const req = { method, body };\n  const res = {\n    setHeader: (k, v) => {\n      headers[k] = v;\n    },\n    status: (code) => {\n      statusCode = code;\n      return res;\n    },\n    json: (data) => {\n      jsonData = data;\n      ended = true;\n      return res;\n    },\n    end: () => {\n      ended = true;\n      return res;\n    },\n  };\n\n  return { req, res, get statusCode() { return statusCode; }, headers, get json() { return jsonData; }, get ended() { return ended; } };\n}\n\nasync function run() {\n  const mocks = createMocks('GET');\n  await handler(mocks.req, mocks.res);\n  assert.strictEqual(mocks.statusCode, 200, 'GET should return 200');\n  assert.ok(mocks.json, 'Response should have JSON');\n  assert.ok(Array.isArray(mocks.json.groups), 'groups array present');\n  console.log('ok - /api/attributes GET returns groups');\n}\n\nif (require.main === module) {\n  run().catch((err) => {\n    console.error(err);\n    process.exit(1);\n  });\n}\n\nmodule.exports = { run };\n"
    }
  ]
}