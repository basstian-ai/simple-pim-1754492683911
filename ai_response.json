{
  "files": [
    {
      "path": "lib/attributeGroupsStore.js",
      "content": "/*\n  In-memory Attribute Groups store for the Simple PIM.\n  Note: This is ephemeral and resets per serverless instance. Suitable for demo/dev.\n*/\n\nfunction uuid() {\n  return (\n    Date.now().toString(36) +\n    '-' + Math.random().toString(36).slice(2, 8) +\n    '-' + Math.random().toString(36).slice(2, 8)\n  );\n}\n\nfunction ensureAttrId(attr) {\n  if (!attr) return null;\n  const { code, label, type } = attr;\n  if (!code || !label) return null;\n  return {\n    id: attr.id || `attr_${uuid()}`,\n    code: String(code),\n    label: String(label),\n    type: String(type || 'text'),\n  };\n}\n\nfunction getStore() {\n  if (!global.__ATTRIBUTE_GROUPS_STORE__) {\n    const initial = [\n      {\n        id: 'grp_basic',\n        name: 'Basic',\n        attributes: [\n          { id: 'attr_name', code: 'name', label: 'Name', type: 'text' },\n          { id: 'attr_sku', code: 'sku', label: 'SKU', type: 'text' },\n          { id: 'attr_desc', code: 'description', label: 'Description', type: 'text' },\n        ],\n      },\n      {\n        id: 'grp_seo',\n        name: 'SEO',\n        attributes: [\n          { id: 'attr_slug', code: 'slug', label: 'Slug', type: 'text' },\n          { id: 'attr_meta_title', code: 'meta_title', label: 'Meta Title', type: 'text' },\n          { id: 'attr_meta_desc', code: 'meta_description', label: 'Meta Description', type: 'text' },\n        ],\n      },\n    ];\n    global.__ATTRIBUTE_GROUPS_STORE__ = {\n      groups: initial,\n    };\n  }\n  return global.__ATTRIBUTE_GROUPS_STORE__;\n}\n\nfunction list() {\n  return [...getStore().groups];\n}\n\nfunction get(id) {\n  return getStore().groups.find((g) => g.id === id) || null;\n}\n\nfunction create({ name, attributes }) {\n  const store = getStore();\n  const id = `grp_${uuid()}`;\n  const attrs = Array.isArray(attributes)\n    ? attributes\n        .map(ensureAttrId)\n        .filter(Boolean)\n    : [];\n  const group = { id, name: String(name || 'Untitled Group'), attributes: attrs };\n  store.groups = [...store.groups, group];\n  return group;\n}\n\nfunction update(id, data) {\n  const store = getStore();\n  const idx = store.groups.findIndex((g) => g.id === id);\n  if (idx === -1) return null;\n  const current = store.groups[idx];\n  let next = { ...current };\n  if (typeof data.name === 'string' && data.name.trim().length > 0) {\n    next.name = data.name;\n  }\n  if (Array.isArray(data.attributes)) {\n    next.attributes = data.attributes.map(ensureAttrId).filter(Boolean);\n  }\n  store.groups = [\n    ...store.groups.slice(0, idx),\n    next,\n    ...store.groups.slice(idx + 1),\n  ];\n  return next;\n}\n\nfunction remove(id) {\n  const store = getStore();\n  const before = store.groups.length;\n  store.groups = store.groups.filter((g) => g.id !== id);\n  return store.groups.length < before;\n}\n\nmodule.exports = {\n  list,\n  get,\n  create,\n  update,\n  remove,\n};\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "import { IncomingMessage, ServerResponse } from 'http';\nconst store = require('../../lib/attributeGroupsStore');\n\nfunction sendJson(res, status, payload) {\n  res.statusCode = status;\n  res.setHeader('Content-Type', 'application/json');\n  res.end(JSON.stringify(payload));\n}\n\nexport default async function handler(req = /** @type {IncomingMessage} */(null), res = /** @type {ServerResponse} */(null)) {\n  const { method, query } = req;\n\n  try {\n    if (method === 'GET') {\n      const { id } = query || {};\n      if (id) {\n        const item = store.get(String(id));\n        if (!item) return sendJson(res, 404, { error: 'Attribute group not found' });\n        return sendJson(res, 200, item);\n      }\n      const items = store.list();\n      return sendJson(res, 200, { items });\n    }\n\n    if (method === 'POST') {\n      const { name, attributes } = req.body || {};\n      if (!name || typeof name !== 'string') {\n        return sendJson(res, 400, { error: 'name is required' });\n      }\n      const created = store.create({ name, attributes: Array.isArray(attributes) ? attributes : [] });\n      return sendJson(res, 201, created);\n    }\n\n    if (method === 'PUT') {\n      const id = (query && query.id) || (req.body && req.body.id);\n      if (!id) return sendJson(res, 400, { error: 'id is required' });\n      const updated = store.update(String(id), req.body || {});\n      if (!updated) return sendJson(res, 404, { error: 'Attribute group not found' });\n      return sendJson(res, 200, updated);\n    }\n\n    if (method === 'DELETE') {\n      const id = (query && query.id) || (req.body && req.body.id);\n      if (!id) return sendJson(res, 400, { error: 'id is required' });\n      const ok = store.remove(String(id));\n      if (!ok) return sendJson(res, 404, { error: 'Attribute group not found' });\n      return sendJson(res, 204, {});\n    }\n\n    res.setHeader('Allow', 'GET,POST,PUT,DELETE');\n    return sendJson(res, 405, { error: 'Method Not Allowed' });\n  } catch (err) {\n    console.error('API /attribute-groups error', err);\n    return sendJson(res, 500, { error: 'Internal Server Error' });\n  }\n}\n"
    },
    {
      "path": "components/AttributeGroupsManager.js",
      "content": "import { useEffect, useMemo, useState } from 'react';\n\nfunction sortByName(items) {\n  return [...items].sort((a, b) => a.name.localeCompare(b.name));\n}\n\nfunction AttributeRow({ attr, onChange, onRemove }) {\n  const [local, setLocal] = useState(attr);\n  useEffect(() => setLocal(attr), [attr]);\n  function update(field, value) {\n    const next = { ...local, [field]: value };\n    setLocal(next);\n    onChange && onChange(next);\n  }\n  return (\n    <tr>\n      <td style={{ padding: '4px' }}>\n        <input value={local.code}\n               onChange={(e) => update('code', e.target.value)}\n               placeholder=\"code\" style={{ width: '100%' }} />\n      </td>\n      <td style={{ padding: '4px' }}>\n        <input value={local.label}\n               onChange={(e) => update('label', e.target.value)}\n               placeholder=\"label\" style={{ width: '100%' }} />\n      </td>\n      <td style={{ padding: '4px' }}>\n        <select value={local.type}\n                onChange={(e) => update('type', e.target.value)}\n                style={{ width: '100%' }}>\n          <option value=\"text\">Text</option>\n          <option value=\"number\">Number</option>\n          <option value=\"boolean\">Boolean</option>\n          <option value=\"select\">Select</option>\n          <option value=\"date\">Date</option>\n        </select>\n      </td>\n      <td style={{ padding: '4px', textAlign: 'right' }}>\n        <button onClick={onRemove} title=\"Remove attribute\">üóëÔ∏è</button>\n      </td>\n    </tr>\n  );\n}\n\nexport default function AttributeGroupsManager() {\n  const [groups, setGroups] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [selectedId, setSelectedId] = useState('');\n\n  const selected = useMemo(() => groups.find((g) => g.id === selectedId) || null, [groups, selectedId]);\n\n  async function load() {\n    setLoading(true);\n    setError('');\n    try {\n      const res = await fetch('/api/attribute-groups');\n      const json = await res.json();\n      const items = Array.isArray(json.items) ? json.items : [];\n      setGroups(items);\n      if (!selectedId && items.length) setSelectedId(items[0].id);\n    } catch (e) {\n      console.error(e);\n      setError('Failed to load attribute groups');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    load();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  async function createGroup(name) {\n    const res = await fetch('/api/attribute-groups', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ name }),\n    });\n    if (!res.ok) throw new Error('Create failed');\n    const created = await res.json();\n    setGroups((gs) => sortByName([...gs, created]));\n    setSelectedId(created.id);\n  }\n\n  async function saveGroup(g) {\n    const res = await fetch(`/api/attribute-groups?id=${encodeURIComponent(g.id)}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(g),\n    });\n    if (!res.ok) throw new Error('Save failed');\n    const updated = await res.json();\n    setGroups((gs) => sortByName(gs.map((x) => (x.id === updated.id ? updated : x))));\n  }\n\n  async function deleteGroup(id) {\n    const res = await fetch(`/api/attribute-groups?id=${encodeURIComponent(id)}`, { method: 'DELETE' });\n    if (res.status !== 204) throw new Error('Delete failed');\n    setGroups((gs) => gs.filter((g) => g.id !== id));\n    if (selectedId === id) setSelectedId('');\n  }\n\n  function Details() {\n    const [draft, setDraft] = useState(selected);\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => setDraft(selected), [selected]);\n\n    if (!selected) return (\n      <div style={{ padding: 16 }}>\n        <em>Select a group to view details</em>\n      </div>\n    );\n\n    function updateName(name) {\n      setDraft({ ...draft, name });\n    }\n\n    function updateAttr(idx, next) {\n      const attrs = [...(draft.attributes || [])];\n      attrs[idx] = next;\n      setDraft({ ...draft, attributes: attrs });\n    }\n\n    function removeAttr(idx) {\n      const attrs = [...(draft.attributes || [])];\n      attrs.splice(idx, 1);\n      setDraft({ ...draft, attributes: attrs });\n    }\n\n    function addAttr() {\n      const attrs = [...(draft.attributes || [])];\n      attrs.push({ code: '', label: '', type: 'text' });\n      setDraft({ ...draft, attributes: attrs });\n    }\n\n    async function onSave() {\n      setSaving(true);\n      try {\n        await saveGroup(draft);\n      } catch (e) {\n        alert('Failed to save group');\n      } finally {\n        setSaving(false);\n      }\n    }\n\n    return (\n      <div style={{ padding: 16 }}>\n        <div style={{ marginBottom: 12 }}>\n          <label>\n            <div style={{ fontSize: 12, color: '#666', marginBottom: 4 }}>Group name</div>\n            <input value={draft.name} onChange={(e) => updateName(e.target.value)} style={{ width: '100%', padding: 8 }} />\n          </label>\n        </div>\n        <div>\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <h3 style={{ margin: '8px 0' }}>Attributes</h3>\n            <button onClick={addAttr}>+ Add attribute</button>\n          </div>\n          <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n            <thead>\n              <tr style={{ textAlign: 'left' }}>\n                <th style={{ padding: '4px' }}>Code</th>\n                <th style={{ padding: '4px' }}>Label</th>\n                <th style={{ padding: '4px' }}>Type</th>\n                <th style={{ padding: '4px' }}></th>\n              </tr>\n            </thead>\n            <tbody>\n              {(draft.attributes || []).map((a, idx) => (\n                <AttributeRow key={idx} attr={a} onChange={(next) => updateAttr(idx, next)} onRemove={() => removeAttr(idx)} />\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <div style={{ marginTop: 16 }}>\n          <button onClick={onSave} disabled={saving}>{saving ? 'Saving...' : 'Save changes'}</button>\n        </div>\n      </div>\n    );\n  }\n\n  function Sidebar() {\n    const [name, setName] = useState('');\n    const [creating, setCreating] = useState(false);\n\n    async function submitCreate(e) {\n      e.preventDefault();\n      if (!name.trim()) return;\n      setCreating(true);\n      try {\n        await createGroup(name.trim());\n        setName('');\n      } catch (e) {\n        alert('Failed to create group');\n      } finally {\n        setCreating(false);\n      }\n    }\n\n    return (\n      <div style={{ padding: 16, borderRight: '1px solid #eee', height: '100%', boxSizing: 'border-box' }}>\n        <h3 style={{ marginTop: 0 }}>Attribute Groups</h3>\n        <form onSubmit={submitCreate} style={{ marginBottom: 12 }}>\n          <div style={{ display: 'flex', gap: 8 }}>\n            <input value={name} onChange={(e) => setName(e.target.value)} placeholder=\"New group name\" style={{ flex: 1, padding: 8 }} />\n            <button type=\"submit\" disabled={creating || !name.trim()}>{creating ? 'Adding...' : 'Add'}</button>\n          </div>\n        </form>\n        {loading ? (\n          <div>Loading‚Ä¶</div>\n        ) : error ? (\n          <div style={{ color: 'crimson' }}>{error}</div>\n        ) : (\n          <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n            {sortByName(groups).map((g) => (\n              <li key={g.id} style={{ padding: '6px 4px', borderRadius: 4, background: selectedId === g.id ? '#f2f6ff' : 'transparent', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <button style={{ background: 'transparent', border: 'none', textAlign: 'left', cursor: 'pointer', flex: 1 }} onClick={() => setSelectedId(g.id)}>\n                  <div style={{ fontWeight: 600 }}>{g.name}</div>\n                  <div style={{ fontSize: 12, color: '#666' }}>{g.attributes?.length || 0} attributes</div>\n                </button>\n                <button onClick={() => {\n                  if (confirm('Delete this attribute group?')) deleteGroup(g.id);\n                }} title=\"Delete\">üóëÔ∏è</button>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ display: 'flex', height: 'calc(100vh - 80px)', border: '1px solid #eee', borderRadius: 8, overflow: 'hidden' }}>\n      <div style={{ width: 320, minWidth: 280 }}>\n        <Sidebar />\n      </div>\n      <div style={{ flex: 1 }}>\n        <Details />\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import Head from 'next/head';\nimport dynamic from 'next/dynamic';\n\nconst AttributeGroupsManager = dynamic(() => import('../../components/AttributeGroupsManager'), { ssr: false });\n\nexport default function AttributeGroupsPage() {\n  return (\n    <div style={{ padding: 24 }}>\n      <Head>\n        <title>Attribute Groups ‚Ä¢ Simple PIM</title>\n      </Head>\n      <h1 style={{ marginTop: 0 }}>Attribute Groups</h1>\n      <p style={{ color: '#444' }}>Define reusable groups of attributes (e.g., Basic, SEO) to standardize product data.</p>\n      <AttributeGroupsManager />\n    </div>\n  );\n}\n"
    },
    {
      "path": "pages/api/tests/attribute-groups.js",
      "content": "const store = require('../../../lib/attributeGroupsStore');\n\nfunction json(res, status, payload) {\n  res.statusCode = status;\n  res.setHeader('Content-Type', 'application/json');\n  res.end(JSON.stringify(payload));\n}\n\nexport default function handler(req, res) {\n  try {\n    const steps = [];\n\n    // Snapshot initial\n    const initial = store.list();\n    const initialCount = initial.length;\n    steps.push({ name: 'initial_count', ok: typeof initialCount === 'number', details: { initialCount } });\n\n    // Create\n    const created = store.create({ name: 'Test Group', attributes: [{ code: 'test', label: 'Test', type: 'text' }] });\n    const afterCreateCount = store.list().length;\n    steps.push({ name: 'create_group', ok: !!created && afterCreateCount === initialCount + 1, details: { id: created.id, afterCreateCount } });\n\n    // Update name\n    const renamed = store.update(created.id, { name: 'Renamed Group' });\n    steps.push({ name: 'rename_group', ok: !!renamed && renamed.name === 'Renamed Group' });\n\n    // Add attribute\n    const withAttr = store.update(created.id, { attributes: [...(renamed.attributes || []), { code: 'color', label: 'Color', type: 'text' }] });\n    const hasColor = (withAttr.attributes || []).some((a) => a.code === 'color');\n    steps.push({ name: 'add_attribute', ok: !!withAttr && hasColor, details: { attrCount: withAttr.attributes.length } });\n\n    // Delete\n    const removed = store.remove(created.id);\n    const finalCount = store.list().length;\n    steps.push({ name: 'delete_group', ok: removed && finalCount === initialCount, details: { finalCount } });\n\n    const ok = steps.every((s) => s.ok);\n    return json(res, ok ? 200 : 500, { ok, steps });\n  } catch (e) {\n    console.error('test attribute-groups failed', e);\n    return json(res, 500, { ok: false, error: 'Exception', message: String(e && e.message || e) });\n  }\n}\n"
    },
    {
      "path": ".commit_message",
      "content": "FEATURE: Add Attribute Groups management (CRUD) with admin UI, API routes, and a small API-based test.\n"
    }
  ]
}