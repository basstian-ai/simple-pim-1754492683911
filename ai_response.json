{
  "files": [
    {
      "path": "data/attribute-groups.json",
      "content": "[\n  {\n    \"id\": \"basic\",\n    \"name\": \"Basic\",\n    \"attributes\": [\n      { \"code\": \"name\", \"label\": \"Name\", \"type\": \"text\" },\n      { \"code\": \"description\", \"label\": \"Description\", \"type\": \"richtext\" },\n      { \"code\": \"sku\", \"label\": \"SKU\", \"type\": \"text\" }\n    ]\n  },\n  {\n    \"id\": \"pricing\",\n    \"name\": \"Pricing\",\n    \"attributes\": [\n      { \"code\": \"price\", \"label\": \"Price\", \"type\": \"number\" },\n      {\n        \"code\": \"currency\",\n        \"label\": \"Currency\",\n        \"type\": \"select\",\n        \"options\": [\"USD\", \"EUR\", \"GBP\"]\n      }\n    ]\n  },\n  {\n    \"id\": \"dimensions\",\n    \"name\": \"Dimensions\",\n    \"attributes\": [\n      { \"code\": \"weight\", \"label\": \"Weight\", \"type\": \"number\", \"unit\": \"kg\" },\n      { \"code\": \"width\", \"label\": \"Width\", \"type\": \"number\", \"unit\": \"cm\" },\n      { \"code\": \"height\", \"label\": \"Height\", \"type\": \"number\", \"unit\": \"cm\" },\n      { \"code\": \"depth\", \"label\": \"Depth\", \"type\": \"number\", \"unit\": \"cm\" }\n    ]\n  }\n]\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "export default function handler(req, res) {\n  if (req.method !== 'GET') {\n    res.setHeader('Allow', 'GET');\n    return res.status(405).json({ error: 'Method Not Allowed' });\n  }\n\n  try {\n    // load statically bundled JSON\n    const groups = require('../../data/attribute-groups.json');\n    res.status(200).json({ groups, count: groups.length });\n  } catch (err) {\n    res.status(500).json({ error: 'Failed to load attribute groups' });\n  }\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import React from 'react';\nimport fs from 'fs';\nimport path from 'path';\n\nexport default function AttributeGroupsPage({ groups }) {\n  return (\n    <div style={{ padding: '24px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1 style={{ marginTop: 0 }}>Attribute Groups</h1>\n      <p style={{ color: '#555' }}>Predefined groups to organize product attributes.</p>\n      {(!groups || groups.length === 0) && (\n        <div>No attribute groups defined.</div>\n      )}\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(320px, 1fr))', gap: '16px' }}>\n        {groups.map((g) => (\n          <div key={g.id} style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: 16 }}>\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'baseline' }}>\n              <h2 style={{ margin: 0, fontSize: 18 }}>{g.name}</h2>\n              <code style={{ color: '#6b7280' }}>{g.id}</code>\n            </div>\n            <div style={{ marginTop: 8, fontSize: 12, color: '#6b7280' }}>\n              {g.attributes?.length || 0} attributes\n            </div>\n            <ul style={{ marginTop: 12, paddingLeft: 16 }}>\n              {g.attributes?.map((a) => (\n                <li key={a.code} style={{ marginBottom: 6 }}>\n                  <strong>{a.label}</strong>\n                  <span style={{ color: '#6b7280' }}> ({a.code})</span>\n                  <span style={{ marginLeft: 6, background: '#f3f4f6', borderRadius: 4, padding: '2px 6px', fontSize: 12 }}>\n                    {a.type}\n                  </span>\n                  {a.unit ? (\n                    <span style={{ marginLeft: 6, color: '#6b7280' }}>unit: {a.unit}</span>\n                  ) : null}\n                  {Array.isArray(a.options) && a.options.length > 0 ? (\n                    <div style={{ marginTop: 2, color: '#374151', fontSize: 12 }}>\n                      options: {a.options.join(', ')}\n                    </div>\n                  ) : null}\n                </li>\n              ))}\n            </ul>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport async function getStaticProps() {\n  const filePath = path.join(process.cwd(), 'data', 'attribute-groups.json');\n  let groups = [];\n  try {\n    const raw = fs.readFileSync(filePath, 'utf8');\n    groups = JSON.parse(raw);\n  } catch (err) {\n    groups = [];\n  }\n  return {\n    props: {\n      groups,\n    },\n  };\n}\n"
    },
    {
      "path": "tests/attribute-groups.test.js",
      "content": "const assert = require('assert');\n\nconst groups = require('../data/attribute-groups.json');\n\n// basic shape tests\nassert(Array.isArray(groups), 'groups should be an array');\nassert(groups.length >= 1, 'should have at least one group');\n\nfor (const g of groups) {\n  assert(typeof g.id === 'string' && g.id.length > 0, 'group.id must be a non-empty string');\n  assert(typeof g.name === 'string' && g.name.length > 0, 'group.name must be a non-empty string');\n  assert(Array.isArray(g.attributes), 'group.attributes must be an array');\n  for (const a of g.attributes) {\n    assert(typeof a.code === 'string' && a.code.length > 0, 'attribute.code must be a non-empty string');\n    assert(typeof a.label === 'string' && a.label.length > 0, 'attribute.label must be a non-empty string');\n    assert(['text', 'richtext', 'number', 'select'].includes(a.type), 'attribute.type must be one of known types');\n    if (a.type === 'select') {\n      assert(Array.isArray(a.options) && a.options.length > 0, 'select attribute must define non-empty options');\n    }\n  }\n}\n\nconsole.log('attribute-groups tests passed (', groups.length, 'groups )');\n"
    }
  ]
}