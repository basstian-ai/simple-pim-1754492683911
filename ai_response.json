{
  "mode": "FEATURE",
  "notes": "Adds an Export CSV link to the homepage that downloads current product list (respects search query). Includes a UI test to verify presence and correct href behavior.",
  "diff": "--- a/pages/index.js\n+++ b/pages/index.js\n@@ -1,36 +1,53 @@\n import React, { useEffect, useState } from 'react';\n import ProductList from '../components/ProductList';\n \n const Home = () => {\n   const [products, setProducts] = useState([]);\n   const [query, setQuery] = useState('');\n \n   useEffect(() => {\n     let active = true;\n     const controller = new AbortController();\n \n     const fetchProducts = async () => {\n       const qs = query ? `?search=${encodeURIComponent(query)}` : '';\n       const res = await fetch(`/api/products${qs}`, { signal: controller.signal });\n       const data = await res.json();\n       if (active) setProducts(data);\n     };\n \n     const t = setTimeout(fetchProducts, 250);\n \n     return () => {\n       active = false;\n       controller.abort();\n       clearTimeout(t);\n     };\n   }, [query]);\n \n+  const exportHref = `/api/products/export${query ? `?search=${encodeURIComponent(query)}` : ''}`;\n+\n   return (\n     <div style={{ maxWidth: 900, margin: '0 auto', padding: '1rem' }}>\n-      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem' }}>\n-        <input\n-          type=\"search\"\n-          placeholder=\"Search products by name, SKU or description...\"\n-          value={query}\n-          onChange={(e) => setQuery(e.target.value)}\n-          style={{ flex: 1, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n-          aria-label=\"Search products\"\n-        />\n-        <span style={{ color: '#666', fontSize: 12 }}>\n-          {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n-        </span>\n-      </div>\n+      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem' }}>\n+        <input\n+          type=\"search\"\n+          placeholder=\"Search products by name, SKU or description...\"\n+          value={query}\n+          onChange={(e) => setQuery(e.target.value)}\n+          style={{ flex: 1, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n+          aria-label=\"Search products\"\n+        />\n+        <span style={{ color: '#666', fontSize: 12 }}>\n+          {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n+        </span>\n+        <a\n+          href={exportHref}\n+          download=\"products.csv\"\n+          style={{\n+            padding: '0.5rem 0.75rem',\n+            border: '1px solid #ddd',\n+            borderRadius: 6,\n+            textDecoration: 'none',\n+            color: '#111',\n+            background: '#f7f7f7'\n+          }}\n+          aria-label=\"Export CSV\"\n+        >\n+          Export CSV\n+        </a>\n+      </div>\n       <ProductList products={products} />\n     </div>\n   );\n };\n \n export default Home;\n",
  "files": [
    {
      "path": "tests/exportCsvLink.ui.test.js",
      "content": "/** @jest-environment jsdom */\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport Home from '../pages/index';\n\n// Mock fetch to avoid network calls during tests\nbeforeAll(() => {\n  global.fetch = jest.fn(() =>\n    Promise.resolve({ json: () => Promise.resolve([]) })\n  );\n});\n\nafterAll(() => {\n  global.fetch && (global.fetch = undefined);\n});\n\ndescribe('Export CSV link on Home page', () => {\n  it('renders an Export CSV link with base href', async () => {\n    render(<Home />);\n    const link = await screen.findByRole('link', { name: /export csv/i });\n    expect(link).toBeInTheDocument();\n    // JSDOM returns absolute URLs; check it ends with the path we expect\n    expect(link.getAttribute('href')).toMatch(/^\\/api\\/products\\/export(\\?.*)?$/);\n  });\n\n  it('includes search query in Export CSV href when searching', async () => {\n    render(<Home />);\n    const input = screen.getByRole('searchbox', { name: /search products/i });\n    fireEvent.change(input, { target: { value: 'shoes' } });\n    const link = await screen.findByRole('link', { name: /export csv/i });\n    expect(link.getAttribute('href')).toBe('/api/products/export?search=shoes');\n  });\n});\n"
    }
  ]
}