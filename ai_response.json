{
  "files": [
    {
      "path": "lib/attributeGroups.js",
      "content": "\"use strict\";\n\n// Client-side storage key\nvar STORAGE_KEY = \"attributeGroups\";\n\nfunction normalizeAttributeKey(name) {\n  var s = String(name || \"\").trim().toLowerCase();\n  // Replace non-alphanumeric with hyphens\n  s = s.replace(/[^a-z0-9]+/g, \"-\");\n  // Trim leading/trailing hyphens\n  s = s.replace(/^-+|-+$/g, \"\");\n  return s;\n}\n\nfunction uid() {\n  return (\n    \"g_\" + Date.now().toString(36) + \"_\" + Math.random().toString(36).substr(2, 5)\n  );\n}\n\nfunction addGroup(groups, name) {\n  var id = uid();\n  var n = String(name || \"\").trim();\n  return groups.concat([{ id: id, name: n || \"Untitled\", attributes: [] }]);\n}\n\nfunction removeGroup(groups, id) {\n  return groups.filter(function (g) { return g.id !== id; });\n}\n\nfunction renameGroup(groups, id, name) {\n  var n = String(name || \"\").trim();\n  return groups.map(function (g) {\n    return g.id === id ? Object.assign({}, g, { name: n }) : g;\n  });\n}\n\nfunction addAttribute(groups, groupId, attrName) {\n  var key = normalizeAttributeKey(attrName);\n  if (!key) return groups;\n  var display = String(attrName || \"\").trim() || key;\n  return groups.map(function (g) {\n    if (g.id !== groupId) return g;\n    var exists = (g.attributes || []).some(function (a) { return a.key === key; });\n    if (exists) return g;\n    return Object.assign({}, g, {\n      attributes: (g.attributes || []).concat([{ key: key, name: display }])\n    });\n  });\n}\n\nfunction removeAttribute(groups, groupId, key) {\n  return groups.map(function (g) {\n    if (g.id !== groupId) return g;\n    return Object.assign({}, g, {\n      attributes: (g.attributes || []).filter(function (a) { return a.key !== key; })\n    });\n  });\n}\n\nfunction loadGroups() {\n  if (typeof window === \"undefined\") return [];\n  try {\n    var raw = window.localStorage.getItem(STORAGE_KEY);\n    if (!raw) return [];\n    var parsed = JSON.parse(raw);\n    if (Array.isArray(parsed)) return parsed;\n    return [];\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction saveGroups(groups) {\n  if (typeof window === \"undefined\") return;\n  try {\n    window.localStorage.setItem(STORAGE_KEY, JSON.stringify(groups || []));\n  } catch (e) {\n    // ignore\n  }\n}\n\nmodule.exports = {\n  normalizeAttributeKey: normalizeAttributeKey,\n  addGroup: addGroup,\n  removeGroup: removeGroup,\n  renameGroup: renameGroup,\n  addAttribute: addAttribute,\n  removeAttribute: removeAttribute,\n  loadGroups: loadGroups,\n  saveGroups: saveGroups\n};\n"
    },
    {
      "path": "pages/admin/attribute-groups.jsx",
      "content": "import React, { useEffect, useState } from \"react\";\nconst ag = require(\"../../lib/attributeGroups\");\n\nfunction Field({ label, value, onChange, placeholder }) {\n  return (\n    <label style={{ display: \"block\", marginBottom: 8 }}>\n      <div style={{ fontSize: 12, color: \"#555\", marginBottom: 4 }}>{label}</div>\n      <input\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        style={{\n          width: \"100%\",\n          padding: \"8px 10px\",\n          border: \"1px solid #ccc\",\n          borderRadius: 6,\n          outline: \"none\"\n        }}\n      />\n    </label>\n  );\n}\n\nexport default function AttributeGroupsPage() {\n  const [groups, setGroups] = useState([]);\n  const [newGroupName, setNewGroupName] = useState(\"\");\n  const [newAttr, setNewAttr] = useState({}); // { [groupId]: value }\n\n  useEffect(() => {\n    setGroups(ag.loadGroups());\n  }, []);\n\n  useEffect(() => {\n    ag.saveGroups(groups);\n  }, [groups]);\n\n  function onAddGroup(e) {\n    e && e.preventDefault();\n    if (!newGroupName.trim()) return;\n    setGroups((gs) => ag.addGroup(gs, newGroupName));\n    setNewGroupName(\"\");\n  }\n\n  function onRenameGroup(id, name) {\n    setGroups((gs) => ag.renameGroup(gs, id, name));\n  }\n\n  function onDeleteGroup(id) {\n    if (typeof window !== \"undefined\" && !window.confirm(\"Delete this group?\")) return;\n    setGroups((gs) => ag.removeGroup(gs, id));\n  }\n\n  function onAddAttribute(groupId) {\n    const name = (newAttr[groupId] || \"\").trim();\n    if (!name) return;\n    setGroups((gs) => ag.addAttribute(gs, groupId, name));\n    setNewAttr((m) => Object.assign({}, m, { [groupId]: \"\" }));\n  }\n\n  function onDeleteAttribute(groupId, key) {\n    setGroups((gs) => ag.removeAttribute(gs, groupId, key));\n  }\n\n  return (\n    <div style={{ maxWidth: 900, margin: \"20px auto\", padding: 20 }}>\n      <h1 style={{ marginBottom: 6 }}>Attribute Groups</h1>\n      <p style={{ color: \"#666\", marginTop: 0 }}>\n        Create groups to organize your product attributes (e.g., “Basic”, “Dimensions”, “SEO”).\n        Saved locally in your browser.\n      </p>\n\n      <form onSubmit={onAddGroup} style={{ display: \"flex\", gap: 8, marginBottom: 16 }}>\n        <input\n          value={newGroupName}\n          onChange={(e) => setNewGroupName(e.target.value)}\n          placeholder=\"New group name\"\n          style={{ flex: 1, padding: \"10px 12px\", border: \"1px solid #ccc\", borderRadius: 6 }}\n        />\n        <button\n          type=\"submit\"\n          style={{ padding: \"10px 14px\", borderRadius: 6, border: \"1px solid #111\", background: \"#111\", color: \"#fff\" }}\n        >\n          Add Group\n        </button>\n      </form>\n\n      {groups.length === 0 ? (\n        <div style={{ padding: 16, border: \"1px dashed #ccc\", borderRadius: 8, color: \"#666\" }}>\n          No attribute groups yet. Create your first one above.\n        </div>\n      ) : null}\n\n      <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(auto-fit, minmax(280px, 1fr))\", gap: 16 }}>\n        {groups.map((g) => (\n          <div key={g.id} style={{ border: \"1px solid #e5e5e5\", borderRadius: 10, padding: 12 }}>\n            <div style={{ display: \"flex\", alignItems: \"center\", gap: 8, marginBottom: 10 }}>\n              <input\n                value={g.name}\n                onChange={(e) => onRenameGroup(g.id, e.target.value)}\n                style={{ flex: 1, padding: \"8px 10px\", border: \"1px solid #ddd\", borderRadius: 6 }}\n              />\n              <button\n                onClick={() => onDeleteGroup(g.id)}\n                title=\"Delete group\"\n                style={{ padding: \"8px 10px\", borderRadius: 6, border: \"1px solid #d00\", color: \"#d00\", background: \"#fff\" }}\n              >\n                Delete\n              </button>\n            </div>\n\n            <div style={{ fontSize: 12, color: \"#666\", marginBottom: 6 }}>Attributes</div>\n            {(g.attributes && g.attributes.length > 0) ? (\n              <ul style={{ listStyle: \"none\", padding: 0, margin: 0, marginBottom: 8 }}>\n                {g.attributes.map((a) => (\n                  <li key={a.key} style={{ display: \"flex\", alignItems: \"center\", gap: 8, padding: \"6px 0\" }}>\n                    <span style={{ flex: 1 }}>\n                      <strong>{a.name}</strong>\n                      <span style={{ color: \"#888\", marginLeft: 6 }}>(key: {a.key})</span>\n                    </span>\n                    <button\n                      onClick={() => onDeleteAttribute(g.id, a.key)}\n                      title=\"Remove attribute\"\n                      style={{ padding: \"6px 8px\", borderRadius: 6, border: \"1px solid #bbb\", background: \"#fff\" }}\n                    >\n                      Remove\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <div style={{ color: \"#888\", marginBottom: 8 }}>No attributes yet.</div>\n            )}\n\n            <div style={{ display: \"flex\", gap: 8 }}>\n              <input\n                value={newAttr[g.id] || \"\"}\n                onChange={(e) => setNewAttr((m) => Object.assign({}, m, { [g.id]: e.target.value }))}\n                placeholder=\"New attribute name (e.g., Color)\"\n                style={{ flex: 1, padding: \"8px 10px\", border: \"1px solid #ccc\", borderRadius: 6 }}\n              />\n              <button\n                onClick={() => onAddAttribute(g.id)}\n                style={{ padding: \"8px 10px\", borderRadius: 6, border: \"1px solid #111\", background: \"#111\", color: \"#fff\" }}\n              >\n                Add\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/attributeGroups.test.js",
      "content": "const assert = require(\"assert\");\nconst {\n  normalizeAttributeKey,\n  addGroup,\n  addAttribute\n} = require(\"../lib/attributeGroups\");\n\n// normalizeAttributeKey\nassert.strictEqual(normalizeAttributeKey(\" Color Name \"), \"color-name\");\nassert.strictEqual(normalizeAttributeKey(\"Size\"), \"size\");\nassert.strictEqual(normalizeAttributeKey(\"SEO Title!\"), \"seo-title\");\nassert.strictEqual(normalizeAttributeKey(\"  --  \"), \"\");\n\n// addGroup\nlet groups = [];\ngroups = addGroup(groups, \"Basic\");\nassert.strictEqual(groups.length, 1);\nassert.ok(groups[0].id && groups[0].name === \"Basic\");\n\n// addAttribute (dedupe by key)\nconst gid = groups[0].id;\ngroups = addAttribute(groups, gid, \"Color\");\nassert.strictEqual(groups[0].attributes.length, 1);\n// Same key should not duplicate\ngroups = addAttribute(groups, gid, \"color\");\nassert.strictEqual(groups[0].attributes.length, 1);\n\nconsole.log(\"attributeGroups tests passed\");\n"
    }
  ]
}