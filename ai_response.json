{
  "commit_message": "feat: add Copy Export URL button to CSV export link + test\n\n- Enhance ExportCsvLink to include a Copy URL button that copies the current export URL (respecting router filters: search, tags, inStock) to the clipboard. Provides user feedback (temporary \"Copied!\").\n- Add a unit test to verify the clipboard copy behavior and that the exported URL includes encoded filters.\n\nThis is a small admin/list UX enhancement to make sharing/exporting filtered CSVs easier.",
  "files": [
    {
      "path": "components/ExportCsvLink.js",
      "content": "import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\n\n// Builds an export URL for products that mirrors the filtering used in the UI.\nfunction buildExportUrl(query = {}) {\n  const params = [];\n  if (query.search) params.push(`search=${encodeURIComponent(query.search)}`);\n  // Accept either a joined string or array; keep behavior consistent with client-side usage\n  if (query.tags) {\n    // If tags is an array, join by comma; otherwise assume it's already stringified\n    const tagsValue = Array.isArray(query.tags) ? query.tags.join(',') : query.tags;\n    if (tagsValue) params.push(`tags=${encodeURIComponent(tagsValue)}`);\n  }\n  if (query.inStock === '1' || query.inStock === 'true') params.push('inStock=1');\n  const qs = params.length ? `?${params.join('&')}` : '';\n  return `/api/products/export${qs}`;\n}\n\nexport default function ExportCsvLink({ style }) {\n  const router = useRouter();\n  const [copied, setCopied] = useState(false);\n\n  const query = (router && router.query) || {};\n  const urlPath = buildExportUrl(query);\n\n  const copyToClipboard = async () => {\n    try {\n      const absolute = (typeof window !== 'undefined' && window.location && window.location.origin)\n        ? `${window.location.origin}${urlPath}`\n        : urlPath;\n\n      if (typeof navigator !== 'undefined' && navigator.clipboard && navigator.clipboard.writeText) {\n        await navigator.clipboard.writeText(absolute);\n      } else if (typeof document !== 'undefined') {\n        // Fallback copy approach\n        const ta = document.createElement('textarea');\n        ta.value = absolute;\n        ta.setAttribute('readonly', '');\n        ta.style.position = 'absolute';\n        ta.style.left = '-9999px';\n        document.body.appendChild(ta);\n        ta.select();\n        document.execCommand('copy');\n        document.body.removeChild(ta);\n      }\n\n      setCopied(true);\n      setTimeout(() => setCopied(false), 1500);\n    } catch (err) {\n      // Swallow errors: copying is a convenience feature\n      // Optionally: report to analytics or show UI error in future\n    }\n  };\n\n  return (\n    <span style={style}>\n      <a href={urlPath} download style={{ marginRight: 8 }}>\n        Export CSV\n      </a>\n      <button onClick={copyToClipboard} aria-label=\"Copy export URL\">\n        {copied ? 'Copied!' : 'Copy URL'}\n      </button>\n    </span>\n  );\n}\n"
    },
    {
      "path": "tests/exportCsvLinkCopy.test.js",
      "content": "import React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react';\nimport ExportCsvLink from '../components/ExportCsvLink';\n\n// Mock next/router to provide query params used to build the export URL\njest.mock('next/router', () => ({\n  useRouter: jest.fn(),\n}));\n\nimport { useRouter } from 'next/router';\n\nbeforeEach(() => {\n  // Provide a router with filters similar to the app\n  useRouter.mockImplementation(() => ({ pathname: '/', query: { search: 'shirt', tags: 'sale,summer', inStock: '1' } }));\n\n  // Mock clipboard API\n  Object.defineProperty(navigator, 'clipboard', {\n    value: {\n      writeText: jest.fn().mockResolvedValue(),\n    },\n    configurable: true,\n  });\n\n  // Ensure window.location.origin exists\n  Object.defineProperty(window, 'location', {\n    value: {\n      origin: 'http://localhost',\n    },\n    configurable: true,\n  });\n});\n\nafterEach(() => {\n  jest.resetAllMocks();\n});\n\ntest('copies export URL including filters to clipboard and shows feedback', async () => {\n  const { getByRole, getByText } = render(<ExportCsvLink />);\n\n  const button = getByRole('button', { name: /Copy export URL/i });\n\n  fireEvent.click(button);\n\n  await waitFor(() => expect(navigator.clipboard.writeText).toHaveBeenCalledTimes(1));\n\n  expect(navigator.clipboard.writeText).toHaveBeenCalledWith(\n    'http://localhost/api/products/export?search=shirt&tags=sale%2Csummer&inStock=1'\n  );\n\n  // The button label should update to \"Copied!\" after successful copy\n  expect(getByText('Copied!')).toBeTruthy();\n});\n"
    }
  ]
}