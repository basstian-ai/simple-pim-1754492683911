{
  "files": [
    {
      "path": "pages/api/attribute-groups.js",
      "content": "const DEFAULT_GROUPS = [\n  {\n    id: 'basic',\n    name: 'Basic',\n    attributes: [\n      { code: 'name', label: 'Name' },\n      { code: 'sku', label: 'SKU' }\n    ]\n  },\n  {\n    id: 'pricing',\n    name: 'Pricing',\n    attributes: [\n      { code: 'price', label: 'Price' },\n      { code: 'currency', label: 'Currency' }\n    ]\n  },\n  {\n    id: 'seo',\n    name: 'SEO',\n    attributes: [\n      { code: 'metaTitle', label: 'Meta Title' },\n      { code: 'metaDescription', label: 'Meta Description' }\n    ]\n  }\n];\n\nexport default function handler(req, res) {\n  if (req.method === 'GET') {\n    res.status(200).json({ groups: DEFAULT_GROUPS });\n    return;\n  }\n  res.setHeader('Allow', ['GET']);\n  res.status(405).json({ error: 'Method Not Allowed' });\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import { useEffect, useMemo, useState } from 'react';\n\nexport default function AttributeGroupsAdminPage() {\n  const [groups, setGroups] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    let cancelled = false;\n    async function load() {\n      setLoading(true);\n      setError(null);\n      try {\n        const res = await fetch('/api/attribute-groups');\n        if (!res.ok) throw new Error(`Failed to load: ${res.status}`);\n        const data = await res.json();\n        if (!cancelled) setGroups(Array.isArray(data.groups) ? data.groups : []);\n      } catch (e) {\n        if (!cancelled) setError(e.message || 'Failed to load');\n      } finally {\n        if (!cancelled) setLoading(false);\n      }\n    }\n    load();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  const filtered = useMemo(() => {\n    const q = query.trim().toLowerCase();\n    if (!q) return groups;\n    return groups\n      .map((g) => ({\n        ...g,\n        attributes: (g.attributes || []).filter(\n          (a) => a.code.toLowerCase().includes(q) || (a.label || '').toLowerCase().includes(q)\n        )\n      }))\n      .filter((g) => g.name.toLowerCase().includes(q) || (g.attributes || []).length > 0);\n  }, [groups, query]);\n\n  return (\n    <div style={{ maxWidth: 960, margin: '24px auto', padding: '0 16px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1 style={{ marginBottom: 12 }}>Attribute Groups</h1>\n      <p style={{ color: '#555', marginTop: 0 }}>Browse product attribute groups. Use search to quickly find attributes across groups.</p>\n      <div style={{ display: 'flex', gap: 8, alignItems: 'center', margin: '16px 0 24px' }}>\n        <input\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder=\"Search groups or attributes...\"\n          aria-label=\"Search attribute groups\"\n          style={{ flex: 1, padding: '8px 12px', borderRadius: 6, border: '1px solid #ddd' }}\n        />\n        {query && (\n          <button onClick={() => setQuery('')} style={{ padding: '8px 12px', borderRadius: 6, border: '1px solid #ddd', background: '#f6f6f6' }}>\n            Clear\n          </button>\n        )}\n      </div>\n\n      {loading && <div>Loading attribute groupsâ€¦</div>}\n      {error && (\n        <div style={{ color: '#b00020', marginBottom: 16 }}>Error loading attribute groups: {String(error)}</div>\n      )}\n\n      {!loading && !error && filtered.length === 0 && (\n        <div style={{ color: '#666' }}>No attribute groups match your search.</div>\n      )}\n\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(260px, 1fr))', gap: 16 }}>\n        {filtered.map((group) => (\n          <section key={group.id} style={{ border: '1px solid #eee', borderRadius: 8, padding: 12 }}>\n            <header style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>\n              <h2 style={{ fontSize: 16, margin: 0 }}>{group.name}</h2>\n              <span style={{ fontSize: 12, color: '#666' }}>{(group.attributes || []).length} attrs</span>\n            </header>\n            <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n              {(group.attributes || []).map((a) => (\n                <li key={a.code} style={{ padding: '6px 8px', borderRadius: 6, border: '1px solid #f0f0f0', marginBottom: 6 }}>\n                  <div style={{ fontSize: 13, color: '#333' }}>{a.label || a.code}</div>\n                  <div style={{ fontSize: 12, color: '#888' }}>Code: {a.code}</div>\n                </li>\n              ))}\n            </ul>\n          </section>\n        ))}\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "lib/attributeGroups.js",
      "content": "'use strict';\n\nfunction slugifyGroupName(name) {\n  return String(name || '')\n    .trim()\n    .toLowerCase()\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/(^-|-$)/g, '') || 'group';\n}\n\nfunction inferGroup(code) {\n  const c = String(code || '').toLowerCase();\n  if (/price|cost|currency/.test(c)) return 'Pricing';\n  if (/meta|seo|slug|title|description/.test(c)) return 'SEO';\n  if (/stock|inventory|qty|quantity/.test(c)) return 'Inventory';\n  return 'Basic';\n}\n\nfunction computeAttributeGroups(attributes) {\n  const acc = Object.create(null);\n  (attributes || []).forEach((attr) => {\n    if (!attr || !attr.code) return;\n    const groupName = attr.group || inferGroup(attr.code);\n    if (!acc[groupName]) acc[groupName] = [];\n    acc[groupName].push({ code: attr.code, label: attr.label || attr.code });\n  });\n  const groups = Object.keys(acc)\n    .sort((a, b) => a.localeCompare(b))\n    .map((name) => ({ id: slugifyGroupName(name), name, attributes: acc[name] }));\n  return groups;\n}\n\nmodule.exports = { computeAttributeGroups, inferGroup, slugifyGroupName };\n"
    },
    {
      "path": "__tests__/attributeGroups.test.js",
      "content": "const { computeAttributeGroups } = require('../lib/attributeGroups');\n\ndescribe('computeAttributeGroups', () => {\n  test('groups attributes by explicit group or inferred from code', () => {\n    const attrs = [\n      { code: 'name', label: 'Name' },\n      { code: 'price', label: 'Price' },\n      { code: 'metaTitle', label: 'Meta Title', group: 'SEO' },\n      { code: 'sku' }\n    ];\n\n    const groups = computeAttributeGroups(attrs);\n\n    const byName = Object.fromEntries(groups.map((g) => [g.name, g]));\n\n    expect(byName['Basic']).toBeDefined();\n    expect(byName['Pricing']).toBeDefined();\n    expect(byName['SEO']).toBeDefined();\n\n    const basicCodes = new Set(byName['Basic'].attributes.map((a) => a.code));\n    const pricingCodes = new Set(byName['Pricing'].attributes.map((a) => a.code));\n    const seoCodes = new Set(byName['SEO'].attributes.map((a) => a.code));\n\n    expect(basicCodes.has('name')).toBe(true);\n    expect(basicCodes.has('sku')).toBe(true);\n    expect(pricingCodes.has('price')).toBe(true);\n    expect(seoCodes.has('metaTitle')).toBe(true);\n  });\n});\n"
    }
  ]
}