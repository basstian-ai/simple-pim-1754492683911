{
  "files": [
    {
      "path": "data/attribute-groups.json",
      "content": "[\n  {\n    \"id\": \"basic\",\n    \"name\": \"Basic\",\n    \"attributes\": [\n      { \"code\": \"name\", \"label\": \"Name\", \"type\": \"text\", \"required\": true },\n      { \"code\": \"sku\", \"label\": \"SKU\", \"type\": \"text\", \"required\": true },\n      { \"code\": \"description\", \"label\": \"Description\", \"type\": \"textarea\" }\n    ]\n  },\n  {\n    \"id\": \"specs\",\n    \"name\": \"Specifications\",\n    \"attributes\": [\n      { \"code\": \"color\", \"label\": \"Color\", \"type\": \"select\", \"options\": [\"Red\", \"Blue\", \"Green\"] },\n      { \"code\": \"size\", \"label\": \"Size\", \"type\": \"select\", \"options\": [\"S\", \"M\", \"L\", \"XL\"] },\n      { \"code\": \"material\", \"label\": \"Material\", \"type\": \"text\" }\n    ]\n  }\n]\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "const groups = require('../../data/attribute-groups.json');\n\nexport default function handler(req, res) {\n  if (req.method === 'GET') {\n    res.status(200).json({ groups });\n    return;\n  }\n  res.setHeader('Allow', ['GET']);\n  res.status(405).json({ error: 'Method Not Allowed' });\n}\n"
    },
    {
      "path": "pages/attribute-groups.js",
      "content": "import React, { useEffect, useMemo, useState } from 'react';\n\nexport default function AttributeGroupsPage() {\n  const [groups, setGroups] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    let cancelled = false;\n    fetch('/api/attribute-groups')\n      .then((r) => {\n        if (!r.ok) throw new Error('Failed to load attribute groups');\n        return r.json();\n      })\n      .then((data) => {\n        if (!cancelled) setGroups(Array.isArray(data.groups) ? data.groups : []);\n      })\n      .catch((e) => !cancelled && setError(e.message))\n      .finally(() => !cancelled && setLoading(false));\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  const filtered = useMemo(() => {\n    if (!query.trim()) return groups;\n    const q = query.toLowerCase();\n    return groups.filter((g) => {\n      if (g.name && String(g.name).toLowerCase().includes(q)) return true;\n      if (Array.isArray(g.attributes)) {\n        return g.attributes.some(\n          (a) =>\n            (a.code && String(a.code).toLowerCase().includes(q)) ||\n            (a.label && String(a.label).toLowerCase().includes(q))\n        );\n      }\n      return false;\n    });\n  }, [groups, query]);\n\n  return (\n    <div style={{ maxWidth: 900, margin: '2rem auto', padding: '0 1rem', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica Neue, Arial, sans-serif' }}>\n      <h1 style={{ marginBottom: '0.5rem' }}>Attribute Groups</h1>\n      <p style={{ color: '#555', marginTop: 0 }}>Browse predefined attribute groups used to model your catalog.</p>\n\n      <div style={{ display: 'flex', gap: '0.5rem', alignItems: 'center', margin: '1rem 0' }}>\n        <input\n          type=\"search\"\n          placeholder=\"Filter by group or attribute name...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          style={{ flex: 1, padding: '0.5rem 0.75rem', border: '1px solid #ccc', borderRadius: 6 }}\n        />\n        {query && (\n          <button onClick={() => setQuery('')} style={{ padding: '0.5rem 0.75rem', border: '1px solid #ddd', background: '#f7f7f7', borderRadius: 6, cursor: 'pointer' }}>\n            Clear\n          </button>\n        )}\n      </div>\n\n      {loading && <div>Loading...</div>}\n      {error && (\n        <div style={{ color: '#b00020', background: '#fde7ea', padding: '0.75rem', borderRadius: 6, border: '1px solid #f5c2c7' }}>\n          {error}\n        </div>\n      )}\n\n      {!loading && !error && filtered.length === 0 && (\n        <div style={{ color: '#555' }}>No attribute groups match your filter.</div>\n      )}\n\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', gap: '1rem' }}>\n        {filtered.map((g) => (\n          <div key={g.id || g.name} style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: '1rem', background: '#fff' }}>\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'baseline', marginBottom: '0.5rem' }}>\n              <h2 style={{ margin: 0, fontSize: '1.1rem' }}>{g.name}</h2>\n              {g.id && (\n                <code style={{ fontSize: '0.75rem', color: '#6b7280', background: '#f3f4f6', padding: '0.1rem 0.3rem', borderRadius: 4 }}>id: {g.id}</code>\n              )}\n            </div>\n            <ul style={{ margin: 0, paddingLeft: '1.25rem' }}>\n              {(g.attributes || []).map((a) => (\n                <li key={a.code} style={{ margin: '0.25rem 0' }}>\n                  <strong>{a.label || a.code}</strong>\n                  <span style={{ color: '#6b7280' }}> ({a.type || 'text'})</span>\n                  {a.required ? <span style={{ color: '#b00020' }}> • required</span> : null}\n                  {Array.isArray(a.options) && a.options.length > 0 ? (\n                    <span style={{ color: '#6b7280' }}> • options: {a.options.join(', ')}</span>\n                  ) : null}\n                </li>\n              ))}\n            </ul>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/attribute-groups-data.test.js",
      "content": "const assert = require('assert');\nconst groups = require('../data/attribute-groups.json');\n\nassert.ok(Array.isArray(groups), 'groups should be an array');\nassert.ok(groups.length > 0, 'groups should not be empty');\n\nfor (const g of groups) {\n  assert.ok(g.name, 'group should have a name');\n  assert.ok(Array.isArray(g.attributes), 'group should have attributes array');\n  for (const a of g.attributes) {\n    assert.ok(a.code, 'attribute should have a code');\n  }\n}\n\nconsole.log('OK: attribute groups data shape is valid');\n"
    }
  ]
}