{
  "commit_message": "feat(api): add selectable CSV fields for products export with validation and tests",
  "unified_diff": "--- a/pages/api/products/export.js\n+++ b/pages/api/products/export.js\n@@\n-import productsHandler from '../../../lib/api/productsHandler';\n+// Custom export endpoint with selectable fields support\n+import { getAllProducts } from '../../../lib/products';\n+import filterProducts from '../../../lib/filterProducts';\n+import { stringify } from 'querystring';\n+\n+// Small CSV util without changing existing exportCsv module\n+function toCsv(rows) {\n+  if (!rows || rows.length === 0) return '';\n+  const escape = (v) => {\n+    if (v === null || v === undefined) return '';\n+    const s = String(v);\n+    if (/[\",\\n]/.test(s)) return '\"' + s.replace(/\"/g, '\"\"') + '\"';\n+    return s;\n+  };\n+  return rows.map((r) => r.map(escape).join(',')).join('\\n');\n+}\n+\n+// Detects a set of safe default columns based on first product\n+function getDefaultColumns(sample) {\n+  const base = ['sku', 'name', 'price', 'inStock'];\n+  const cols = base.filter((k) => sample && Object.prototype.hasOwnProperty.call(sample, k));\n+  // Common optional fields\n+  if (sample && Array.isArray(sample.tags)) cols.push('tags');\n+  if (sample && Object.prototype.hasOwnProperty.call(sample, 'description')) cols.push('description');\n+  return cols;\n+}\n+\n+export default async function handler(req, res) {\n+  try {\n+    const { search, tags, inStock, fields } = req.query || {};\n+\n+    const all = await getAllProducts();\n+    const filtered = filterProducts(all, {\n+      search: typeof search === 'string' ? search : undefined,\n+      tags: typeof tags === 'string' && tags.trim() ? tags.split(',').map((t) => decodeURIComponent(t)) : undefined,\n+      inStock: inStock === '1' || inStock === 'true' ? true : undefined,\n+    });\n+\n+    const sample = filtered[0] || all[0] || {};\n+    const allowed = new Set(Object.keys(sample));\n+    // Ensure some well-known keys are always considered if sample missed them\n+    ['sku', 'name', 'price', 'inStock', 'tags', 'description'].forEach((k) => allowed.add(k));\n+\n+    let columns;\n+    if (typeof fields === 'string' && fields.trim()) {\n+      columns = fields\n+        .split(',')\n+        .map((f) => f.trim())\n+        .filter(Boolean)\n+        .filter((f) => allowed.has(f));\n+      if (columns.length === 0) {\n+        // Fallback to defaults if nothing valid was requested\n+        columns = getDefaultColumns(sample);\n+      }\n+    } else {\n+      columns = getDefaultColumns(sample);\n+    }\n+\n+    const rows = [];\n+    // header\n+    rows.push(columns);\n+    for (const p of filtered) {\n+      const row = columns.map((col) => {\n+        let v = p[col];\n+        if (Array.isArray(v)) return v.join('|');\n+        if (typeof v === 'object' && v !== null) return JSON.stringify(v);\n+        return v;\n+      });\n+      rows.push(row);\n+    }\n+\n+    const csv = toCsv(rows);\n+\n+    res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n+    res.setHeader('Content-Disposition', 'attachment; filename=\"products.csv\"');\n+    res.status(200).send(csv);\n+  } catch (err) {\n+    // Graceful error response\n+    res.status(500).json({ error: 'Failed to export products', message: err && err.message ? err.message : String(err) });\n+  }\n+}\n",
  "files": [
    {
      "path": "tests/api-products-export-fields.test.js",
      "content": "const exportHandler = require('../pages/api/products/export.js');\n\n// Helper to mock Next.js API req/res\n+function createMockReqRes(query = {}) {\n+  const req = { method: 'GET', query };\n+  const res = {\n+    _status: 200,\n+    _headers: {},\n+    _data: '',\n+    status(code) {\n+      this._status = code;\n+      return this;\n+    },\n+    setHeader(k, v) {\n+      this._headers[k] = v;\n+    },\n+    send(d) {\n+      this._data = d;\n+    },\n+    json(obj) {\n+      this._data = JSON.stringify(obj);\n+    },\n+  };\n+  return { req, res };\n+}\n+\n+describe('API /api/products/export with fields parameter', () => {\n+  test('returns only requested valid fields in header and rows', async () => {\n+    const { req, res } = createMockReqRes({ fields: 'sku,name', inStock: '1' });\n+    await exportHandler.default(req, res);\n+    expect(res._status).toBe(200);\n+    const text = String(res._data);\n+    const lines = text.trim().split(/\\r?\\n/);\n+    expect(lines[0]).toBe('sku,name');\n+    // At least one row\n+    expect(lines.length).toBeGreaterThan(1);\n+    const firstRowCols = lines[1].split(',');\n+    expect(firstRowCols.length).toBe(2);\n+  });\n+\n+  test('ignores unknown fields and falls back to defaults if none valid', async () => {\n+    const { req, res } = createMockReqRes({ fields: 'doesNotExist___' });\n+    await exportHandler.default(req, res);\n+    expect(res._status).toBe(200);\n+    const header = String(res._data).split(/\\r?\\n/)[0];\n+    // Default header should contain common keys like sku and name\n+    expect(header.includes('sku')).toBe(true);\n+    expect(header.includes('name')).toBe(true);\n+  });\n+});\n"
    }
  ]
}