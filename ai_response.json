{
  "commit_message": "Feature: Add CSV export for tags via /api/tags/export and expose quick link on home page; includes unit test for API",
  "diff": "--- a/pages/index.js\n+++ b/pages/index.js\n@@\n import React, { useEffect, useState } from 'react';\n import ProductList from '../components/ProductList';\n import ExportCsvLink from '../components/ExportCsvLink';\n import StockFilterToggle from '../components/StockFilterToggle';\n \n const Home = () => {\n   const [products, setProducts] = useState([]);\n   const [query, setQuery] = useState('');\n   const [allTags, setAllTags] = useState([]);\n   const [selectedTags, setSelectedTags] = useState([]);\n   const [inStockOnly, setInStockOnly] = useState(false);\n@@\n       <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem', flexWrap: 'wrap' }}>\n         <input\n           type=\"search\"\n           placeholder=\"Search products by name, SKU or description...\"\n           value={query}\n           onChange={(e) => setQuery(e.target.value)}\n           style={{ flex: 1, minWidth: 260, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n           aria-label=\"Search products\"\n         />\n         <StockFilterToggle checked={inStockOnly} onChange={setInStockOnly} />\n         <span style={{ color: '#666', fontSize: 12 }}>\n           {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n         </span>\n-        <ExportCsvLink style={{ fontSize: 12 }} />\n+        <ExportCsvLink style={{ fontSize: 12 }} />\n+        <a\n+          href=\"/api/tags/export\"\n+          style={{ fontSize: 12, color: '#0b64d8', textDecoration: 'none', border: '1px solid #ddd', padding: '0.25rem 0.5rem', borderRadius: 6, background: '#fafafa' }}\n+          title=\"Download all tags as CSV\"\n+        >\n+          Export tags CSV\n+        </a>\n       </div>\n \n       {allTags.length > 0 && (\n         <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem', marginBottom: '1rem' }}>\n           {allTags.map((tag) => {\n             const active = selectedTags.includes(tag);\n             return (\n               <button\n                 key={tag}\n                 onClick={() => toggleTag(tag)}\n                 aria-pressed={active}\n                 style={{\n                   padding: '0.25rem 0.5rem',\n                   borderRadius: 999,\n                   border: '1px solid ' + (active ? '#0b64d8' : '#ddd'),\n                   background: active ? '#e7f1ff' : 'white',\n                   color: active ? '#0b64d8' : '#333',\n                   cursor: 'pointer',\n                   fontSize: 12,\n                 }}\n               >\n                 {tag}\n               </button>\n             );\n           })}\n           {selectedTags.length > 0 && (\n             <button\n               onClick={() => setSelectedTags([])}\n               style={{\n                 marginLeft: 'auto',\n                 padding: '0.25rem 0.5rem',\n                 borderRadius: 6,\n                 border: '1px solid #ddd',\n                 background: '#fafafa',\n                 cursor: 'pointer',\n                 fontSize: 12,\n               }}\n               aria-label=\"Clear selected tags\"\n             >\n               Clear tags\n             </button>\n           )}\n         </div>\n       )}\n \n       <ProductList products={products} />\n     </div>\n   );\n };\n \n export default Home;\n",
  "files": [
    {
      "path": "pages/api/tags/export.js",
      "content": "export default function handler(req, res) {\n  try {\n    // Load products data directly; API is read-only export\n    const products = require('../../../data/products.json');\n\n    const allTags = Array.from(\n      new Set(\n        [].concat(\n          ...products.map((p) =>\n            Array.isArray(p?.tags)\n              ? p.tags\n                  .filter((t) => typeof t === 'string')\n                  .map((t) => t.trim())\n                  .filter(Boolean)\n              : []\n          )\n        )\n      )\n    ).sort((a, b) => a.localeCompare(b));\n\n    const csvEscape = (value) => {\n      const s = String(value);\n      if (/[\",\\n]/.test(s)) {\n        return '\"' + s.replace(/\"/g, '\"\"') + '\"';\n      }\n      return s;\n    };\n\n    const header = 'tag';\n    const rows = allTags.map(csvEscape).join('\\n');\n    const csv = header + '\\n' + rows + (rows ? '\\n' : '');\n\n    res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n    res.setHeader('Content-Disposition', 'attachment; filename=\"tags.csv\"');\n    return res.status(200).send(csv);\n  } catch (err) {\n    console.error('Failed to export tags CSV', err);\n    return res.status(500).json({ error: 'Failed to export tags' });\n  }\n}\n"
    },
    {
      "path": "tests/api-tags-export.test.js",
      "content": "const path = require('path');\n\nfunction createMockRes() {\n  let statusCode = 200;\n  const headers = {};\n  let body = null;\n  const res = {\n    setHeader: (k, v) => {\n      headers[k] = v;\n    },\n    status: (code) => {\n      statusCode = code;\n      return res;\n    },\n    send: (b) => {\n      body = b;\n      return res;\n    },\n    end: (b) => {\n      body = b;\n      return res;\n    },\n    json: (obj) => {\n      body = JSON.stringify(obj);\n      return res;\n    },\n    _getData: () => ({ statusCode, headers, body }),\n  };\n  return res;\n}\n\ndescribe('API: GET /api/tags/export', () => {\n  test('returns CSV with tag header and includes all tags from products', async () => {\n    const handler = require(path.join('..', 'pages', 'api', 'tags', 'export.js')).default;\n\n    const products = require('../data/products.json');\n    const expectedTags = Array.from(\n      new Set(\n        [].concat(\n          ...products.map((p) =>\n            Array.isArray(p?.tags)\n              ? p.tags\n                  .filter((t) => typeof t === 'string')\n                  .map((t) => t.trim())\n                  .filter(Boolean)\n              : []\n          )\n        )\n      )\n    ).sort((a, b) => a.localeCompare(b));\n\n    const req = { method: 'GET', query: {} };\n    const res = createMockRes();\n\n    await handler(req, res);\n    const { statusCode, headers, body } = res._getData();\n\n    expect(statusCode).toBe(200);\n    expect(headers['Content-Type'] || headers['content-type']).toMatch(/text\\/csv/);\n    expect(typeof body).toBe('string');\n    expect(body.startsWith('tag\\n')).toBe(true);\n\n    // Ensure each expected tag appears somewhere in the CSV output\n    expectedTags.forEach((tag) => {\n      expect(body).toContain(tag);\n    });\n\n    // Lines should be header + number of tags (or just header if none)\n    const lines = body.split('\\n').filter((l) => l.length > 0);\n    expect(lines.length).toBe(1 + expectedTags.length);\n  });\n});\n"
    }
  ]
}