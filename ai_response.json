{
  "files": [
    {
      "path": "pages/api/attribute-groups/index.js",
      "content": "/*\n  Attribute Groups API\n  - GET /api/attribute-groups -> { items: [...] }\n  - POST /api/attribute-groups { name, code } -> 201 created group\n*/\n\nlet groups = [\n  { id: 'grp-basic', code: 'basic', name: 'Basic' },\n  { id: 'grp-seo', code: 'seo', name: 'SEO' },\n];\n\nfunction isNonEmptyString(v) {\n  return typeof v === 'string' && v.trim().length > 0;\n}\n\nfunction normalizeCode(code) {\n  return String(code)\n    .trim()\n    .toLowerCase()\n    .replace(/[^a-z0-9-_]+/g, '-')\n    .replace(/--+/g, '-')\n    .replace(/^-+|-+$/g, '');\n}\n\nexport default function handler(req, res) {\n  const method = req.method || 'GET';\n  if (method === 'GET') {\n    res.status(200).json({ items: groups });\n    return;\n  }\n  if (method === 'POST') {\n    const body = req.body || {};\n    const name = isNonEmptyString(body.name) ? body.name.trim() : '';\n    const rawCode = isNonEmptyString(body.code) ? body.code : name;\n    const code = normalizeCode(rawCode);\n\n    if (!isNonEmptyString(name) || !isNonEmptyString(code)) {\n      res.status(400).json({ error: 'Invalid name or code.' });\n      return;\n    }\n\n    const exists = groups.some((g) => g.code === code);\n    if (exists) {\n      res.status(409).json({ error: `Attribute group with code \"${code}\" already exists.` });\n      return;\n    }\n\n    const newGroup = {\n      id: `grp-${Date.now().toString(36)}-${Math.random().toString(36).slice(2, 6)}`,\n      code,\n      name,\n    };\n    groups = [...groups, newGroup];\n    res.status(201).json(newGroup);\n    return;\n  }\n\n  res.setHeader('Allow', 'GET, POST');\n  res.status(405).json({ error: 'Method Not Allowed' });\n}\n"
    },
    {
      "path": "pages/attribute-groups.js",
      "content": "import { useEffect, useState } from 'react';\n\nexport default function AttributeGroupsPage() {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [form, setForm] = useState({ name: '', code: '' });\n  const [posting, setPosting] = useState(false);\n\n  useEffect(() => {\n    let mounted = true;\n    async function load() {\n      try {\n        setLoading(true);\n        const res = await fetch('/api/attribute-groups');\n        const data = await res.json();\n        if (!res.ok) throw new Error(data?.error || 'Failed to load');\n        if (mounted) setItems(data.items || []);\n      } catch (e) {\n        if (mounted) setError(e.message || 'Failed to load');\n      } finally {\n        if (mounted) setLoading(false);\n      }\n    }\n    load();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    setError('');\n    setPosting(true);\n    try {\n      const payload = {\n        name: form.name,\n        code: form.code,\n      };\n      const res = await fetch('/api/attribute-groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Failed to create');\n      setItems((prev) => [...prev, data]);\n      setForm({ name: '', code: '' });\n    } catch (e) {\n      setError(e.message || 'Failed to create');\n    } finally {\n      setPosting(false);\n    }\n  }\n\n  return (\n    <div style={{ maxWidth: 720, margin: '32px auto', padding: 16, fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1 style={{ marginTop: 0 }}>Attribute Groups</h1>\n      <p style={{ color: '#555' }}>Create and manage attribute groups to organize product attributes (e.g., Basic, SEO, Pricing).</p>\n\n      <section style={{ margin: '16px 0', padding: 12, border: '1px solid #e5e7eb', borderRadius: 8 }}>\n        <h2 style={{ marginTop: 0, fontSize: 18 }}>Create group</h2>\n        <form onSubmit={onSubmit}>\n          <div style={{ display: 'flex', gap: 12, flexWrap: 'wrap' }}>\n            <label style={{ flex: '1 1 240px' }}>\n              <div style={{ fontSize: 12, color: '#555', marginBottom: 4 }}>Name</div>\n              <input\n                type=\"text\"\n                value={form.name}\n                onChange={(e) => setForm((f) => ({ ...f, name: e.target.value }))}\n                placeholder=\"e.g., Basic\"\n                required\n                style={{ width: '100%', padding: '8px 10px', border: '1px solid #cbd5e1', borderRadius: 6 }}\n              />\n            </label>\n            <label style={{ flex: '1 1 240px' }}>\n              <div style={{ fontSize: 12, color: '#555', marginBottom: 4 }}>Code (optional)</div>\n              <input\n                type=\"text\"\n                value={form.code}\n                onChange={(e) => setForm((f) => ({ ...f, code: e.target.value }))}\n                placeholder=\"auto-generated from name if left blank\"\n                style={{ width: '100%', padding: '8px 10px', border: '1px solid #cbd5e1', borderRadius: 6 }}\n              />\n            </label>\n            <div style={{ alignSelf: 'flex-end' }}>\n              <button\n                type=\"submit\"\n                disabled={posting || !form.name.trim()}\n                style={{ padding: '10px 14px', background: '#111827', color: 'white', border: 0, borderRadius: 6, cursor: posting ? 'not-allowed' : 'pointer' }}\n              >\n                {posting ? 'Creating…' : 'Create'}\n              </button>\n            </div>\n          </div>\n        </form>\n        {error ? (\n          <div style={{ marginTop: 8, color: '#b91c1c' }}>{error}</div>\n        ) : null}\n      </section>\n\n      <section style={{ marginTop: 24 }}>\n        <h2 style={{ marginTop: 0, fontSize: 18 }}>Groups</h2>\n        {loading ? (\n          <div>Loading…</div>\n        ) : items.length === 0 ? (\n          <div>No attribute groups yet.</div>\n        ) : (\n          <div style={{ border: '1px solid #e5e7eb', borderRadius: 8, overflow: 'hidden' }}>\n            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', background: '#f9fafb', padding: '8px 12px', fontWeight: 600, fontSize: 14 }}>\n              <div>Name</div>\n              <div>Code</div>\n              <div>ID</div>\n            </div>\n            {items.map((g) => (\n              <div key={g.id} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', padding: '10px 12px', borderTop: '1px solid #f3f4f6' }}>\n                <div>{g.name}</div>\n                <div style={{ color: '#374151', fontFamily: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace' }}>{g.code}</div>\n                <div style={{ color: '#6b7280', overflow: 'hidden', textOverflow: 'ellipsis' }}>{g.id}</div>\n              </div>\n            ))}\n          </div>\n        )}\n      </section>\n    </div>\n  );\n}\n"
    },
    {
      "path": "scripts/test-attribute-groups.js",
      "content": "/*\n Minimal test for the Attribute Groups API without any test runner.\n Usage: node scripts/test-attribute-groups.js\n Exits with non-zero code on failure.\n*/\n\nconst path = require('path');\n\nfunction createMockRes() {\n  const headers = {};\n  return {\n    _status: 200,\n    _json: null,\n    setHeader(key, value) {\n      headers[key.toLowerCase()] = value;\n    },\n    status(code) {\n      this._status = code;\n      return this;\n    },\n    json(obj) {\n      this._json = obj;\n      return this;\n    },\n  };\n}\n\nasync function call(handler, method, body) {\n  const req = { method, body };\n  const res = createMockRes();\n  await handler(req, res);\n  return { status: res._status, body: res._json };\n}\n\nasync function main() {\n  const handler = require(path.resolve(__dirname, '../pages/api/attribute-groups'));\n\n  // Initial list\n  let r = await call(handler.default || handler, 'GET');\n  if (r.status !== 200 || !Array.isArray(r.body.items)) {\n    throw new Error('GET should return { items: [...] } with 200');\n  }\n  const initialCount = r.body.items.length;\n\n  // Create new group\n  r = await call(handler.default || handler, 'POST', { name: 'Size', code: 'size' });\n  if (r.status !== 201 || !r.body || r.body.code !== 'size') {\n    throw new Error('POST should create and return the group with 201');\n  }\n\n  // List increased by 1\n  r = await call(handler.default || handler, 'GET');\n  if (r.body.items.length !== initialCount + 1) {\n    throw new Error('GET should include the newly created group');\n  }\n\n  // Duplicate code should 409\n  r = await call(handler.default || handler, 'POST', { name: 'Duplicate Size', code: 'size' });\n  if (r.status !== 409) {\n    throw new Error('POST with duplicate code should return 409');\n  }\n\n  console.log('Attribute Groups API test: OK');\n}\n\nmain().catch((err) => {\n  console.error('Attribute Groups API test: FAILED');\n  console.error(err && err.stack ? err.stack : err);\n  process.exit(1);\n});\n"
    }
  ]
}