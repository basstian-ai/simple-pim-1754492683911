{
  "files": [
    {
      "path": "pages/api/attribute-groups/grouped.js",
      "content": "import fs from 'fs';\nimport path from 'path';\n\nfunction safeSlugify(input) {\n  if (!input) return '';\n  return String(input)\n    .toLowerCase()\n    .trim()\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/(^-|-$)/g, '');\n}\n\nfunction loadGroupsFromDisk() {\n  const file = path.join(process.cwd(), 'data', 'attribute-groups.json');\n  try {\n    const buf = fs.readFileSync(file, 'utf8');\n    return JSON.parse(buf);\n  } catch (_) {\n    try {\n      // Fallback to require when running in different envs (e.g., Jest without fs mocks)\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      return require('../../../data/attribute-groups.json');\n    } catch (e) {\n      throw new Error('Failed to load attribute groups data');\n    }\n  }\n}\n\nfunction flattenGroup(group) {\n  const id = group.id || group.code || safeSlugify(group.name);\n  const name = group.name || id || 'Group';\n  const attributes = Array.isArray(group.attributes) ? group.attributes : [];\n  const flat = attributes.map((attr, idx) => ({\n    // Preserve common attribute fields\n    ...attr,\n    code: attr.code || attr.id || `attr_${idx}`,\n    name: attr.name || attr.label || attr.code || `Attribute ${idx + 1}`,\n    groupId: id,\n    groupName: name,\n  }));\n  return { id, name, attributes: flat, count: flat.length };\n}\n\nexport default function handler(req, res) {\n  try {\n    if (req.method !== 'GET') {\n      res.setHeader('Allow', 'GET');\n      return res.status(405).json({ error: 'Method Not Allowed' });\n    }\n\n    const groupsSrc = loadGroupsFromDisk();\n    const groupsArray = Array.isArray(groupsSrc) ? groupsSrc : (Array.isArray(groupsSrc.groups) ? groupsSrc.groups : []);\n\n    const grouped = groupsArray.map(flattenGroup);\n    const total = grouped.reduce((sum, g) => sum + (g.count || 0), 0);\n\n    res.setHeader('Content-Type', 'application/json');\n    return res.status(200).json({ count: total, groups: grouped });\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error('Error in /api/attribute-groups/grouped:', err);\n    return res.status(500).json({ error: 'Failed to build grouped attributes' });\n  }\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups-grouped.js",
      "content": "import React from 'react';\n\nexport default function AdminAttributeGroupsGroupedPage() {\n  const [state, setState] = React.useState({ loading: true, error: null, data: null });\n  const [open, setOpen] = React.useState({});\n\n  React.useEffect(() => {\n    let cancelled = false;\n    async function load() {\n      setState({ loading: true, error: null, data: null });\n      try {\n        const res = await fetch('/api/attribute-groups/grouped');\n        if (!res.ok) throw new Error(`Failed to load: ${res.status}`);\n        const json = await res.json();\n        if (!cancelled) setState({ loading: false, error: null, data: json });\n      } catch (err) {\n        if (!cancelled) setState({ loading: false, error: err.message || 'Failed to load', data: null });\n      }\n    }\n    load();\n    return () => { cancelled = true; };\n  }, []);\n\n  function toggle(id) {\n    setOpen((prev) => ({ ...prev, [id]: !prev[id] }));\n  }\n\n  const groups = state.data?.groups || [];\n  const total = state.data?.count || 0;\n\n  return (\n    <div style={container}>\n      <div style={headerRow}>\n        <h1 style={{ margin: 0 }}>Attribute Groups (Grouped)</h1>\n        <div style={{ display: 'flex', gap: 8 }}>\n          <a href=\"/admin/attribute-groups-flat\" style={btn}>Flat view</a>\n          <a href=\"/api/attribute-groups/flat/export\" style={btnPrimary}>Export All CSV</a>\n        </div>\n      </div>\n\n      {state.loading && <p>Loading…</p>}\n      {state.error && <p style={{ color: '#b91c1c' }}>Error: {state.error}</p>}\n\n      {state.data && (\n        <div>\n          <p style={{ color: '#374151' }}>Total attributes: {total}</p>\n          <ul style={groupList}>\n            {groups.map((g) => (\n              <li key={g.id} style={groupItem}>\n                <div style={groupHeader}>\n                  <button onClick={() => toggle(g.id)} style={toggleBtn} aria-expanded={!!open[g.id]}>\n                    {open[g.id] ? '▾' : '▸'}\n                  </button>\n                  <strong style={{ fontSize: 16 }}>{g.name}</strong>\n                  <code style={codeBadge}>{g.id}</code>\n                  <span style={countPill}>{g.count}</span>\n                </div>\n                {open[g.id] && (\n                  <ul style={attrList}>\n                    {(g.attributes || []).map((a) => (\n                      <li key={`${g.id}-${a.code}`} style={attrItem}>\n                        <div style={{ display: 'flex', alignItems: 'center', gap: 8, flexWrap: 'wrap' }}>\n                          <strong>{a.name || a.code}</strong>\n                          <code style={smallCode}>{a.code}</code>\n                          {a.type ? <span style={typePill}>{a.type}</span> : null}\n                          {a.required === true ? <span style={requiredPill}>required</span> : <span style={optionalPill}>optional</span>}\n                        </div>\n                        {Array.isArray(a.options) && a.options.length > 0 ? (\n                          <div style={{ marginTop: 6, color: '#374151' }}>Options: {a.options.join(', ')}</div>\n                        ) : null}\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst container = { padding: 20, maxWidth: 960, margin: '0 auto' };\nconst headerRow = { display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 12 };\nconst btn = { textDecoration: 'none', background: '#e5e7eb', color: '#111827', padding: '8px 12px', borderRadius: 6 };\nconst btnPrimary = { textDecoration: 'none', background: '#111827', color: '#fff', padding: '8px 12px', borderRadius: 6 };\nconst groupList = { listStyle: 'none', padding: 0, margin: 0, display: 'flex', flexDirection: 'column', gap: 12 };\nconst groupItem = { border: '1px solid #e5e7eb', borderRadius: 8, padding: 12, background: '#fff' };\nconst groupHeader = { display: 'flex', alignItems: 'center', gap: 8 };\nconst toggleBtn = { border: '1px solid #e5e7eb', background: '#f9fafb', borderRadius: 4, padding: '2px 6px', cursor: 'pointer' };\nconst codeBadge = { background: '#f1f5f9', color: '#0f172a', padding: '2px 6px', borderRadius: 4, fontFamily: 'monospace', fontSize: 12 };\nconst countPill = { marginLeft: 'auto', background: '#eef2ff', color: '#3730a3', padding: '2px 8px', borderRadius: 999, fontSize: 12 };\nconst attrList = { listStyle: 'none', padding: 0, margin: '8px 0 0', display: 'flex', flexDirection: 'column', gap: 8 };\nconst attrItem = { borderTop: '1px solid #f3f4f6', paddingTop: 8 };\nconst smallCode = { background: '#ecfeff', color: '#155e75', padding: '2px 6px', borderRadius: 4, fontFamily: 'monospace', fontSize: 12 };\nconst typePill = { background: '#e0f2fe', color: '#075985', padding: '2px 6px', borderRadius: 999, fontSize: 12 };\nconst requiredPill = { background: '#ecfdf5', color: '#065f46', padding: '2px 6px', borderRadius: 999, fontSize: 12 };\nconst optionalPill = { background: '#f3f4f6', color: '#374151', padding: '2px 6px', borderRadius: 999, fontSize: 12 };\n"
    },
    {
      "path": "tests/api-attribute-groups-grouped.test.js",
      "content": "const path = require('path');\n\ndescribe('/api/attribute-groups/grouped', () => {\n  function createMockRes() {\n    const res = {\n      statusCode: 200,\n      headers: {},\n      body: undefined,\n      setHeader(name, value) { this.headers[name] = value; },\n      status(code) { this.statusCode = code; return this; },\n      json(payload) { this.body = payload; return this; },\n    };\n    return res;\n  }\n\n  it('returns groups with aggregated counts and total', async () => {\n    const mod = require(path.join('..', 'pages', 'api', 'attribute-groups', 'grouped.js'));\n    const handler = mod.default || mod;\n\n    const req = { method: 'GET', query: {} };\n    const res = createMockRes();\n\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toBeDefined();\n    expect(Array.isArray(res.body.groups)).toBe(true);\n    expect(res.body.groups.length).toBeGreaterThan(0);\n    expect(typeof res.body.count).toBe('number');\n\n    const sum = res.body.groups.reduce((acc, g) => acc + (Array.isArray(g.attributes) ? g.attributes.length : 0), 0);\n    expect(sum).toBe(res.body.count);\n\n    const first = res.body.groups[0];\n    expect(first).toHaveProperty('id');\n    expect(first).toHaveProperty('name');\n    expect(Array.isArray(first.attributes)).toBe(true);\n    if (first.attributes.length > 0) {\n      const a = first.attributes[0];\n      expect(a).toHaveProperty('groupId', first.id);\n      expect(a).toHaveProperty('groupName', first.name);\n    }\n  });\n});\n"
    },
    {
      "path": "README.md",
      "content": "# Simple PIM (Next.js)\n\nThis is a lightweight Product Information Management (PIM) demo built with Next.js and deployed on Vercel. It includes sample data, APIs for products, tags, attributes, attribute groups, and a minimal admin UI.\n\n## Quick start\n\n- Install dependencies: `npm install`\n- Dev server: `npm run dev`\n- Run tests: `npm test`\n\n## Notable features\n\n- Product search, tag filtering, and CSV export on the storefront (home page)\n- Admin dashboard with product stats and tools\n- Attributes and Attribute Groups management and exports\n- Flat Attribute Groups browser with CSV export at `/admin/attribute-groups-flat`\n- Grouped Attribute Groups browser with per-group counts at `/admin/attribute-groups-grouped`\n- Tag stats and bulk tag tools\n- Variant generation helpers\n- Per-product flat attributes viewer at `/admin/product/[sku]/attributes` (uses `/api/products/[sku]/attributes/flat`)\n\n## New: Admin Products filters and CSV export\n\nThe Admin Products page now mirrors the storefront filtering experience:\n\n- Search by name, SKU, or description\n- Filter by tags and in-stock only\n- CSV export link that always reflects the current filters\n- All filters are synced to the URL for easy sharing and reproducible exports\n\nYou can find it at `/admin/products`.\n\n## API\n\nExplore the API routes under `/pages/api/*`. Common ones include:\n\n- `/api/products`, `/api/products/[sku]`, `/api/products/search`, `/api/products/export`\n- `/api/products/[sku]/attributes/flat` (flatten a product's Attribute Groups for easy export/inspection)\n- `/api/tags`, `/api/tags/stats`, `/api/tags/export`\n- `/api/attributes`, `/api/attributes/suggest`\n- `/api/attribute-groups`, `/api/attribute-groups/flat`, `/api/attribute-groups/export`\n- New: `/api/attribute-groups/grouped` returns attribute groups with flattened attributes and per-group counts\n\n## Testing\n\nThis project uses Jest and Testing Library. When adding features, ensure you:\n\n- Cover new behavior with tests\n- Keep the main branch green (tests and build passing)\n\nRun tests with `npm test`.\n"
    }
  ]
}