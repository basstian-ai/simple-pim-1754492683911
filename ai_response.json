{
  "commit_message": "Feature: Add product stats API and UI summary with tests",
  "diff": "--- a/pages/index.js\n+++ b/pages/index.js\n@@ -1,12 +1,14 @@\n import React, { useEffect, useState } from 'react';\n import ProductList from '../components/ProductList';\n import ExportCsvLink from '../components/ExportCsvLink';\n \n const Home = () => {\n   const [products, setProducts] = useState([]);\n   const [query, setQuery] = useState('');\n   const [allTags, setAllTags] = useState([]);\n   const [selectedTags, setSelectedTags] = useState([]);\n+  const [stats, setStats] = useState(null);\n \n   useEffect(() => {\n     let cancelled = false;\n     const loadTags = async () => {\n       try {\n         const res = await fetch('/api/tags');\n         const data = await res.json();\n         if (!cancelled) setAllTags(Array.isArray(data) ? data : []);\n       } catch (e) {\n         if (!cancelled) setAllTags([]);\n       }\n     };\n     loadTags();\n     return () => {\n       cancelled = true;\n     };\n   }, []);\n+\n+  useEffect(() => {\n+    let cancelled = false;\n+    const loadStats = async () => {\n+      try {\n+        const res = await fetch('/api/products/stats');\n+        const data = await res.json();\n+        if (!cancelled && data && typeof data.totalProducts === 'number') {\n+          setStats(data);\n+        }\n+      } catch (e) {\n+        // ignore stats load errors\n+      }\n+    };\n+    loadStats();\n+    return () => {\n+      cancelled = true;\n+    };\n+  }, []);\n \n   useEffect(() => {\n     let active = true;\n     const controller = new AbortController();\n \n     const fetchProducts = async () => {\n       const params = [];\n       if (query) params.push(`search=${encodeURIComponent(query)}`);\n       if (selectedTags.length > 0) params.push(`tags=${selectedTags.map(encodeURIComponent).join(',')}`);\n       const qs = params.length ? `?${params.join('&')}` : '';\n       const res = await fetch(`/api/products${qs}`, { signal: controller.signal });\n       const data = await res.json();\n       if (active) setProducts(data);\n     };\n@@ -72,6 +74,16 @@ const Home = () => {\n         </div>\n       )}\n \n+      {stats && (\n+        <div\n+          aria-label=\"Inventory summary\"\n+          style={{\n+            marginBottom: '0.75rem',\n+            color: '#555',\n+            fontSize: 12,\n+          }}\n+        >\n+          Inventory: {stats.inStock}/{stats.totalProducts} in stock\n+        </div>\n+      )}\n       <ProductList products={products} />\n     </div>\n   );\n };\n \n export default Home;\n",
  "files": [
    {
      "path": "lib/productStats.js",
      "content": "const isInStock = require('./isInStock');\n\nfunction computeProductStats(products) {\n  const list = Array.isArray(products) ? products : [];\n  const totalProducts = list.length;\n  let inStock = 0;\n  const tagCounts = new Map();\n\n  for (const p of list) {\n    try {\n      if (isInStock(p)) inStock += 1;\n    } catch (_) {\n      // if isInStock throws for any reason, treat as not in stock\n    }\n    const tags = Array.isArray(p.tags) ? p.tags : [];\n    for (const t of tags) {\n      if (t == null || t === '') continue;\n      const key = String(t);\n      tagCounts.set(key, (tagCounts.get(key) || 0) + 1);\n    }\n  }\n\n  const tags = Array.from(tagCounts.entries())\n    .sort((a, b) => {\n      if (b[1] !== a[1]) return b[1] - a[1];\n      return a[0].localeCompare(b[0]);\n    })\n    .map(([tag, count]) => ({ tag, count }));\n\n  return { totalProducts, inStock, tags };\n}\n\nmodule.exports = { computeProductStats };\n"
    },
    {
      "path": "pages/api/products/stats.js",
      "content": "import productsData from '../../../data/products.json';\nimport { computeProductStats } from '../../../lib/productStats';\n\nexport default function handler(req, res) {\n  if (req.method !== 'GET') {\n    res.setHeader('Allow', 'GET');\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n  try {\n    const stats = computeProductStats(productsData || []);\n    return res.status(200).json(stats);\n  } catch (e) {\n    return res.status(500).json({ error: 'Failed to compute stats' });\n  }\n}\n"
    },
    {
      "path": "tests/productStats.test.js",
      "content": "const { computeProductStats } = require('../lib/productStats');\nconst products = require('../data/products.json');\n\nfunction countTotalTagAssignments(list) {\n  return (Array.isArray(list) ? list : []).reduce(\n    (sum, p) => sum + (Array.isArray(p.tags) ? p.tags.length : 0),\n    0\n  );\n}\n\ndescribe('computeProductStats', () => {\n  test('returns correct shape and counts', () => {\n    const stats = computeProductStats(products);\n\n    expect(stats).toBeTruthy();\n    expect(typeof stats.totalProducts).toBe('number');\n    expect(typeof stats.inStock).toBe('number');\n    expect(Array.isArray(stats.tags)).toBe(true);\n\n    expect(stats.totalProducts).toBe(Array.isArray(products) ? products.length : 0);\n    expect(stats.inStock).toBeGreaterThanOrEqual(0);\n    expect(stats.inStock).toBeLessThanOrEqual(stats.totalProducts);\n\n    // Sum of tag counts equals total tag assignments across products\n    const totalTagAssignments = countTotalTagAssignments(products);\n    const sumFromStats = stats.tags.reduce((s, t) => s + (t.count || 0), 0);\n    expect(sumFromStats).toBe(totalTagAssignments);\n\n    // tags are sorted by count desc then tag asc\n    for (let i = 1; i < stats.tags.length; i++) {\n      const prev = stats.tags[i - 1];\n      const cur = stats.tags[i];\n      expect(prev.count).toBeGreaterThanOrEqual(cur.count);\n      if (prev.count === cur.count) {\n        expect(prev.tag.localeCompare(cur.tag) <= 0).toBe(true);\n      }\n    }\n  });\n});\n"
    },
    {
      "path": "tests/api-products-stats.test.js",
      "content": "const handler = require('../pages/api/products/stats').default || require('../pages/api/products/stats');\nconst products = require('../data/products.json');\n\nfunction mockRes() {\n  const res = {};\n  res.statusCode = 0;\n  res.headers = {};\n  res.setHeader = (k, v) => { res.headers[k] = v; };\n  res.status = (code) => { res.statusCode = code; return res; };\n  let jsonBody = undefined;\n  res.json = (data) => { jsonBody = data; return res; };\n  res._getJSON = () => jsonBody;\n  return res;\n}\n\ndescribe('/api/products/stats', () => {\n  test('GET returns stats with totals matching products dataset', async () => {\n    const req = { method: 'GET' };\n    const res = mockRes();\n\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(200);\n    const body = res._getJSON();\n    expect(body).toBeTruthy();\n    expect(body.totalProducts).toBe(Array.isArray(products) ? products.length : 0);\n    expect(typeof body.inStock).toBe('number');\n    expect(Array.isArray(body.tags)).toBe(true);\n  });\n\n  test('method not allowed on non-GET', async () => {\n    const req = { method: 'POST' };\n    const res = mockRes();\n\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(405);\n    const body = res._getJSON();\n    expect(body && body.error).toBeDefined();\n  });\n});\n"
    }
  ]
}