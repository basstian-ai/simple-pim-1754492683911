{
  "files": [
    {
      "path": "lib/memoryStore.js",
      "content": "let nextId = 2;\n\nconst attributeGroups = [\n  {\n    id: 'grp_1',\n    name: 'Default Attributes',\n    attributes: [\n      // Example attribute placeholder; your app can extend this.\n      // { code: 'title', label: 'Title', type: 'text' }\n    ],\n  },\n];\n\nexport function getGroups() {\n  // Return a shallow copy to avoid accidental external mutation\n  return attributeGroups.map((g) => ({ ...g, attributes: [...g.attributes] }));\n}\n\nexport function getGroup(id) {\n  const group = attributeGroups.find((g) => g.id === id);\n  if (!group) return null;\n  return { ...group, attributes: [...group.attributes] };\n}\n\nexport function createGroup({ name }) {\n  const id = `grp_${nextId++}`;\n  const group = { id, name: String(name || '').trim(), attributes: [] };\n  attributeGroups.push(group);\n  return { ...group, attributes: [...group.attributes] };\n}\n\nexport function updateGroup(id, patch = {}) {\n  const idx = attributeGroups.findIndex((g) => g.id === id);\n  if (idx === -1) return null;\n  const current = attributeGroups[idx];\n  const updated = {\n    ...current,\n    ...(patch.name !== undefined ? { name: String(patch.name).trim() } : {}),\n    ...(Array.isArray(patch.attributes) ? { attributes: patch.attributes } : {}),\n  };\n  attributeGroups[idx] = updated;\n  return { ...updated, attributes: [...updated.attributes] };\n}\n\nexport function deleteGroup(id) {\n  const idx = attributeGroups.findIndex((g) => g.id === id);\n  if (idx === -1) return false;\n  attributeGroups.splice(idx, 1);\n  return true;\n}\n"
    },
    {
      "path": "pages/api/attribute-groups/index.js",
      "content": "import { getGroups, createGroup } from '../../../lib/memoryStore';\n\nexport default async function handler(req, res) {\n  res.setHeader('Content-Type', 'application/json');\n\n  if (req.method === 'GET') {\n    const groups = getGroups();\n    res.status(200).json(groups);\n    return;\n  }\n\n  if (req.method === 'POST') {\n    try {\n      const { name } = req.body || {};\n      const cleanName = String(name || '').trim();\n      if (!cleanName) {\n        res.status(400).json({ error: 'Name is required' });\n        return;\n      }\n      const group = createGroup({ name: cleanName });\n      res.status(201).json(group);\n      return;\n    } catch (e) {\n      res.status(500).json({ error: 'Failed to create attribute group' });\n      return;\n    }\n  }\n\n  res.setHeader('Allow', 'GET, POST');\n  res.status(405).json({ error: 'Method Not Allowed' });\n}\n"
    },
    {
      "path": "pages/api/attribute-groups/[id].js",
      "content": "import { getGroup, updateGroup, deleteGroup } from '../../../lib/memoryStore';\n\nexport default async function handler(req, res) {\n  res.setHeader('Content-Type', 'application/json');\n  const {\n    query: { id },\n  } = req;\n\n  if (!id) {\n    res.status(400).json({ error: 'Missing id' });\n    return;\n  }\n\n  if (req.method === 'GET') {\n    const group = getGroup(id);\n    if (!group) {\n      res.status(404).json({ error: 'Not found' });\n      return;\n    }\n    res.status(200).json(group);\n    return;\n  }\n\n  if (req.method === 'PUT' || req.method === 'PATCH') {\n    try {\n      const { name, attributes } = req.body || {};\n      const patch = {};\n      if (name !== undefined) patch.name = name;\n      if (attributes !== undefined) {\n        if (!Array.isArray(attributes)) {\n          res.status(400).json({ error: 'attributes must be an array' });\n          return;\n        }\n        patch.attributes = attributes;\n      }\n      const updated = updateGroup(id, patch);\n      if (!updated) {\n        res.status(404).json({ error: 'Not found' });\n        return;\n      }\n      res.status(200).json(updated);\n      return;\n    } catch (e) {\n      res.status(500).json({ error: 'Failed to update attribute group' });\n      return;\n    }\n  }\n\n  if (req.method === 'DELETE') {\n    const ok = deleteGroup(id);\n    if (!ok) {\n      res.status(404).json({ error: 'Not found' });\n      return;\n    }\n    res.status(204).end();\n    return;\n  }\n\n  res.setHeader('Allow', 'GET, PUT, PATCH, DELETE');\n  res.status(405).json({ error: 'Method Not Allowed' });\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import { useEffect, useState } from 'react';\n\nexport default function AttributeGroupsAdmin() {\n  const [groups, setGroups] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [newName, setNewName] = useState('');\n  const [editingId, setEditingId] = useState(null);\n  const [editingName, setEditingName] = useState('');\n\n  async function load() {\n    setLoading(true);\n    setError('');\n    try {\n      const res = await fetch('/api/attribute-groups');\n      if (!res.ok) throw new Error('Failed to load');\n      const data = await res.json();\n      setGroups(data);\n    } catch (e) {\n      setError('Failed to load attribute groups');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  async function createGroup(e) {\n    e.preventDefault();\n    const name = newName.trim();\n    if (!name) return;\n    try {\n      const res = await fetch('/api/attribute-groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name }),\n      });\n      if (!res.ok) throw new Error('Failed to create');\n      setNewName('');\n      await load();\n    } catch (e) {\n      alert('Failed to create group');\n    }\n  }\n\n  async function saveEdit(id) {\n    const name = editingName.trim();\n    if (!name) return;\n    try {\n      const res = await fetch(`/api/attribute-groups/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name }),\n      });\n      if (!res.ok) throw new Error('Failed to update');\n      setEditingId(null);\n      setEditingName('');\n      await load();\n    } catch (e) {\n      alert('Failed to update group');\n    }\n  }\n\n  async function remove(id) {\n    if (!confirm('Delete this attribute group?')) return;\n    try {\n      const res = await fetch(`/api/attribute-groups/${id}`, { method: 'DELETE' });\n      if (!res.ok && res.status !== 204) throw new Error('Failed to delete');\n      await load();\n    } catch (e) {\n      alert('Failed to delete group');\n    }\n  }\n\n  return (\n    <div style={{ maxWidth: 800, margin: '40px auto', padding: 16 }}>\n      <h1>Attribute Groups</h1>\n\n      <form onSubmit={createGroup} style={{ marginBottom: 16 }}>\n        <input\n          type=\"text\"\n          placeholder=\"New group name\"\n          value={newName}\n          onChange={(e) => setNewName(e.target.value)}\n          style={{ padding: 8, width: '60%', marginRight: 8 }}\n        />\n        <button type=\"submit\">Add Group</button>\n      </form>\n\n      {loading && <div>Loadingâ€¦</div>}\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n\n      {!loading && groups.length === 0 && <div>No attribute groups yet.</div>}\n\n      <ul style={{ listStyle: 'none', padding: 0 }}>\n        {groups.map((g) => (\n          <li key={g.id} style={{ border: '1px solid #ddd', padding: 12, borderRadius: 6, marginBottom: 8 }}>\n            {editingId === g.id ? (\n              <div>\n                <input\n                  type=\"text\"\n                  value={editingName}\n                  onChange={(e) => setEditingName(e.target.value)}\n                  style={{ padding: 6, width: '60%', marginRight: 8 }}\n                />\n                <button onClick={() => saveEdit(g.id)} style={{ marginRight: 8 }}>Save</button>\n                <button onClick={() => { setEditingId(null); setEditingName(''); }}>Cancel</button>\n              </div>\n            ) : (\n              <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <div>\n                  <strong>{g.name}</strong>\n                  <div style={{ color: '#666', fontSize: 12 }}>{g.attributes?.length || 0} attributes</div>\n                </div>\n                <div>\n                  <button\n                    onClick={() => { setEditingId(g.id); setEditingName(g.name); }}\n                    style={{ marginRight: 8 }}\n                  >\n                    Rename\n                  </button>\n                  <button onClick={() => remove(g.id)} style={{ color: '#b00' }}>Delete</button>\n                </div>\n              </div>\n            )}\n          </li>\n        ))}\n      </ul>\n\n      <p style={{ color: '#888', fontSize: 12 }}>\n        Data is stored in-memory per server instance for demo purposes.\n      </p>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/api-attribute-groups.test.js",
      "content": "import handler from '../pages/api/attribute-groups/index.js';\n\nfunction createMockReqRes({ method = 'GET', url = '/api/attribute-groups', body = null } = {}) {\n  const req = { method, url, body, headers: {}, query: {}, cookies: {} };\n  let statusCode = 200;\n  let headers = {};\n  let jsonData = undefined;\n  const res = {\n    setHeader: (k, v) => { headers[k.toLowerCase()] = v; },\n    status: (code) => { statusCode = code; return res; },\n    json: (data) => { jsonData = data; return res; },\n    end: (data) => { jsonData = data; return res; },\n    get statusCode() { return statusCode; },\n    get _headers() { return headers; },\n    get _data() { return jsonData; },\n  };\n  return { req, res };\n}\n\nasync function call(method = 'GET', body) {\n  const { req, res } = createMockReqRes({ method, body });\n  await handler(req, res);\n  return res;\n}\n\n// This is a light smoke test for the API handler in isolation\n(async () => {\n  const res1 = await call('GET');\n  if (!(Array.isArray(res1._data) && res1.statusCode === 200)) {\n    throw new Error('GET should return 200 with an array of groups');\n  }\n\n  const res2 = await call('POST', { name: 'Specs' });\n  if (!(res2.statusCode === 201 && res2._data && res2._data.name === 'Specs')) {\n    throw new Error('POST should create a new group named Specs');\n  }\n\n  const res3 = await call('POST', { name: '' });\n  if (!(res3.statusCode === 400)) {\n    throw new Error('POST should validate name');\n  }\n})();\n"
    }
  ]
}