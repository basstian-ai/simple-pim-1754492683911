{
  "commit_message": "Add Dashboard API and Admin Dashboard page with product stats and top tags; include API unit test",
  "diff": "--- a/pages/api/products.js\n+++ b/pages/api/products.js\n@@\n import productsHandler from '../../lib/api/productsHandler';\n \n export default productsHandler;\n",
  "files": [
    {
      "path": "lib/api/dashboardHandler.js",
      "content": "export default async function dashboardHandler(req, res) {\n  try {\n    // Load products from lib/products with flexible export resolution\n    let productsModule = require('../products');\n    productsModule = productsModule && productsModule.default ? productsModule.default : productsModule;\n\n    let products;\n    if (productsModule && typeof productsModule.getProducts === 'function') {\n      products = productsModule.getProducts();\n      if (products && typeof products.then === 'function') products = await products;\n    } else if (Array.isArray(productsModule)) {\n      products = productsModule;\n    } else if (productsModule && Array.isArray(productsModule.products)) {\n      products = productsModule.products;\n    } else {\n      products = [];\n    }\n\n    // Resolve isInStock util with graceful fallback\n    let isInStockMod = {};\n    try {\n      isInStockMod = require('../isInStock');\n    } catch (_) {}\n    const isInStockFn =\n      (isInStockMod && (isInStockMod.isInStock || isInStockMod.default)) ||\n      function (p) {\n        const qty = typeof (p && p.stock) === 'number' ? p.stock : typeof (p && p.quantity) === 'number' ? p.quantity : 0;\n        return Boolean((p && p.inStock) || qty > 0);\n      };\n\n    const totalProducts = Array.isArray(products) ? products.length : 0;\n    const inStock = products.filter((p) => {\n      try {\n        return !!isInStockFn(p);\n      } catch (_) {\n        return false;\n      }\n    }).length;\n\n    const tagCounts = {};\n    for (const p of products) {\n      const tags = (p && p.tags) || [];\n      if (Array.isArray(tags)) {\n        for (const t of tags) {\n          const tag = String(t);\n          tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n        }\n      }\n    }\n\n    const topTags = Object.keys(tagCounts)\n      .map((tag) => ({ tag, count: tagCounts[tag] }))\n      .sort((a, b) => (b.count - a.count) || a.tag.localeCompare(b.tag))\n      .slice(0, 20);\n\n    res.status(200).json({\n      totalProducts,\n      inStock,\n      outOfStock: Math.max(0, totalProducts - inStock),\n      totalTags: Object.keys(tagCounts).length,\n      topTags,\n      generatedAt: new Date().toISOString(),\n    });\n  } catch (e) {\n    res.status(500).json({ error: 'Failed to compute dashboard stats' });\n  }\n}\n"
    },
    {
      "path": "pages/api/dashboard.js",
      "content": "import dashboardHandler from '../../lib/api/dashboardHandler';\n\nexport default dashboardHandler;\n"
    },
    {
      "path": "pages/admin/dashboard.js",
      "content": "import React, { useEffect, useState } from 'react';\n\nexport default function AdminDashboard() {\n  const [stats, setStats] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      try {\n        const res = await fetch('/api/dashboard');\n        const data = await res.json();\n        if (!cancelled) setStats(data);\n      } catch (e) {\n        if (!cancelled) setError('Failed to load dashboard');\n      }\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  return (\n    <div style={{ maxWidth: 900, margin: '0 auto', padding: '1rem' }}>\n      <h1 style={{ margin: '0 0 1rem' }}>Admin Dashboard</h1>\n      {error && <div role=\"alert\" style={{ color: '#b00020' }}>{error}</div>}\n      {!stats && !error && <div>Loadingâ€¦</div>}\n      {stats && (\n        <div>\n          <section style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit,minmax(160px,1fr))', gap: '0.75rem', marginBottom: '1rem' }}>\n            <div style={{ border: '1px solid #eee', borderRadius: 8, padding: '0.75rem' }}>\n              <div style={{ fontSize: 12, color: '#666' }}>Total products</div>\n              <div style={{ fontSize: 24, fontWeight: 600 }}>{stats.totalProducts}</div>\n            </div>\n            <div style={{ border: '1px solid #eee', borderRadius: 8, padding: '0.75rem' }}>\n              <div style={{ fontSize: 12, color: '#666' }}>In stock</div>\n              <div style={{ fontSize: 24, fontWeight: 600, color: '#128a0c' }}>{stats.inStock}</div>\n            </div>\n            <div style={{ border: '1px solid #eee', borderRadius: 8, padding: '0.75rem' }}>\n              <div style={{ fontSize: 12, color: '#666' }}>Out of stock</div>\n              <div style={{ fontSize: 24, fontWeight: 600, color: '#b00020' }}>{stats.outOfStock}</div>\n            </div>\n            <div style={{ border: '1px solid #eee', borderRadius: 8, padding: '0.75rem' }}>\n              <div style={{ fontSize: 12, color: '#666' }}>Unique tags</div>\n              <div style={{ fontSize: 24, fontWeight: 600 }}>{stats.totalTags}</div>\n            </div>\n          </section>\n\n          {stats.topTags && stats.topTags.length > 0 && (\n            <section>\n              <h2 style={{ fontSize: 16, margin: '0.5rem 0' }}>Top tags</h2>\n              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem' }}>\n                {stats.topTags.map((t) => (\n                  <span key={t.tag} style={{ border: '1px solid #eee', borderRadius: 999, padding: '0.25rem 0.5rem', fontSize: 12 }}>\n                    {t.tag} <span style={{ color: '#666' }}>({t.count})</span>\n                  </span>\n                ))}\n              </div>\n              <div style={{ color: '#888', marginTop: '0.5rem', fontSize: 12 }}>Updated {new Date(stats.generatedAt).toLocaleString()}</div>\n            </section>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/api-dashboard.test.js",
      "content": "const apiModule = require('../pages/api/dashboard');\nconst handler = apiModule.default || apiModule;\n\nasync function resolveProducts() {\n  let productsModule = require('../lib/products');\n  productsModule = productsModule && productsModule.default ? productsModule.default : productsModule;\n  if (productsModule && typeof productsModule.getProducts === 'function') {\n    const res = productsModule.getProducts();\n    return res && typeof res.then === 'function' ? await res : res;\n  }\n  if (Array.isArray(productsModule)) return productsModule;\n  if (productsModule && Array.isArray(productsModule.products)) return productsModule.products;\n  return [];\n}\n\nfunction createMockRes() {\n  let statusCode = 200;\n  let jsonData = undefined;\n  return {\n    status(code) {\n      statusCode = code;\n      return this;\n    },\n    json(data) {\n      jsonData = data;\n      return this;\n    },\n    _getStatus() {\n      return statusCode;\n    },\n    _getJSON() {\n      return jsonData;\n    },\n  };\n}\n\ndescribe('API /api/dashboard', () => {\n  test('returns dashboard stats with expected shape', async () => {\n    const req = { method: 'GET' };\n    const res = createMockRes();\n\n    await handler(req, res);\n\n    expect(res._getStatus()).toBe(200);\n    const data = res._getJSON();\n    expect(data).toBeTruthy();\n    expect(typeof data.totalProducts).toBe('number');\n    expect(typeof data.inStock).toBe('number');\n    expect(typeof data.outOfStock).toBe('number');\n    expect(Array.isArray(data.topTags)).toBe(true);\n  });\n\n  test('totalProducts matches product catalog size', async () => {\n    const req = { method: 'GET' };\n    const res = createMockRes();\n\n    await handler(req, res);\n\n    const data = res._getJSON();\n    const products = await resolveProducts();\n    expect(data.totalProducts).toBe(products.length);\n    expect(data.inStock + data.outOfStock).toBe(products.length);\n  });\n});\n"
    }
  ]
}