{
  "files": [
    {
      "path": "data/attribute-groups.json",
      "content": "{\n  \"items\": [\n    {\n      \"id\": \"color\",\n      \"name\": \"Color\",\n      \"attributes\": [\"Red\", \"Blue\", \"Green\"]\n    },\n    {\n      \"id\": \"size\",\n      \"name\": \"Size\",\n      \"attributes\": [\"S\", \"M\", \"L\", \"XL\"]\n    }\n  ],\n  \"updatedAt\": \"2024-01-01T00:00:00.000Z\"\n}\n"
    },
    {
      "path": "pages/api/attribute-groups/index.js",
      "content": "const fs = require('fs');\nconst path = require('path');\n\nconst DATA_FILE = path.join(process.cwd(), 'data', 'attribute-groups.json');\n\nfunction ensureDataFile() {\n  if (!fs.existsSync(DATA_FILE)) {\n    const initial = { items: [], updatedAt: new Date(0).toISOString() };\n    fs.mkdirSync(path.dirname(DATA_FILE), { recursive: true });\n    fs.writeFileSync(DATA_FILE, JSON.stringify(initial, null, 2));\n  }\n}\n\nfunction loadData() {\n  ensureDataFile();\n  try {\n    const raw = fs.readFileSync(DATA_FILE, 'utf8');\n    const data = JSON.parse(raw || '{}');\n    if (!data || typeof data !== 'object' || !Array.isArray(data.items)) {\n      return { items: [], updatedAt: new Date(0).toISOString() };\n    }\n    return data;\n  } catch (e) {\n    return { items: [], updatedAt: new Date(0).toISOString() };\n  }\n}\n\nfunction saveData(data) {\n  const payload = { ...data, updatedAt: new Date().toISOString() };\n  fs.writeFileSync(DATA_FILE, JSON.stringify(payload, null, 2));\n  return payload;\n}\n\nfunction slugify(input) {\n  return String(input || '')\n    .toLowerCase()\n    .trim()\n    .replace(/[^a-z0-9\\s-]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-')\n    .replace(/^-|-$/g, '');\n}\n\nfunction uniqueId(desired, existingIds) {\n  if (!existingIds.includes(desired)) return desired;\n  let i = 2;\n  while (existingIds.includes(`${desired}-${i}`)) i += 1;\n  return `${desired}-${i}`;\n}\n\nfunction normalizeAttributes(attrs) {\n  if (Array.isArray(attrs)) {\n    return Array.from(\n      new Set(\n        attrs\n          .map((a) => String(a || '').trim())\n          .filter((a) => a.length > 0)\n      )\n    );\n  }\n  if (typeof attrs === 'string') {\n    return Array.from(\n      new Set(\n        attrs\n          .split(',')\n          .map((a) => a.trim())\n          .filter((a) => a.length > 0)\n      )\n    );\n  }\n  return [];\n}\n\nfunction handler(req, res) {\n  const method = (req.method || 'GET').toUpperCase();\n\n  if (method === 'GET') {\n    const data = loadData();\n    return res.status(200).json(data);\n  }\n\n  if (method === 'POST') {\n    const body = req.body || {};\n    const name = String(body.name || '').trim();\n    const attrs = normalizeAttributes(body.attributes);\n\n    if (!name) {\n      return res.status(400).json({ error: 'name is required' });\n    }\n    if (!attrs.length) {\n      return res.status(400).json({ error: 'attributes must be a non-empty array or comma-separated string' });\n    }\n\n    const data = loadData();\n    const desiredId = slugify(name) || 'group';\n    const existingIds = data.items.map((g) => g.id);\n    const id = uniqueId(desiredId, existingIds);\n\n    const newGroup = { id, name, attributes: attrs };\n    const updated = { ...data, items: [...data.items, newGroup] };\n    const saved = saveData(updated);\n\n    return res.status(201).json({ item: newGroup, items: saved.items, updatedAt: saved.updatedAt });\n  }\n\n  if (method === 'PUT' || method === 'PATCH') {\n    const body = req.body || {};\n    const id = String(body.id || '').trim();\n    if (!id) return res.status(400).json({ error: 'id is required' });\n\n    const data = loadData();\n    const idx = data.items.findIndex((g) => g.id === id);\n    if (idx === -1) return res.status(404).json({ error: 'attribute group not found' });\n\n    const name = typeof body.name === 'string' ? String(body.name).trim() : data.items[idx].name;\n    const attrs = body.attributes !== undefined ? normalizeAttributes(body.attributes) : data.items[idx].attributes;\n    if (!name) return res.status(400).json({ error: 'name cannot be empty' });\n    if (!attrs.length) return res.status(400).json({ error: 'attributes cannot be empty' });\n\n    const updatedItem = { ...data.items[idx], name, attributes: attrs };\n    const updated = { ...data, items: [...data.items.slice(0, idx), updatedItem, ...data.items.slice(idx + 1)] };\n    const saved = saveData(updated);\n\n    return res.status(200).json({ item: updatedItem, items: saved.items, updatedAt: saved.updatedAt });\n  }\n\n  if (method === 'DELETE') {\n    const { id } = req.query || {};\n    const targetId = Array.isArray(id) ? id[0] : id;\n    if (!targetId) return res.status(400).json({ error: 'id is required as query parameter' });\n\n    const data = loadData();\n    const exists = data.items.some((g) => g.id === targetId);\n    if (!exists) return res.status(404).json({ error: 'attribute group not found' });\n\n    const updated = { ...data, items: data.items.filter((g) => g.id !== targetId) };\n    const saved = saveData(updated);\n\n    return res.status(200).json({ ok: true, items: saved.items, updatedAt: saved.updatedAt });\n  }\n\n  res.setHeader('Allow', 'GET, POST, PUT, PATCH, DELETE');\n  return res.status(405).json({ error: 'Method Not Allowed' });\n}\n\nmodule.exports = handler;\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import React from 'react';\n\nexport default function AttributeGroupsPage() {\n  const [items, setItems] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState('');\n\n  const [name, setName] = React.useState('');\n  const [attributesText, setAttributesText] = React.useState('');\n  const [submitting, setSubmitting] = React.useState(false);\n\n  const load = React.useCallback(async () => {\n    setLoading(true);\n    setError('');\n    try {\n      const res = await fetch('/api/attribute-groups');\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Failed to load');\n      setItems(Array.isArray(data.items) ? data.items : []);\n    } catch (e) {\n      setError(e.message || 'Failed to load');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    load();\n  }, [load]);\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    setSubmitting(true);\n    setError('');\n    try {\n      const attrs = attributesText\n        .split(',')\n        .map((a) => a.trim())\n        .filter((a) => a.length > 0);\n      const res = await fetch('/api/attribute-groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name, attributes: attrs })\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Failed to create');\n      setName('');\n      setAttributesText('');\n      setItems(data.items || []);\n    } catch (e) {\n      setError(e.message || 'Failed to create');\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  async function onDelete(id) {\n    if (!confirm('Delete this attribute group?')) return;\n    setError('');\n    try {\n      const res = await fetch(`/api/attribute-groups?id=${encodeURIComponent(id)}`, { method: 'DELETE' });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Failed to delete');\n      setItems(data.items || []);\n    } catch (e) {\n      setError(e.message || 'Failed to delete');\n    }\n  }\n\n  return (\n    <div style={{ padding: '24px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1 style={{ marginTop: 0 }}>Attribute Groups</h1>\n\n      {error ? (\n        <div style={{ background: '#fee', color: '#900', padding: '8px 12px', border: '1px solid #f99', borderRadius: 4, marginBottom: 16 }}>\n          {error}\n        </div>\n      ) : null}\n\n      <section style={{ marginBottom: 32 }}>\n        <h2 style={{ marginTop: 0, fontSize: 18 }}>Create new group</h2>\n        <form onSubmit={onSubmit} style={{ display: 'grid', gap: 12, maxWidth: 520 }}>\n          <label style={{ display: 'grid', gap: 6 }}>\n            <span>Name</span>\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"e.g. Color\"\n              required\n              style={{ padding: '8px 10px', border: '1px solid #ccc', borderRadius: 4 }}\n            />\n          </label>\n          <label style={{ display: 'grid', gap: 6 }}>\n            <span>Attributes (comma-separated)</span>\n            <input\n              type=\"text\"\n              value={attributesText}\n              onChange={(e) => setAttributesText(e.target.value)}\n              placeholder=\"e.g. Red, Blue, Green\"\n              required\n              style={{ padding: '8px 10px', border: '1px solid #ccc', borderRadius: 4 }}\n            />\n          </label>\n          <div>\n            <button\n              type=\"submit\"\n              disabled={submitting}\n              style={{\n                background: '#111827',\n                color: '#fff',\n                padding: '8px 14px',\n                border: 0,\n                borderRadius: 4,\n                cursor: 'pointer',\n                opacity: submitting ? 0.7 : 1\n              }}\n            >\n              {submitting ? 'Creating…' : 'Create group'}\n            </button>\n          </div>\n        </form>\n      </section>\n\n      <section>\n        <h2 style={{ marginTop: 0, fontSize: 18 }}>Existing groups</h2>\n        {loading ? (\n          <div>Loading…</div>\n        ) : items.length === 0 ? (\n          <div>No attribute groups yet.</div>\n        ) : (\n          <ul style={{ listStyle: 'none', padding: 0, margin: 0, display: 'grid', gap: 12 }}>\n            {items.map((g) => (\n              <li key={g.id} style={{ border: '1px solid #e5e7eb', borderRadius: 6, padding: 12 }}>\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: 12 }}>\n                  <div>\n                    <div style={{ fontWeight: 600 }}>{g.name} <span style={{ color: '#6b7280' }}>({g.id})</span></div>\n                    <div style={{ color: '#374151', marginTop: 4 }}>{Array.isArray(g.attributes) ? g.attributes.join(', ') : ''}</div>\n                  </div>\n                  <button onClick={() => onDelete(g.id)} style={{ background: '#dc2626', color: '#fff', border: 0, padding: '6px 10px', borderRadius: 4, cursor: 'pointer' }}>Delete</button>\n                </div>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/api/attribute-groups.test.js",
      "content": "const handler = require('../../pages/api/attribute-groups/index.js');\n\nfunction createMockRes() {\n  const res = {};\n  res.statusCode = 200;\n  res.headers = {};\n  res.setHeader = (k, v) => { res.headers[k] = v; };\n  res.status = (code) => { res.statusCode = code; return res; };\n  res.json = (data) => { res._json = data; return res; };\n  return res;\n}\n\ndescribe('API /api/attribute-groups', () => {\n  it('GET returns items array', () => {\n    const req = { method: 'GET' };\n    const res = createMockRes();\n    handler(req, res);\n    expect(res.statusCode).toBe(200);\n    expect(Array.isArray(res._json.items)).toBe(true);\n  });\n\n  it('POST validates input', () => {\n    const badReq = { method: 'POST', body: { name: '', attributes: [] } };\n    const res = createMockRes();\n    handler(badReq, res);\n    expect(res.statusCode).toBe(400);\n  });\n});\n"
    }
  ]
}