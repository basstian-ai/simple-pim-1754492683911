{
  "commit_message": "feat(api): add products attributes summary endpoint + test\n\nAdd a new API endpoint /api/products/attributes-summary that aggregates attributes from the product dataset and returns counts per attribute value. Include a Jest test to assert the endpoint returns the expected shape and totalProducts matches data/products.json.",
  "files": [
    {
      "path": "pages/api/products/attributes-summary.js",
      "content": "import products from '../../../data/products.json';\n\n// Aggregates attribute counts across all products.\n// Returns: { totalProducts, attributeCounts: { [attributeName]: { [value]: count } } }\nexport default function handler(req, res) {\n  try {\n    const attributeCounts = {};\n\n    if (!Array.isArray(products)) {\n      return res.status(500).json({ error: 'Products data is not an array' });\n    }\n\n    products.forEach((product) => {\n      const attrs = product.attributes;\n\n      // Support multiple representations: array of { name, value } or object map\n      if (Array.isArray(attrs)) {\n        attrs.forEach((a) => {\n          if (!a) return;\n          const name = a.name || a.attribute || a.key;\n          const value = a.value != null ? String(a.value) : undefined;\n          if (!name || value === undefined) return;\n\n          attributeCounts[name] = attributeCounts[name] || {};\n          attributeCounts[name][value] = (attributeCounts[name][value] || 0) + 1;\n        });\n      } else if (attrs && typeof attrs === 'object') {\n        Object.keys(attrs).forEach((name) => {\n          let value = attrs[name];\n          // normalize arrays by joining values\n          if (Array.isArray(value)) value = value.join(',');\n          if (value == null) return;\n          value = String(value);\n\n          attributeCounts[name] = attributeCounts[name] || {};\n          attributeCounts[name][value] = (attributeCounts[name][value] || 0) + 1;\n        });\n      }\n    });\n\n    return res.status(200).json({ totalProducts: products.length, attributeCounts });\n  } catch (err) {\n    console.error('Error in attributes-summary handler', err);\n    return res.status(500).json({ error: 'Internal Server Error' });\n  }\n}\n"
    },
    {
      "path": "tests/api-products-attributes-summary.test.js",
      "content": "const handler = require('../pages/api/products/attributes-summary').default;\nconst products = require('../data/products.json');\n\ndescribe('/api/products/attributes-summary', () => {\n  test('returns totalProducts and attributeCounts object', () => {\n    const req = {};\n    const res = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn(),\n    };\n\n    handler(req, res);\n\n    expect(res.status).toHaveBeenCalledWith(200);\n    expect(res.json).toHaveBeenCalled();\n\n    const payload = res.json.mock.calls[0][0];\n    expect(payload).toHaveProperty('totalProducts');\n    expect(payload).toHaveProperty('attributeCounts');\n    expect(typeof payload.totalProducts).toBe('number');\n    expect(payload.totalProducts).toBe(products.length);\n    expect(payload.attributeCounts && typeof payload.attributeCounts === 'object').toBe(true);\n  });\n});\n"
    }
  ]
}