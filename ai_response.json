{
  "files": [
    {
      "path": "lib/sku.js",
      "content": "/*\n  Simple SKU generator utilities for the PIM\n  - Deterministic, human-friendly, uppercased\n  - Encodes product name + optional attribute pairs\n*/\n\nfunction sanitize(input) {\n  if (!input) return '';\n  return String(input)\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '') // remove diacritics\n    .replace(/[^a-zA-Z0-9\\s]+/g, ' ') // keep letters, numbers, space\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\nfunction twoLetters(str) {\n  const s = sanitize(str).toUpperCase().replace(/\\s+/g, '');\n  return s.slice(0, 2);\n}\n\nfunction threeLetters(str) {\n  const s = sanitize(str).toUpperCase().replace(/\\s+/g, '');\n  return s.slice(0, 3);\n}\n\nfunction stableEntries(attrs) {\n  if (!attrs) return [];\n  if (Array.isArray(attrs)) {\n    return attrs\n      .map((it) => [String(it.key ?? it.name ?? ''), String(it.value ?? '')])\n      .filter(([k]) => k !== '')\n      .sort(([a], [b]) => a.localeCompare(b));\n  }\n  if (typeof attrs === 'object') {\n    return Object.entries(attrs)\n      .map(([k, v]) => [String(k), String(v)])\n      .filter(([k]) => k !== '')\n      .sort(([a], [b]) => a.localeCompare(b));\n  }\n  return [];\n}\n\nfunction checksumBase36(str) {\n  // 32-bit unsigned rolling hash, mod 36^4, padded to 4\n  let h = 0 >>> 0;\n  for (let i = 0; i < str.length; i++) {\n    h = (h * 31 + str.charCodeAt(i)) >>> 0;\n  }\n  const mod = h % 1679616; // 36^4\n  return mod.toString(36).toUpperCase().padStart(4, '0');\n}\n\nfunction buildNameCode(name) {\n  const cleaned = sanitize(name).toUpperCase();\n  const words = cleaned.split(/\\s+/).filter(Boolean);\n  if (words.length === 0) return 'PRD';\n  const parts = words.map((w) => threeLetters(w)).filter(Boolean);\n  const code = parts.join('');\n  return code || 'PRD';\n}\n\nfunction buildAttrCode(attrs) {\n  const entries = stableEntries(attrs);\n  if (entries.length === 0) return '';\n  const parts = entries.map(([k, v]) => `${twoLetters(k)}${twoLetters(v)}`);\n  return parts.join('-');\n}\n\nexport function generateSKU(name, attrs) {\n  const base = buildNameCode(name);\n  const attrPart = buildAttrCode(attrs);\n  const fingerprint = checksumBase36(\n    `${sanitize(name)}|${JSON.stringify(stableEntries(attrs))}`\n  );\n  if (attrPart) return `${base}-${attrPart}-${fingerprint}`;\n  return `${base}-${fingerprint}`;\n}\n\n// Utility to parse textarea input where each line is `key=value`\nexport function parseKeyValueLines(text) {\n  if (!text) return {};\n  const lines = String(text).split(/\\r?\\n/);\n  const out = {};\n  for (const line of lines) {\n    const trimmed = line.trim();\n    if (!trimmed || trimmed.startsWith('#')) continue;\n    const idx = trimmed.indexOf('=');\n    if (idx === -1) continue;\n    const key = trimmed.slice(0, idx).trim();\n    const value = trimmed.slice(idx + 1).trim();\n    if (!key) continue;\n    out[key] = value;\n  }\n  return out;\n}\n\nexport default generateSKU;\n"
    },
    {
      "path": "pages/admin/sku.js",
      "content": "import React from 'react';\nimport { generateSKU, parseKeyValueLines } from '../../lib/sku';\n\nexport default function SkuGeneratorPage() {\n  const [name, setName] = React.useState('');\n  const [attrText, setAttrText] = React.useState('color=Red\\nsize=M');\n  const attrs = React.useMemo(() => parseKeyValueLines(attrText), [attrText]);\n  const sku = React.useMemo(() => generateSKU(name, attrs), [name, attrs]);\n\n  const copy = async () => {\n    try {\n      await navigator.clipboard.writeText(sku);\n      alert('SKU copied to clipboard');\n    } catch (e) {\n      // fallback\n      const el = document.createElement('textarea');\n      el.value = sku;\n      document.body.appendChild(el);\n      el.select();\n      document.execCommand('copy');\n      document.body.removeChild(el);\n      alert('SKU copied to clipboard');\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: 720, margin: '40px auto', padding: 16, fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica, Arial' }}>\n      <h1 style={{ marginBottom: 8 }}>SKU Generator</h1>\n      <p style={{ color: '#555', marginTop: 0 }}>Create consistent, human-friendly SKUs from product names and attributes.</p>\n\n      <div style={{ display: 'grid', gridTemplateColumns: '1fr', gap: 12 }}>\n        <label>\n          <div style={{ fontWeight: 600, marginBottom: 4 }}>Product name</div>\n          <input\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            placeholder=\"e.g., Red Shirt\"\n            style={{ width: '100%', padding: '10px 12px', borderRadius: 6, border: '1px solid #ccc' }}\n          />\n        </label>\n\n        <label>\n          <div style={{ fontWeight: 600, marginBottom: 4 }}>Attributes (key=value per line)</div>\n          <textarea\n            value={attrText}\n            onChange={(e) => setAttrText(e.target.value)}\n            rows={6}\n            style={{ width: '100%', padding: '10px 12px', borderRadius: 6, border: '1px solid #ccc', fontFamily: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace' }}\n          />\n          <div style={{ color: '#777', fontSize: 12, marginTop: 4 }}>Tip: prefix a line with # to ignore it.</div>\n        </label>\n\n        <div style={{ background: '#f7f7f8', border: '1px solid #e5e7eb', borderRadius: 8, padding: 16 }}>\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', gap: 8, flexWrap: 'wrap' }}>\n            <div>\n              <div style={{ fontSize: 12, color: '#667085', textTransform: 'uppercase', letterSpacing: 0.5 }}>Preview SKU</div>\n              <div style={{ fontWeight: 700, fontSize: 18, marginTop: 4, wordBreak: 'break-all' }}>{sku || 'â€”'}</div>\n            </div>\n            <div style={{ display: 'flex', gap: 8 }}>\n              <button onClick={copy} style={{ padding: '8px 12px', borderRadius: 6, border: '1px solid #d1d5db', background: '#fff', cursor: 'pointer' }}>Copy</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div style={{ marginTop: 24, color: '#555' }}>\n        <details>\n          <summary style={{ cursor: 'pointer', fontWeight: 600 }}>How it works</summary>\n          <div style={{ marginTop: 8, fontSize: 14, lineHeight: 1.5 }}>\n            <p>\n              The SKU is built from the first three letters of each word in the product name, followed by short codes for each attribute (two letters from the attribute name and value), and a short checksum for uniqueness.\n            </p>\n            <p>\n              Example: \"Red Shirt\" with attributes color=Red and size=M becomes: <code>REDSHI-CORE-SIM-XXXX</code>.\n            </p>\n          </div>\n        </details>\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "__tests__/sku.test.js",
      "content": "import { generateSKU, parseKeyValueLines } from '../lib/sku';\n\ndescribe('SKU utilities', () => {\n  test('parseKeyValueLines parses simple lines', () => {\n    const input = 'color=Red\\n# comment\\nsize= M\\nmaterial=Cotton';\n    expect(parseKeyValueLines(input)).toEqual({ color: 'Red', size: 'M', material: 'Cotton' });\n  });\n\n  test('generateSKU produces uppercase, deterministic shape with attributes', () => {\n    const attrs = { size: 'M', color: 'Red' };\n    const sku = generateSKU('Red Shirt', attrs);\n    expect(sku).toMatch(/^REDSHI-[A-Z0-9-]+-[A-Z0-9]{4}$/);\n    expect(sku).toContain('-CORE-SI'); // COlor + REd, SIze + M\n  });\n\n  test('generateSKU handles empty attributes', () => {\n    const sku = generateSKU('Mug', {});\n    expect(sku).toMatch(/^MUG-[A-Z0-9]{4}$/);\n  });\n});\n"
    }
  ]
}