{
  "files": [
    {
      "path": "data/attribute-groups.json",
      "content": "{\n  \"attributeGroups\": [\n    {\n      \"id\": \"basic\",\n      \"name\": \"Basic\",\n      \"attributes\": [\n        { \"code\": \"name\", \"label\": \"Name\", \"type\": \"text\", \"required\": true },\n        { \"code\": \"sku\", \"label\": \"SKU\", \"type\": \"text\", \"required\": true },\n        { \"code\": \"description\", \"label\": \"Description\", \"type\": \"textarea\", \"required\": false }\n      ]\n    },\n    {\n      \"id\": \"seo\",\n      \"name\": \"SEO\",\n      \"attributes\": [\n        { \"code\": \"meta_title\", \"label\": \"Meta Title\", \"type\": \"text\", \"required\": false },\n        { \"code\": \"meta_description\", \"label\": \"Meta Description\", \"type\": \"textarea\", \"required\": false }\n      ]\n    },\n    {\n      \"id\": \"dimensions\",\n      \"name\": \"Dimensions\",\n      \"attributes\": [\n        { \"code\": \"weight\", \"label\": \"Weight\", \"type\": \"number\", \"required\": false },\n        { \"code\": \"width\", \"label\": \"Width\", \"type\": \"number\", \"required\": false },\n        { \"code\": \"height\", \"label\": \"Height\", \"type\": \"number\", \"required\": false },\n        { \"code\": \"depth\", \"label\": \"Depth\", \"type\": \"number\", \"required\": false }\n      ]\n    }\n  ],\n  \"updatedAt\": \"2025-08-01T00:00:00.000Z\"\n}\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "import fs from 'fs'\nimport path from 'path'\n\nconst dataPath = path.join(process.cwd(), 'data', 'attribute-groups.json')\n\nasync function readAttributeGroups() {\n  const json = await fs.promises.readFile(dataPath, 'utf-8')\n  return JSON.parse(json)\n}\n\nexport default async function handler(req, res) {\n  if (req.method !== 'GET') {\n    res.setHeader('Allow', 'GET')\n    res.status(405).json({ error: 'Method Not Allowed' })\n    return\n  }\n\n  try {\n    const data = await readAttributeGroups()\n    res.setHeader('Cache-Control', 's-maxage=60, stale-while-revalidate')\n    res.status(200).json(data)\n  } catch (err) {\n    res.status(500).json({ error: 'Failed to load attribute groups' })\n  }\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import { useEffect, useMemo, useState } from 'react'\n\nexport default function AdminAttributeGroupsPage() {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const [groups, setGroups] = useState([])\n  const [query, setQuery] = useState('')\n\n  useEffect(() => {\n    let active = true\n    async function load() {\n      setLoading(true)\n      setError(null)\n      try {\n        const res = await fetch('/api/attribute-groups')\n        if (!res.ok) throw new Error('Failed to fetch attribute groups')\n        const data = await res.json()\n        if (active) setGroups(Array.isArray(data.attributeGroups) ? data.attributeGroups : [])\n      } catch (e) {\n        if (active) setError(e.message || 'Error loading attribute groups')\n      } finally {\n        if (active) setLoading(false)\n      }\n    }\n    load()\n    return () => {\n      active = false\n    }\n  }, [])\n\n  const filtered = useMemo(() => {\n    const q = query.trim().toLowerCase()\n    if (!q) return groups\n    return groups.filter((g) => {\n      if (g.name?.toLowerCase().includes(q)) return true\n      if (Array.isArray(g.attributes)) {\n        return g.attributes.some((a) =>\n          [a.code, a.label, a.type].filter(Boolean).some((v) => String(v).toLowerCase().includes(q))\n        )\n      }\n      return false\n    })\n  }, [groups, query])\n\n  return (\n    <div style={{ padding: '24px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1 style={{ margin: 0, fontSize: '24px' }}>Attribute Groups</h1>\n      <p style={{ color: '#555', marginTop: '8px' }}>Browse and search product attribute groups configured in the PIM.</p>\n\n      <div style={{ marginTop: '16px', marginBottom: '16px', display: 'flex', gap: '8px', alignItems: 'center' }}>\n        <input\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder=\"Search groups and attributes...\"\n          aria-label=\"Search attribute groups\"\n          style={{\n            padding: '8px 12px',\n            border: '1px solid #ddd',\n            borderRadius: '6px',\n            minWidth: '280px',\n            outline: 'none'\n          }}\n        />\n        <span style={{ color: '#888', fontSize: '12px' }}>\n          {filtered.length} group{filtered.length === 1 ? '' : 's'}\n        </span>\n      </div>\n\n      {loading && <div style={{ color: '#666' }}>Loading attribute groups...</div>}\n      {error && !loading && (\n        <div style={{ color: '#b00020', background: '#fde7ea', border: '1px solid #f8c7cf', padding: '8px 12px', borderRadius: '6px' }}>\n          {error}\n        </div>\n      )}\n\n      {!loading && !error && filtered.length === 0 && (\n        <div style={{ color: '#666' }}>No attribute groups match your search.</div>\n      )}\n\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))', gap: '12px', marginTop: '8px' }}>\n        {filtered.map((g) => (\n          <div key={g.id || g.name} style={{ border: '1px solid #eee', borderRadius: '8px', padding: '12px' }}>\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'baseline' }}>\n              <h2 style={{ fontSize: '16px', margin: 0 }}>{g.name}</h2>\n              {g.id && (\n                <code style={{ color: '#666', fontSize: '12px' }}>{g.id}</code>\n              )}\n            </div>\n            <div style={{ marginTop: '8px' }}>\n              {Array.isArray(g.attributes) && g.attributes.length > 0 ? (\n                <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n                  {g.attributes.map((a) => (\n                    <li key={a.code} style={{ padding: '6px 0', borderBottom: '1px dashed #f0f0f0' }}>\n                      <div style={{ display: 'flex', justifyContent: 'space-between', gap: '8px' }}>\n                        <div>\n                          <strong>{a.label || a.code}</strong>\n                          <div style={{ color: '#777', fontSize: '12px' }}>{a.code}</div>\n                        </div>\n                        <div style={{ textAlign: 'right', color: '#555' }}>\n                          <span style={{\n                            border: '1px solid #ddd',\n                            borderRadius: '4px',\n                            padding: '2px 6px',\n                            fontSize: '12px',\n                            background: '#fafafa'\n                          }}>{a.type || 'text'}</span>\n                          {a.required ? (\n                            <span style={{ marginLeft: '6px', color: '#0b8457', fontSize: '12px' }}>required</span>\n                          ) : (\n                            <span style={{ marginLeft: '6px', color: '#999', fontSize: '12px' }}>optional</span>\n                          )}\n                        </div>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <div style={{ color: '#777', fontSize: '12px' }}>No attributes in this group.</div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n"
    },
    {
      "path": "tests/manual/attribute-groups-data.test.js",
      "content": "const fs = require('fs')\nconst path = require('path')\n\n;(function main() {\n  try {\n    const file = path.join(process.cwd(), 'data', 'attribute-groups.json')\n    const raw = fs.readFileSync(file, 'utf-8')\n    const data = JSON.parse(raw)\n\n    if (!data || !Array.isArray(data.attributeGroups)) {\n      throw new Error('attributeGroups missing or not an array')\n    }\n\n    if (data.attributeGroups.length === 0) {\n      throw new Error('Expected at least one attribute group')\n    }\n\n    for (const g of data.attributeGroups) {\n      if (!g.id || !g.name) throw new Error('Group missing id or name')\n      if (!Array.isArray(g.attributes)) throw new Error(`Group ${g.id} attributes not an array`)\n      for (const a of g.attributes) {\n        if (!a.code) throw new Error(`Attribute missing code in group ${g.id}`)\n      }\n    }\n\n    console.log(`OK: attribute-groups.json valid with ${data.attributeGroups.length} groups.`)\n  } catch (err) {\n    console.error('Test failed:', err && err.message ? err.message : err)\n    process.exitCode = 1\n  }\n})()\n"
    }
  ]
}