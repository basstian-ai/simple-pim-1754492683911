{
  "files": [
    {
      "path": "lib/attributeGroups.js",
      "content": "/*\n  Lightweight attribute groups storage and utilities\n  - Persists to localStorage in the browser\n  - Safe no-op on server (SSR) until hydrated\n*/\n\nconst STORAGE_KEY = 'pim.attributeGroups';\n\nfunction isBrowser() {\n  return typeof window !== 'undefined' && typeof window.localStorage !== 'undefined';\n}\n\nfunction generateId() {\n  // Simple, URL-safe id: timestamp + random\n  const rand = Math.random().toString(36).slice(2, 10);\n  const now = Date.now().toString(36);\n  return `${now}-${rand}`;\n}\n\nfunction readStorage() {\n  if (!isBrowser()) return [];\n  try {\n    const raw = window.localStorage.getItem(STORAGE_KEY);\n    if (!raw) return [];\n    const parsed = JSON.parse(raw);\n    if (!Array.isArray(parsed)) return [];\n    return parsed;\n  } catch (_e) {\n    return [];\n  }\n}\n\nfunction writeStorage(groups) {\n  if (!isBrowser()) return;\n  try {\n    window.localStorage.setItem(STORAGE_KEY, JSON.stringify(groups));\n  } catch (_e) {\n    // ignore\n  }\n}\n\nfunction listGroups() {\n  return readStorage();\n}\n\nfunction saveGroups(groups) {\n  writeStorage(groups);\n  return groups;\n}\n\nfunction upsertGroup(group) {\n  const groups = readStorage();\n  const idx = groups.findIndex(g => g.id === group.id);\n  if (idx >= 0) {\n    groups[idx] = { ...groups[idx], ...group, updatedAt: new Date().toISOString() };\n  } else {\n    const id = group.id || generateId();\n    groups.push({ id, name: group.name || '', description: group.description || '', createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() });\n  }\n  writeStorage(groups);\n  return groups;\n}\n\nfunction deleteGroup(id) {\n  const groups = readStorage().filter(g => g.id !== id);\n  writeStorage(groups);\n  return groups;\n}\n\nfunction exportGroupsJson() {\n  const groups = readStorage();\n  return JSON.stringify({ version: 1, exportedAt: new Date().toISOString(), groups }, null, 2);\n}\n\nfunction importGroupsJson(jsonString) {\n  try {\n    const parsed = JSON.parse(jsonString);\n    const groups = Array.isArray(parsed?.groups) ? parsed.groups : Array.isArray(parsed) ? parsed : [];\n    // normalize\n    const normalized = groups.map(g => ({\n      id: g.id || generateId(),\n      name: String(g.name || ''),\n      description: String(g.description || ''),\n      createdAt: g.createdAt || new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }));\n    writeStorage(normalized);\n    return normalized;\n  } catch (_e) {\n    return readStorage();\n  }\n}\n\n// Utility to group attributes by attributeGroupId\n// attributes: [{ id, name, attributeGroupId }]\nfunction groupAttributesByGroupId(groups, attributes) {\n  const byId = {};\n  const groupIds = (groups || []).map(g => g.id);\n  // Initialize map keys for known groups\n  for (const id of groupIds) byId[id] = [];\n  for (const a of attributes || []) {\n    if (a && a.attributeGroupId) {\n      if (!byId[a.attributeGroupId]) byId[a.attributeGroupId] = [];\n      byId[a.attributeGroupId].push(a);\n    }\n  }\n  return byId;\n}\n\nmodule.exports = {\n  STORAGE_KEY,\n  isBrowser,\n  generateId,\n  listGroups,\n  saveGroups,\n  upsertGroup,\n  deleteGroup,\n  exportGroupsJson,\n  importGroupsJson,\n  groupAttributesByGroupId\n};\n"
    },
    {
      "path": "components/AttributeGroupsManager.js",
      "content": "import React from 'react';\nconst ag = require('../lib/attributeGroups');\n\nfunction useAttributeGroups() {\n  const [groups, setGroups] = React.useState([]);\n  const [hydrated, setHydrated] = React.useState(false);\n\n  React.useEffect(() => {\n    setGroups(ag.listGroups());\n    setHydrated(true);\n  }, []);\n\n  const add = (group) => {\n    const updated = ag.upsertGroup(group);\n    setGroups(updated);\n  };\n  const update = (group) => {\n    const updated = ag.upsertGroup(group);\n    setGroups(updated);\n  };\n  const remove = (id) => {\n    const updated = ag.deleteGroup(id);\n    setGroups(updated);\n  };\n  const importJson = (json) => {\n    const updated = ag.importGroupsJson(json);\n    setGroups(updated);\n  };\n  const exportJson = () => ag.exportGroupsJson();\n\n  return { groups, setGroups, hydrated, add, update, remove, importJson, exportJson };\n}\n\nexport default function AttributeGroupsManager() {\n  const { groups, hydrated, add, update, remove, importJson, exportJson } = useAttributeGroups();\n  const [editing, setEditing] = React.useState(null);\n  const [form, setForm] = React.useState({ name: '', description: '' });\n  const fileInputRef = React.useRef(null);\n\n  React.useEffect(() => {\n    if (editing) {\n      setForm({ name: editing.name || '', description: editing.description || '' });\n    } else {\n      setForm({ name: '', description: '' });\n    }\n  }, [editing]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const payload = {\n      id: editing?.id,\n      name: form.name.trim(),\n      description: form.description.trim()\n    };\n    if (!payload.name) return;\n    if (editing) {\n      update(payload);\n    } else {\n      add(payload);\n    }\n    setEditing(null);\n    setForm({ name: '', description: '' });\n  };\n\n  const onDelete = (g) => {\n    if (typeof window !== 'undefined' && window.confirm(`Delete attribute group \"${g.name}\"?`)) {\n      remove(g.id);\n      if (editing?.id === g.id) setEditing(null);\n    }\n  };\n\n  const onExport = () => {\n    const json = exportJson();\n    const blob = new Blob([json], { type: 'application/json;charset=utf-8' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'attribute-groups.json';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const onImportClick = () => {\n    if (fileInputRef.current) fileInputRef.current.click();\n  };\n\n  const onImportFile = (e) => {\n    const file = e.target.files && e.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = () => {\n      importJson(String(reader.result || ''));\n    };\n    reader.readAsText(file);\n    // reset input so user can import same file again if needed\n    e.target.value = '';\n  };\n\n  return (\n    <div style={{ maxWidth: 900, margin: '20px auto', padding: '0 16px' }}>\n      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 16 }}>\n        <h1 style={{ margin: 0 }}>Attribute Groups</h1>\n        <div>\n          <button onClick={onExport} style={{ marginRight: 8 }}>Export JSON</button>\n          <button onClick={onImportClick}>Import JSON</button>\n          <input ref={fileInputRef} type=\"file\" accept=\"application/json\" onChange={onImportFile} style={{ display: 'none' }} />\n        </div>\n      </div>\n\n      {!hydrated && <div>Loadingâ€¦</div>}\n\n      {hydrated && (\n        <div style={{ display: 'grid', gridTemplateColumns: '2fr 3fr', gap: 16 }}>\n          <div style={{ border: '1px solid #ddd', borderRadius: 6, padding: 12 }}>\n            <h3 style={{ marginTop: 0 }}>{editing ? 'Edit group' : 'Create new group'}</h3>\n            <form onSubmit={onSubmit}>\n              <div style={{ marginBottom: 8 }}>\n                <label style={{ display: 'block', fontSize: 12, color: '#666' }}>Name</label>\n                <input\n                  type=\"text\"\n                  value={form.name}\n                  onChange={(e) => setForm({ ...form, name: e.target.value })}\n                  placeholder=\"e.g., Specifications\"\n                  style={{ width: '100%', padding: 8 }}\n                  required\n                />\n              </div>\n              <div style={{ marginBottom: 8 }}>\n                <label style={{ display: 'block', fontSize: 12, color: '#666' }}>Description</label>\n                <textarea\n                  value={form.description}\n                  onChange={(e) => setForm({ ...form, description: e.target.value })}\n                  placeholder=\"Optional description\"\n                  style={{ width: '100%', padding: 8, minHeight: 60 }}\n                />\n              </div>\n              <div>\n                <button type=\"submit\" style={{ marginRight: 8 }}>{editing ? 'Save changes' : 'Add group'}</button>\n                {editing && (\n                  <button type=\"button\" onClick={() => setEditing(null)}>\n                    Cancel\n                  </button>\n                )}\n              </div>\n            </form>\n          </div>\n\n          <div style={{ border: '1px solid #ddd', borderRadius: 6, padding: 12 }}>\n            <h3 style={{ marginTop: 0 }}>All groups ({groups.length})</h3>\n            {groups.length === 0 ? (\n              <div>No attribute groups yet. Create your first group on the left.</div>\n            ) : (\n              <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                <thead>\n                  <tr>\n                    <th style={{ textAlign: 'left', borderBottom: '1px solid #eee', padding: '8px 4px' }}>Name</th>\n                    <th style={{ textAlign: 'left', borderBottom: '1px solid #eee', padding: '8px 4px' }}>Description</th>\n                    <th style={{ textAlign: 'right', borderBottom: '1px solid #eee', padding: '8px 4px' }}>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {groups.map((g) => (\n                    <tr key={g.id}>\n                      <td style={{ borderBottom: '1px solid #f5f5f5', padding: '8px 4px' }}>{g.name}</td>\n                      <td style={{ borderBottom: '1px solid #f5f5f5', padding: '8px 4px', color: '#555' }}>{g.description}</td>\n                      <td style={{ borderBottom: '1px solid #f5f5f5', padding: '8px 4px', textAlign: 'right' }}>\n                        <button onClick={() => setEditing(g)} style={{ marginRight: 8 }}>Edit</button>\n                        <button onClick={() => onDelete(g)} style={{ color: '#c00' }}>Delete</button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import React from 'react';\nimport Head from 'next/head';\nimport AttributeGroupsManager from '../../components/AttributeGroupsManager';\n\nexport default function AttributeGroupsPage() {\n  return (\n    <>\n      <Head>\n        <title>Attribute Groups | Simple PIM</title>\n      </Head>\n      <AttributeGroupsManager />\n    </>\n  );\n}\n"
    },
    {
      "path": "tests/attributeGroups.test.js",
      "content": "const assert = require('assert');\nconst {\n  generateId,\n  groupAttributesByGroupId\n} = require('../lib/attributeGroups');\n\n(function testGenerateIdUniqueness() {\n  const set = new Set();\n  for (let i = 0; i < 1000; i++) {\n    const id = generateId();\n    assert.strictEqual(typeof id, 'string');\n    assert.ok(id.length >= 10);\n    assert.ok(!set.has(id), 'id must be unique');\n    set.add(id);\n  }\n})();\n\n(function testGroupAttributesByGroupId() {\n  const groups = [\n    { id: 'g1', name: 'Specs' },\n    { id: 'g2', name: 'Dimensions' }\n  ];\n  const attributes = [\n    { id: 'a1', name: 'Color', attributeGroupId: 'g1' },\n    { id: 'a2', name: 'Material', attributeGroupId: 'g1' },\n    { id: 'a3', name: 'Width', attributeGroupId: 'g2' },\n    { id: 'a4', name: 'Loose', attributeGroupId: 'g3' } // unknown group should still be grouped under its id\n  ];\n  const grouped = groupAttributesByGroupId(groups, attributes);\n  assert.ok(grouped.g1 && grouped.g1.length === 2);\n  assert.ok(grouped.g2 && grouped.g2.length === 1);\n  assert.ok(grouped.g3 && grouped.g3.length === 1);\n  // known groups should exist even if empty\n  const grouped2 = groupAttributesByGroupId(groups, []);\n  assert.ok(Array.isArray(grouped2.g1) && grouped2.g1.length === 0);\n  assert.ok(Array.isArray(grouped2.g2) && grouped2.g2.length === 0);\n})();\n\nconsole.log('attributeGroups tests passed');\n"
    }
  ]
}