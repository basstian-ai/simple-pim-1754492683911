{
  "files": [
    {
      "path": "lib/attributeGroups.js",
      "content": "const STORAGE_KEY = 'pim_attribute_groups_v1';\n\nfunction _getStorage(storage) {\n  if (storage) return storage;\n  if (typeof window !== 'undefined' && window.localStorage) return window.localStorage;\n  if (typeof globalThis !== 'undefined') {\n    if (!globalThis.__PIM_FAKE_STORAGE__) {\n      const mem = {};\n      globalThis.__PIM_FAKE_STORAGE__ = {\n        getItem: (k) => (k in mem ? mem[k] : null),\n        setItem: (k, v) => {\n          mem[k] = String(v);\n        },\n        removeItem: (k) => {\n          delete mem[k];\n        },\n      };\n    }\n    return globalThis.__PIM_FAKE_STORAGE__;\n  }\n  const mem = {};\n  return {\n    getItem: (k) => (k in mem ? mem[k] : null),\n    setItem: (k, v) => {\n      mem[k] = String(v);\n    },\n    removeItem: (k) => {\n      delete mem[k];\n    },\n  };\n}\n\nfunction _read(storage) {\n  const s = _getStorage(storage);\n  const raw = s.getItem(STORAGE_KEY);\n  if (!raw) return [];\n  try {\n    const parsed = JSON.parse(raw);\n    if (Array.isArray(parsed)) return parsed;\n    return [];\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction _write(groups, storage) {\n  const s = _getStorage(storage);\n  s.setItem(STORAGE_KEY, JSON.stringify(groups));\n}\n\nfunction listGroups(storage) {\n  const groups = _read(storage);\n  return groups.slice().sort((a, b) => a.name.localeCompare(b.name));\n}\n\nfunction _genId() {\n  return 'ag_' + Date.now().toString(36) + '_' + Math.random().toString(36).slice(2, 8);\n}\n\nfunction createGroup(data, storage) {\n  const name = (data && data.name ? String(data.name) : '').trim();\n  if (!name) throw new Error('Attribute Group name is required');\n  const description = (data && data.description ? String(data.description) : '').trim();\n  const attributes = Array.isArray(data && data.attributes) ? data.attributes : [];\n  const groups = _read(storage);\n  const newGroup = {\n    id: data && data.id ? String(data.id) : _genId(),\n    name,\n    description,\n    attributes,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  };\n  groups.push(newGroup);\n  _write(groups, storage);\n  return newGroup;\n}\n\nfunction updateGroup(id, patch, storage) {\n  const groups = _read(storage);\n  const idx = groups.findIndex((g) => g.id === id);\n  if (idx === -1) throw new Error('Attribute Group not found');\n  const current = groups[idx];\n  const next = { ...current };\n  if (patch && typeof patch.name !== 'undefined') {\n    const name = String(patch.name).trim();\n    if (!name) throw new Error('Attribute Group name is required');\n    next.name = name;\n  }\n  if (patch && typeof patch.description !== 'undefined') {\n    next.description = String(patch.description);\n  }\n  if (patch && typeof patch.attributes !== 'undefined') {\n    next.attributes = Array.isArray(patch.attributes) ? patch.attributes : [];\n  }\n  next.updatedAt = new Date().toISOString();\n  groups[idx] = next;\n  _write(groups, storage);\n  return next;\n}\n\nfunction deleteGroup(id, storage) {\n  const groups = _read(storage);\n  const next = groups.filter((g) => g.id !== id);\n  const deleted = next.length !== groups.length;\n  if (deleted) _write(next, storage);\n  return deleted;\n}\n\nmodule.exports = {\n  STORAGE_KEY,\n  listGroups,\n  createGroup,\n  updateGroup,\n  deleteGroup,\n};\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import React, { useEffect, useState } from 'react';\nconst { listGroups, createGroup, updateGroup, deleteGroup } = require('../../lib/attributeGroups');\n\nexport default function AttributeGroupsAdminPage() {\n  const [groups, setGroups] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [saving, setSaving] = useState(false);\n  const [editingId, setEditingId] = useState(null);\n  const [editName, setEditName] = useState('');\n  const [editDescription, setEditDescription] = useState('');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    // Client-only load\n    try {\n      const data = listGroups();\n      setGroups(data);\n    } catch (e) {\n      // ignore\n    } finally {\n      setLoaded(true);\n    }\n  }, []);\n\n  function refresh() {\n    const data = listGroups();\n    setGroups(data);\n  }\n\n  async function onAdd(e) {\n    e.preventDefault();\n    setError('');\n    if (!name.trim()) {\n      setError('Name is required');\n      return;\n    }\n    setSaving(true);\n    try {\n      createGroup({ name: name.trim(), description: description.trim() });\n      setName('');\n      setDescription('');\n      refresh();\n    } catch (e) {\n      setError(e.message || 'Failed to create');\n    } finally {\n      setSaving(false);\n    }\n  }\n\n  function startEdit(g) {\n    setEditingId(g.id);\n    setEditName(g.name);\n    setEditDescription(g.description || '');\n  }\n\n  function cancelEdit() {\n    setEditingId(null);\n    setEditName('');\n    setEditDescription('');\n  }\n\n  function saveEdit(id) {\n    setError('');\n    if (!editName.trim()) {\n      setError('Name is required');\n      return;\n    }\n    try {\n      updateGroup(id, { name: editName.trim(), description: editDescription });\n      cancelEdit();\n      refresh();\n    } catch (e) {\n      setError(e.message || 'Update failed');\n    }\n  }\n\n  function onDelete(id) {\n    if (!confirm('Delete this attribute group?')) return;\n    try {\n      deleteGroup(id);\n      refresh();\n    } catch (e) {\n      setError(e.message || 'Delete failed');\n    }\n  }\n\n  return (\n    <div style={styles.container}>\n      <h1 style={styles.h1}>Attribute Groups</h1>\n      <p style={styles.muted}>Manage groups of attributes to organize your product data. Stored locally in your browser.</p>\n\n      <form onSubmit={onAdd} style={styles.card}>\n        <h2 style={styles.h2}>Create New Group</h2>\n        {error ? <div style={styles.error}>{error}</div> : null}\n        <div style={styles.row}>\n          <label style={styles.label}>Name</label>\n          <input\n            style={styles.input}\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            placeholder=\"e.g. Dimensions\"\n          />\n        </div>\n        <div style={styles.row}>\n          <label style={styles.label}>Description</label>\n          <input\n            style={styles.input}\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            placeholder=\"Optional description\"\n          />\n        </div>\n        <button type=\"submit\" disabled={saving} style={styles.buttonPrimary}>\n          {saving ? 'Creating…' : 'Add Group'}\n        </button>\n      </form>\n\n      <div style={styles.card}>\n        <h2 style={styles.h2}>Existing Groups</h2>\n        {!loaded ? (\n          <div>Loading…</div>\n        ) : groups.length === 0 ? (\n          <div style={styles.muted}>No attribute groups yet. Create one above.</div>\n        ) : (\n          <ul style={styles.list}>\n            {groups.map((g) => (\n              <li key={g.id} style={styles.listItem}>\n                {editingId === g.id ? (\n                  <div style={styles.editContainer}>\n                    <input\n                      style={styles.input}\n                      value={editName}\n                      onChange={(e) => setEditName(e.target.value)}\n                    />\n                    <input\n                      style={styles.input}\n                      value={editDescription}\n                      onChange={(e) => setEditDescription(e.target.value)}\n                    />\n                    <div>\n                      <button onClick={() => saveEdit(g.id)} style={styles.buttonPrimary}>Save</button>\n                      <button onClick={cancelEdit} style={styles.button}>Cancel</button>\n                    </div>\n                  </div>\n                ) : (\n                  <div style={styles.itemRow}>\n                    <div>\n                      <div style={styles.itemTitle}>{g.name}</div>\n                      {g.description ? <div style={styles.itemDesc}>{g.description}</div> : null}\n                    </div>\n                    <div>\n                      <button onClick={() => startEdit(g)} style={styles.button}>Edit</button>\n                      <button onClick={() => onDelete(g.id)} style={styles.buttonDanger}>Delete</button>\n                    </div>\n                  </div>\n                )}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  container: { maxWidth: 800, margin: '2rem auto', padding: '0 1rem', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica, Arial, sans-serif' },\n  h1: { margin: '0 0 1rem 0' },\n  h2: { margin: '0 0 1rem 0', fontSize: '1.1rem' },\n  muted: { color: '#666' },\n  card: { background: '#fff', border: '1px solid #eee', borderRadius: 8, padding: 16, margin: '1rem 0' },\n  row: { display: 'flex', flexDirection: 'column', marginBottom: 12 },\n  label: { fontSize: 12, color: '#333', marginBottom: 4 },\n  input: { padding: '8px 10px', borderRadius: 6, border: '1px solid #ddd', width: '100%', boxSizing: 'border-box', marginBottom: 8 },\n  buttonPrimary: { background: '#0070f3', color: '#fff', border: '1px solid #0070f3', borderRadius: 6, padding: '8px 12px', cursor: 'pointer', marginRight: 8 },\n  button: { background: '#f5f5f5', color: '#111', border: '1px solid #ddd', borderRadius: 6, padding: '8px 12px', cursor: 'pointer', marginRight: 8 },\n  buttonDanger: { background: '#fff0f0', color: '#b00020', border: '1px solid #ffb3b3', borderRadius: 6, padding: '8px 12px', cursor: 'pointer' },\n  list: { listStyle: 'none', margin: 0, padding: 0 },\n  listItem: { borderTop: '1px solid #eee', padding: '12px 0' },\n  itemRow: { display: 'flex', alignItems: 'center', justifyContent: 'space-between' },\n  itemTitle: { fontWeight: 600 },\n  itemDesc: { color: '#555', fontSize: 13, marginTop: 4 },\n  editContainer: { display: 'grid', gridTemplateColumns: '2fr 3fr auto', gap: 8, alignItems: 'center' },\n};\n"
    },
    {
      "path": "tests/attributeGroups.test.js",
      "content": "const assert = require('assert');\nconst { listGroups, createGroup, updateGroup, deleteGroup, STORAGE_KEY } = require('../lib/attributeGroups');\n\nfunction makeStorage() {\n  const mem = {};\n  return {\n    getItem: (k) => (k in mem ? mem[k] : null),\n    setItem: (k, v) => {\n      mem[k] = String(v);\n    },\n    removeItem: (k) => {\n      delete mem[k];\n    },\n    _dump: () => mem,\n  };\n}\n\n(function run() {\n  const storage = makeStorage();\n\n  // Initially empty\n  assert.deepStrictEqual(listGroups(storage), [], 'should start empty');\n\n  // Create\n  const g1 = createGroup({ name: 'Dimensions', description: 'Size related attributes' }, storage);\n  assert.ok(g1.id && g1.name === 'Dimensions');\n\n  const g2 = createGroup({ name: 'Materials' }, storage);\n  assert.ok(g2.id && g2.name === 'Materials');\n\n  // List sorted by name\n  const listed = listGroups(storage);\n  assert.strictEqual(listed.length, 2);\n  assert.strictEqual(listed[0].name < listed[1].name, true);\n\n  // Update\n  const updated = updateGroup(g1.id, { name: 'Physical Dimensions', description: 'updated' }, storage);\n  assert.strictEqual(updated.name, 'Physical Dimensions');\n  assert.strictEqual(updated.description, 'updated');\n\n  // Delete\n  const delOk = deleteGroup(g2.id, storage);\n  assert.strictEqual(delOk, true);\n  assert.strictEqual(listGroups(storage).length, 1);\n\n  // Storage key exists\n  assert.ok(Object.prototype.hasOwnProperty.call(storage._dump(), STORAGE_KEY));\n\n  console.log('attributeGroups.test.js: OK');\n})();\n"
    },
    {
      "path": "commit_message",
      "content": "FEATURE: Add Attribute Groups admin UI (localStorage-based) with CRUD utilities and a small unit test"
    }
  ]
}