{
  "files": [
    {
      "path": "utils/attribute-groups.js",
      "content": "/*\n  Attribute Groups utilities for the Simple PIM\n  - Pure functions for working with attribute groups\n  - LocalStorage helpers for client-side persistence\n\n  Group shape:\n  {\n    id: string,\n    name: string,\n    slug: string,\n    attributes: Array<{\n      code: string,\n      label: string,\n      type: 'text'|'number'|'select',\n      options?: string[]\n    }>,\n    createdAt: string,\n    updatedAt: string,\n  }\n*/\n\nexport function slugify(str) {\n  if (!str) return '';\n  return String(str)\n    .trim()\n    .toLowerCase()\n    .replace(/[\"']/g, '')\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/^-+|-+$/g, '');\n}\n\nexport function randomId(prefix = 'grp') {\n  // Lightweight unique id; fine for client-side usage\n  const rnd = Math.random().toString(36).slice(2, 8);\n  const ts = Date.now().toString(36);\n  return `${prefix}_${ts}_${rnd}`;\n}\n\nexport function normalizeAttribute(attr) {\n  const a = { code: '', label: '', type: 'text', options: [], ...(attr || {}) };\n  a.code = slugify(a.code || a.label);\n  if (a.type !== 'text' && a.type !== 'number' && a.type !== 'select') {\n    a.type = 'text';\n  }\n  if (a.type !== 'select') {\n    a.options = [];\n  } else if (!Array.isArray(a.options)) {\n    a.options = [];\n  }\n  return a;\n}\n\nexport function normalizeGroup(input) {\n  const now = new Date().toISOString();\n  const g = {\n    id: input?.id || randomId(),\n    name: (input?.name || '').trim(),\n    slug: slugify(input?.slug || input?.name || input?.id || ''),\n    attributes: Array.isArray(input?.attributes)\n      ? input.attributes.map(normalizeAttribute)\n      : [],\n    createdAt: input?.createdAt || now,\n    updatedAt: now,\n  };\n  return g;\n}\n\nexport function validateGroup(group) {\n  const errors = [];\n  if (!group) return { ok: false, errors: ['Group is required'] };\n\n  const name = (group.name || '').trim();\n  if (!name) errors.push('Name is required');\n\n  const slug = slugify(group.slug || group.name);\n  if (!slug) errors.push('Slug is required');\n\n  const seenCodes = new Set();\n  const seenLabels = new Set();\n  (group.attributes || []).forEach((a, idx) => {\n    const code = slugify(a.code || a.label);\n    const label = (a.label || '').trim();\n    if (!label) errors.push(`Attribute #${idx + 1}: label is required`);\n    if (!code) errors.push(`Attribute #${idx + 1}: code is required`);\n    if (code && seenCodes.has(code)) errors.push(`Duplicate attribute code: ${code}`);\n    if (label && seenLabels.has(label.toLowerCase())) errors.push(`Duplicate attribute label: ${label}`);\n    seenCodes.add(code);\n    seenLabels.add(label.toLowerCase());\n\n    const type = a.type || 'text';\n    if (!['text', 'number', 'select'].includes(type)) {\n      errors.push(`Attribute #${idx + 1}: invalid type: ${type}`);\n    }\n    if (type === 'select') {\n      const opts = Array.isArray(a.options) ? a.options : [];\n      if (opts.length === 0) errors.push(`Attribute #${idx + 1}: select options required`);\n    }\n  });\n\n  return { ok: errors.length === 0, errors };\n}\n\nfunction ensureUniqueSlug(groups, baseSlug, excludeId) {\n  const taken = new Set(\n    (groups || []).filter((g) => g.id !== excludeId).map((g) => g.slug)\n  );\n  if (!taken.has(baseSlug)) return baseSlug;\n  let i = 2;\n  let candidate = `${baseSlug}-${i}`;\n  while (taken.has(candidate)) {\n    i += 1;\n    candidate = `${baseSlug}-${i}`;\n  }\n  return candidate;\n}\n\nexport function upsertGroup(groups, inputGroup) {\n  const arr = Array.isArray(groups) ? groups.slice() : [];\n  const draft = normalizeGroup(inputGroup);\n  // assign unique slug\n  draft.slug = ensureUniqueSlug(arr, draft.slug || slugify(draft.name), draft.id);\n\n  const idx = arr.findIndex((g) => g.id === draft.id || g.slug === draft.slug);\n  if (idx === -1) {\n    arr.push(draft);\n  } else {\n    draft.createdAt = arr[idx].createdAt || draft.createdAt;\n    arr[idx] = { ...arr[idx], ...draft, updatedAt: new Date().toISOString() };\n  }\n  return arr;\n}\n\nexport function removeGroup(groups, id) {\n  const arr = Array.isArray(groups) ? groups : [];\n  return arr.filter((g) => g.id !== id);\n}\n\nconst LS_KEY = 'pim.attributeGroups';\n\nexport function loadGroupsFromLocalStorage() {\n  if (typeof window === 'undefined') return [];\n  try {\n    const raw = window.localStorage.getItem(LS_KEY);\n    if (!raw) return [];\n    const parsed = JSON.parse(raw);\n    if (!Array.isArray(parsed)) return [];\n    return parsed.map(normalizeGroup);\n  } catch (e) {\n    return [];\n  }\n}\n\nexport function saveGroupsToLocalStorage(groups) {\n  if (typeof window === 'undefined') return;\n  try {\n    const cleaned = (Array.isArray(groups) ? groups : []).map((g) => ({\n      id: g.id,\n      name: g.name,\n      slug: g.slug,\n      attributes: (g.attributes || []).map((a) => ({\n        code: slugify(a.code || a.label),\n        label: a.label,\n        type: a.type,\n        options: a.type === 'select' ? (a.options || []) : [],\n      })),\n      createdAt: g.createdAt,\n      updatedAt: g.updatedAt,\n    }));\n    window.localStorage.setItem(LS_KEY, JSON.stringify(cleaned));\n  } catch (e) {\n    // ignore\n  }\n}\n\nexport function exampleGroups() {\n  return [\n    normalizeGroup({\n      name: 'Apparel',\n      attributes: [\n        { code: 'color', label: 'Color', type: 'select', options: ['Red', 'Blue', 'Black', 'White'] },\n        { code: 'size', label: 'Size', type: 'select', options: ['XS', 'S', 'M', 'L', 'XL'] },\n        { code: 'material', label: 'Material', type: 'text' },\n      ],\n    }),\n    normalizeGroup({\n      name: 'Electronics',\n      attributes: [\n        { code: 'brand', label: 'Brand', type: 'text' },\n        { code: 'model', label: 'Model', type: 'text' },\n        { code: 'warranty_years', label: 'Warranty (years)', type: 'number' },\n      ],\n    }),\n  ];\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import { useEffect, useMemo, useState } from 'react';\nimport {\n  slugify,\n  validateGroup,\n  loadGroupsFromLocalStorage,\n  saveGroupsToLocalStorage,\n  upsertGroup,\n  removeGroup,\n  normalizeGroup,\n  exampleGroups,\n} from '../../utils/attribute-groups';\n\nexport default function AttributeGroupsAdmin() {\n  const [groups, setGroups] = useState([]);\n  const [editing, setEditing] = useState(null);\n  const [form, setForm] = useState({ name: '', slug: '', attributes: [] });\n  const [errors, setErrors] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const initial = loadGroupsFromLocalStorage();\n    setGroups(initial);\n  }, []);\n\n  useEffect(() => {\n    saveGroupsToLocalStorage(groups);\n  }, [groups]);\n\n  const filteredGroups = useMemo(() => {\n    const q = filter.trim().toLowerCase();\n    if (!q) return groups;\n    return groups.filter((g) =>\n      g.name.toLowerCase().includes(q) ||\n      g.slug.toLowerCase().includes(q) ||\n      (g.attributes || []).some((a) => a.label.toLowerCase().includes(q) || a.code.toLowerCase().includes(q))\n    );\n  }, [groups, filter]);\n\n  function resetForm() {\n    setEditing(null);\n    setErrors([]);\n    setForm({ name: '', slug: '', attributes: [] });\n  }\n\n  function onEdit(g) {\n    setEditing(g.id);\n    setErrors([]);\n    setForm({ name: g.name, slug: g.slug, attributes: g.attributes ? g.attributes.map((a) => ({ ...a })) : [] });\n  }\n\n  function onDelete(id) {\n    if (!confirm('Delete this attribute group?')) return;\n    setGroups((prev) => removeGroup(prev, id));\n    if (editing === id) resetForm();\n  }\n\n  function addAttributeRow() {\n    setForm((f) => ({\n      ...f,\n      attributes: [...(f.attributes || []), { code: '', label: '', type: 'text', options: [] }],\n    }));\n  }\n\n  function updateAttributeRow(index, patch) {\n    setForm((f) => {\n      const next = { ...f, attributes: [...(f.attributes || [])] };\n      next.attributes[index] = { ...next.attributes[index], ...patch };\n      if ('label' in patch && !next.attributes[index].code) {\n        next.attributes[index].code = slugify(patch.label || '');\n      }\n      if ('type' in patch && patch.type !== 'select') {\n        next.attributes[index].options = [];\n      }\n      return next;\n    });\n  }\n\n  function removeAttributeRow(index) {\n    setForm((f) => {\n      const next = { ...f, attributes: [...(f.attributes || [])] };\n      next.attributes.splice(index, 1);\n      return next;\n    });\n  }\n\n  function onSubmit(e) {\n    e.preventDefault();\n    const draft = normalizeGroup({\n      id: editing || undefined,\n      name: form.name,\n      slug: form.slug || form.name,\n      attributes: (form.attributes || []).map((a) => ({\n        code: a.code,\n        label: a.label,\n        type: a.type,\n        options: a.type === 'select' ? (a.options || []) : [],\n      })),\n    });\n    const { ok, errors: errs } = validateGroup(draft);\n    if (!ok) {\n      setErrors(errs);\n      return;\n    }\n    setGroups((prev) => upsertGroup(prev, draft));\n    resetForm();\n  }\n\n  function loadExamples() {\n    if (!confirm('Load example attribute groups? This will add to your current list.')) return;\n    const samples = exampleGroups();\n    setGroups((prev) => samples.reduce((acc, g) => upsertGroup(acc, g), prev));\n  }\n\n  return (\n    <div style={{ maxWidth: 1000, margin: '0 auto', padding: 16 }}>\n      <h1>Attribute Groups</h1>\n      <p style={{ color: '#555' }}>Define reusable attribute groups for products (e.g., Apparel with Color/Size).</p>\n\n      <div style={{ display: 'flex', gap: 16, alignItems: 'center', marginBottom: 16 }}>\n        <input\n          placeholder=\"Filter groups and attributes...\"\n          value={filter}\n          onChange={(e) => setFilter(e.target.value)}\n          style={{ flex: 1, padding: 8, borderRadius: 4, border: '1px solid #ddd' }}\n        />\n        <button onClick={loadExamples} style={{ padding: '8px 12px' }}>Load examples</button>\n        <button onClick={resetForm} style={{ padding: '8px 12px' }}>{editing ? 'Cancel edit' : 'New group'}</button>\n      </div>\n\n      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 24 }}>\n        <section style={{ border: '1px solid #eee', borderRadius: 8, padding: 16 }}>\n          <h2 style={{ marginTop: 0 }}>{editing ? 'Edit group' : 'Create group'}</h2>\n          {errors.length > 0 && (\n            <div style={{ background: '#fff3f3', color: '#b00000', padding: 8, borderRadius: 4, marginBottom: 12 }}>\n              <ul style={{ margin: 0, paddingLeft: 20 }}>\n                {errors.map((err, i) => (\n                  <li key={i}>{err}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n          <form onSubmit={onSubmit}>\n            <div style={{ marginBottom: 8 }}>\n              <label style={{ display: 'block', fontWeight: 600 }}>Name</label>\n              <input\n                required\n                value={form.name}\n                onChange={(e) => setForm((f) => ({ ...f, name: e.target.value, slug: f.slug || slugify(e.target.value) }))}\n                placeholder=\"e.g., Apparel\"\n                style={{ width: '100%', padding: 8, borderRadius: 4, border: '1px solid #ddd' }}\n              />\n            </div>\n            <div style={{ marginBottom: 12 }}>\n              <label style={{ display: 'block', fontWeight: 600 }}>Slug</label>\n              <input\n                value={form.slug}\n                onChange={(e) => setForm((f) => ({ ...f, slug: slugify(e.target.value) }))}\n                placeholder=\"auto-generated from name\"\n                style={{ width: '100%', padding: 8, borderRadius: 4, border: '1px solid #ddd' }}\n              />\n            </div>\n\n            <div style={{ marginBottom: 8, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n              <h3 style={{ margin: 0 }}>Attributes</h3>\n              <button type=\"button\" onClick={addAttributeRow}>+ Add attribute</button>\n            </div>\n\n            {(form.attributes || []).length === 0 && (\n              <p style={{ color: '#777', marginTop: 0 }}>No attributes yet. Add your first attribute.</p>\n            )}\n\n            {(form.attributes || []).map((a, idx) => (\n              <div key={idx} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 140px 1fr 32px', gap: 8, marginBottom: 8 }}>\n                <input\n                  value={a.label}\n                  onChange={(e) => updateAttributeRow(idx, { label: e.target.value })}\n                  placeholder=\"Label (e.g., Color)\"\n                  style={{ padding: 8, borderRadius: 4, border: '1px solid #ddd' }}\n                />\n                <input\n                  value={a.code}\n                  onChange={(e) => updateAttributeRow(idx, { code: slugify(e.target.value) })}\n                  placeholder=\"Code (e.g., color)\"\n                  style={{ padding: 8, borderRadius: 4, border: '1px solid #ddd' }}\n                />\n                <select\n                  value={a.type}\n                  onChange={(e) => updateAttributeRow(idx, { type: e.target.value })}\n                  style={{ padding: 8, borderRadius: 4, border: '1px solid #ddd' }}\n                >\n                  <option value=\"text\">Text</option>\n                  <option value=\"number\">Number</option>\n                  <option value=\"select\">Select</option>\n                </select>\n                {a.type === 'select' ? (\n                  <input\n                    value={(a.options || []).join(', ')}\n                    onChange={(e) => updateAttributeRow(idx, { options: e.target.value.split(',').map((s) => s.trim()).filter(Boolean) })}\n                    placeholder=\"Options (comma separated)\"\n                    style={{ padding: 8, borderRadius: 4, border: '1px solid #ddd' }}\n                  />\n                ) : (\n                  <div style={{ color: '#777', alignSelf: 'center' }}>—</div>\n                )}\n                <button type=\"button\" onClick={() => removeAttributeRow(idx)} title=\"Remove\" style={{ padding: 8 }}>✕</button>\n              </div>\n            ))}\n\n            <div style={{ marginTop: 12, display: 'flex', gap: 8 }}>\n              <button type=\"submit\" style={{ padding: '8px 12px' }}>{editing ? 'Save changes' : 'Create group'}</button>\n              {editing && (\n                <button type=\"button\" onClick={resetForm} style={{ padding: '8px 12px' }}>Cancel</button>\n              )}\n            </div>\n          </form>\n        </section>\n\n        <section>\n          <div style={{ border: '1px solid #eee', borderRadius: 8, overflow: 'hidden' }}>\n            <div style={{ padding: 12, background: '#fafafa', borderBottom: '1px solid #eee' }}>\n              <strong>Groups ({filteredGroups.length})</strong>\n            </div>\n            <div>\n              {filteredGroups.length === 0 && (\n                <div style={{ padding: 16, color: '#777' }}>No groups yet. Create one on the left.</div>\n              )}\n              {filteredGroups.map((g) => (\n                <div key={g.id} style={{ padding: 12, borderBottom: '1px solid #f2f2f2', display: 'grid', gridTemplateColumns: '1fr auto auto', alignItems: 'center', gap: 12 }}>\n                  <div>\n                    <div style={{ fontWeight: 600 }}>{g.name} <span style={{ color: '#999', fontWeight: 400 }}>/ {g.slug}</span></div>\n                    <div style={{ color: '#666', fontSize: 13 }}>\n                      {(g.attributes || []).length} attribute{(g.attributes || []).length === 1 ? '' : 's'}\n                      {(g.attributes || []).length > 0 && (\n                        <>\n                          : {g.attributes.slice(0, 4).map((a) => a.label).join(', ')}{g.attributes.length > 4 ? '…' : ''}\n                        </>\n                      )}\n                    </div>\n                  </div>\n                  <button onClick={() => onEdit(g)} style={{ padding: '6px 10px' }}>Edit</button>\n                  <button onClick={() => onDelete(g.id)} style={{ padding: '6px 10px' }}>Delete</button>\n                </div>\n              ))}\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "pages/tests/attribute-groups.js",
      "content": "import { useEffect, useState } from 'react';\nimport {\n  slugify,\n  upsertGroup,\n  validateGroup,\n  normalizeGroup,\n} from '../../utils/attribute-groups';\n\nfunction runTests() {\n  const results = [];\n\n  function test(name, fn) {\n    try {\n      fn();\n      results.push({ name, pass: true });\n    } catch (e) {\n      results.push({ name, pass: false, error: e && e.message ? e.message : String(e) });\n    }\n  }\n\n  function assert(cond, message) {\n    if (!cond) throw new Error(message || 'Assertion failed');\n  }\n\n  test('slugify basic', () => {\n    assert(slugify('Color & Size') === 'color-size', 'Should slugify special chars');\n    assert(slugify('  \"Brand\" ') === 'brand', 'Should strip quotes and trim');\n  });\n\n  test('validateGroup detects duplicate attribute codes and labels', () => {\n    const g = normalizeGroup({\n      name: 'Apparel',\n      attributes: [\n        { code: 'color', label: 'Color', type: 'select', options: ['Red'] },\n        { code: 'color', label: 'Color', type: 'select', options: ['Blue'] },\n      ],\n    });\n    const v = validateGroup(g);\n    assert(v.ok === false, 'Validation should fail');\n    assert(v.errors.some((e) => e.toLowerCase().includes('duplicate attribute code')), 'Should report duplicate code');\n    assert(v.errors.some((e) => e.toLowerCase().includes('duplicate attribute label')), 'Should report duplicate label');\n  });\n\n  test('upsertGroup inserts and updates preserving createdAt', () => {\n    const g1 = normalizeGroup({ name: 'Electronics', attributes: [{ code: 'brand', label: 'Brand' }] });\n    let arr = upsertGroup([], g1);\n    assert(arr.length === 1, 'Should insert one');\n    const createdAt = arr[0].createdAt;\n\n    const edited = { ...arr[0], name: 'Electronics & Gadgets' };\n    arr = upsertGroup(arr, edited);\n    assert(arr.length === 1, 'Still one after update');\n    assert(arr[0].name === 'Electronics & Gadgets', 'Name updated');\n    assert(arr[0].createdAt === createdAt, 'createdAt preserved');\n  });\n\n  return results;\n}\n\nexport default function AttributeGroupsTestsPage() {\n  const [results, setResults] = useState([]);\n\n  useEffect(() => {\n    setResults(runTests());\n  }, []);\n\n  const passCount = results.filter((r) => r.pass).length;\n\n  return (\n    <div style={{ maxWidth: 800, margin: '0 auto', padding: 16 }}>\n      <h1>Attribute Groups Tests</h1>\n      <p>Lightweight client-side tests for attribute group utilities.</p>\n      <div style={{ marginBottom: 12 }}>\n        <strong>Summary:</strong> {passCount}/{results.length} passed\n      </div>\n      <ul>\n        {results.map((r, i) => (\n          <li key={i} style={{ color: r.pass ? 'green' : 'red' }}>\n            {r.pass ? '✓' : '✗'} {r.name}\n            {!r.pass && r.error ? (\n              <div style={{ color: '#900', fontSize: 13, marginTop: 4 }}>{r.error}</div>\n            ) : null}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n"
    }
  ]
}