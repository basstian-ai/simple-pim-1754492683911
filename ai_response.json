{
  "files": [
    {
      "path": "data/products.json",
      "content": "[\n  {\n    \"id\": \"prd_tee_basic\",\n    \"name\": \"Basic Tee\",\n    \"slug\": \"basic-tee\",\n    \"sku\": \"TEE-BASIC-BLK-S\",\n    \"price\": 19.99,\n    \"currency\": \"USD\",\n    \"status\": \"active\",\n    \"description\": \"A super-soft, classic crewneck tee made from 100% organic cotton.\",\n    \"images\": [\n      \"/images/products/basic-tee/black-front.jpg\",\n      \"/images/products/basic-tee/black-back.jpg\"\n    ],\n    \"categories\": [\"apparel\", \"tops\"],\n    \"brand\": \"SimplePIM\",\n    \"attributes\": {\n      \"material\": \"Organic Cotton\",\n      \"fit\": \"Regular\",\n      \"care\": \"Machine wash cold\"\n    },\n    \"variants\": [\n      { \"sku\": \"TEE-BASIC-BLK-S\", \"options\": { \"color\": \"Black\", \"size\": \"S\" }, \"stock\": 25 },\n      { \"sku\": \"TEE-BASIC-BLK-M\", \"options\": { \"color\": \"Black\", \"size\": \"M\" }, \"stock\": 30 },\n      { \"sku\": \"TEE-BASIC-WHT-M\", \"options\": { \"color\": \"White\", \"size\": \"M\" }, \"stock\": 18 }\n    ]\n  },\n  {\n    \"id\": \"prd_hoodie_zip\",\n    \"name\": \"Zip Hoodie\",\n    \"slug\": \"zip-hoodie\",\n    \"sku\": \"HOOD-ZIP-GRY-M\",\n    \"price\": 49.0,\n    \"currency\": \"USD\",\n    \"status\": \"active\",\n    \"description\": \"Mid-weight zip hoodie with soft fleece interior and reinforced seams.\",\n    \"images\": [\n      \"/images/products/zip-hoodie/grey-front.jpg\",\n      \"/images/products/zip-hoodie/grey-detail.jpg\"\n    ],\n    \"categories\": [\"apparel\", \"outerwear\"],\n    \"brand\": \"SimplePIM\",\n    \"attributes\": {\n      \"material\": \"Cotton/Poly Blend\",\n      \"fit\": \"Relaxed\",\n      \"care\": \"Tumble dry low\"\n    },\n    \"variants\": [\n      { \"sku\": \"HOOD-ZIP-GRY-M\", \"options\": { \"color\": \"Grey\", \"size\": \"M\" }, \"stock\": 12 },\n      { \"sku\": \"HOOD-ZIP-NVY-L\", \"options\": { \"color\": \"Navy\", \"size\": \"L\" }, \"stock\": 8 }\n    ]\n  },\n  {\n    \"id\": \"prd_mug_ceramic\",\n    \"name\": \"Ceramic Mug\",\n    \"slug\": \"ceramic-mug\",\n    \"sku\": \"MUG-CER-12OZ\",\n    \"price\": 12.5,\n    \"currency\": \"USD\",\n    \"status\": \"active\",\n    \"description\": \"12oz ceramic mug with matte finish and ergonomic handle.\",\n    \"images\": [\n      \"/images/products/mug/matte-black.jpg\"\n    ],\n    \"categories\": [\"home\", \"kitchen\"],\n    \"brand\": \"SimplePIM\",\n    \"attributes\": {\n      \"capacity\": \"12oz\",\n      \"dishwasher_safe\": true\n    },\n    \"variants\": [\n      { \"sku\": \"MUG-CER-12OZ\", \"options\": { \"color\": \"Matte Black\" }, \"stock\": 100 },\n      { \"sku\": \"MUG-CER-12OZ-WHT\", \"options\": { \"color\": \"White\" }, \"stock\": 64 }\n    ]\n  },\n  {\n    \"id\": \"prd_cap_snap\",\n    \"name\": \"Snapback Cap\",\n    \"slug\": \"snapback-cap\",\n    \"sku\": \"CAP-SNAP-BLK\",\n    \"price\": 24.0,\n    \"currency\": \"USD\",\n    \"status\": \"active\",\n    \"description\": \"Classic snapback cap with embroidered logo and flat brim.\",\n    \"images\": [\n      \"/images/products/cap/black-front.jpg\"\n    ],\n    \"categories\": [\"apparel\", \"accessories\"],\n    \"brand\": \"SimplePIM\",\n    \"attributes\": {\n      \"material\": \"Wool Blend\",\n      \"adjustable\": true\n    },\n    \"variants\": [\n      { \"sku\": \"CAP-SNAP-BLK\", \"options\": { \"color\": \"Black\" }, \"stock\": 40 },\n      { \"sku\": \"CAP-SNAP-OLV\", \"options\": { \"color\": \"Olive\" }, \"stock\": 22 }\n    ]\n  },\n  {\n    \"id\": \"prd_sock_ancl\",\n    \"name\": \"Ankle Socks (3-pack)\",\n    \"slug\": \"ankle-socks-3-pack\",\n    \"sku\": \"SOCK-ANK-3PK-M\",\n    \"price\": 9.99,\n    \"currency\": \"USD\",\n    \"status\": \"active\",\n    \"description\": \"Breathable ankle socks with arch support and reinforced heel.\",\n    \"images\": [\n      \"/images/products/socks/ankle-3pack.jpg\"\n    ],\n    \"categories\": [\"apparel\", \"socks\"],\n    \"brand\": \"SimplePIM\",\n    \"attributes\": {\n      \"material\": \"Cotton/Spandex\",\n      \"pack_size\": 3\n    },\n    \"variants\": [\n      { \"sku\": \"SOCK-ANK-3PK-M\", \"options\": { \"size\": \"M\" }, \"stock\": 55 },\n      { \"sku\": \"SOCK-ANK-3PK-L\", \"options\": { \"size\": \"L\" }, \"stock\": 47 }\n    ]\n  }\n]\n"
    },
    {
      "path": "lib/store.js",
      "content": "const fs = require('fs');\nconst path = require('path');\n\nfunction loadInitialProducts() {\n  try {\n    const file = path.join(process.cwd(), 'data', 'products.json');\n    const raw = fs.readFileSync(file, 'utf8');\n    const parsed = JSON.parse(raw);\n    if (Array.isArray(parsed)) return parsed;\n    return [];\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction initStore() {\n  if (!global.__PIM_STORE__) {\n    global.__PIM_STORE__ = {\n      products: loadInitialProducts(),\n    };\n  }\n  return global.__PIM_STORE__;\n}\n\nfunction genId() {\n  return 'prd_' + Date.now().toString(36) + Math.random().toString(36).slice(2, 8);\n}\n\nfunction normalizeProduct(input) {\n  const now = new Date().toISOString();\n  return {\n    id: input.id || genId(),\n    name: String(input.name || '').trim(),\n    slug: input.slug || (String(input.name || '').toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')),\n    sku: String(input.sku || '').trim(),\n    price: Number(input.price || 0),\n    currency: input.currency || 'USD',\n    status: input.status || 'active',\n    description: input.description || '',\n    images: Array.isArray(input.images) ? input.images : [],\n    categories: Array.isArray(input.categories) ? input.categories : [],\n    brand: input.brand || 'SimplePIM',\n    attributes: input.attributes || {},\n    variants: Array.isArray(input.variants) ? input.variants : [],\n    createdAt: input.createdAt || now,\n    updatedAt: now,\n  };\n}\n\nmodule.exports = {\n  getProducts() {\n    const store = initStore();\n    return store.products;\n  },\n  addProduct(partial) {\n    const store = initStore();\n    const p = normalizeProduct(partial);\n    store.products.unshift(p);\n    return p;\n  },\n};\n"
    },
    {
      "path": "pages/api/products/index.js",
      "content": "const { getProducts, addProduct } = require('../../../lib/store');\n\nfunction send(res, status, payload) {\n  res.statusCode = status;\n  res.setHeader('Content-Type', 'application/json');\n  res.end(JSON.stringify(payload));\n}\n\nmodule.exports = async function handler(req, res) {\n  const { method } = req;\n\n  if (method === 'OPTIONS') {\n    res.setHeader('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n    return send(res, 204, {});\n  }\n\n  if (method === 'GET') {\n    const items = getProducts();\n    return send(res, 200, { items, count: items.length });\n  }\n\n  if (method === 'POST') {\n    const body = req.body || {};\n    const name = (body.name || '').trim();\n    const sku = (body.sku || '').trim();\n    const price = Number(body.price);\n\n    const errors = [];\n    if (!name) errors.push({ field: 'name', message: 'Name is required' });\n    if (!sku) errors.push({ field: 'sku', message: 'SKU is required' });\n    if (!Number.isFinite(price) || price < 0) errors.push({ field: 'price', message: 'Price must be a non-negative number' });\n\n    if (errors.length) {\n      return send(res, 400, { errors });\n    }\n\n    const created = addProduct({\n      name,\n      sku,\n      price,\n      currency: body.currency || 'USD',\n      description: body.description || '',\n      images: Array.isArray(body.images) ? body.images : [],\n      categories: Array.isArray(body.categories) ? body.categories : [],\n      attributes: body.attributes || {},\n      variants: Array.isArray(body.variants) ? body.variants : [],\n      brand: body.brand || 'SimplePIM',\n      status: body.status || 'active',\n    });\n\n    return send(res, 201, created);\n  }\n\n  res.setHeader('Allow', 'GET,POST,OPTIONS');\n  return send(res, 405, { error: 'Method not allowed' });\n};\n"
    },
    {
      "path": "pages/admin/products.js",
      "content": "import { useEffect, useState } from 'react';\nimport Head from 'next/head';\n\nexport default function AdminProducts() {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [form, setForm] = useState({ name: '', sku: '', price: '' });\n  const [submitting, setSubmitting] = useState(false);\n\n  useEffect(() => {\n    let mounted = true;\n    fetch('/api/products')\n      .then((r) => r.json())\n      .then((data) => {\n        if (!mounted) return;\n        setItems(Array.isArray(data.items) ? data.items : []);\n        setLoading(false);\n      })\n      .catch((e) => {\n        if (!mounted) return;\n        setError('Failed to load products');\n        setLoading(false);\n      });\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  function onChange(e) {\n    const { name, value } = e.target;\n    setForm((f) => ({ ...f, [name]: value }));\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    setSubmitting(true);\n    setError('');\n    try {\n      const res = await fetch('/api/products', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          name: form.name,\n          sku: form.sku,\n          price: parseFloat(form.price),\n        }),\n      });\n      if (!res.ok) {\n        const err = await res.json();\n        throw new Error(err?.errors?.map((x) => x.message).join(', ') || 'Create failed');\n      }\n      const created = await res.json();\n      setItems((list) => [created, ...list]);\n      setForm({ name: '', sku: '', price: '' });\n    } catch (e) {\n      setError(e.message || 'Error');\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <>\n      <Head>\n        <title>Admin • Products</title>\n      </Head>\n      <div style={{ maxWidth: 960, margin: '20px auto', padding: '0 16px' }}>\n        <h1>Products</h1>\n        <section style={{ margin: '16px 0', padding: 16, border: '1px solid #e5e7eb', borderRadius: 8 }}>\n          <h2 style={{ marginTop: 0 }}>Add Product</h2>\n          {error ? (\n            <div style={{ color: '#b91c1c', marginBottom: 8 }}>{error}</div>\n          ) : null}\n          <form onSubmit={onSubmit}>\n            <div style={{ display: 'flex', gap: 12, flexWrap: 'wrap' }}>\n              <div style={{ display: 'flex', flexDirection: 'column' }}>\n                <label htmlFor=\"name\">Name</label>\n                <input id=\"name\" name=\"name\" value={form.name} onChange={onChange} required style={{ padding: 8, minWidth: 240 }} />\n              </div>\n              <div style={{ display: 'flex', flexDirection: 'column' }}>\n                <label htmlFor=\"sku\">SKU</label>\n                <input id=\"sku\" name=\"sku\" value={form.sku} onChange={onChange} required style={{ padding: 8, minWidth: 160 }} />\n              </div>\n              <div style={{ display: 'flex', flexDirection: 'column' }}>\n                <label htmlFor=\"price\">Price</label>\n                <input id=\"price\" name=\"price\" type=\"number\" step=\"0.01\" min=\"0\" value={form.price} onChange={onChange} required style={{ padding: 8, minWidth: 120 }} />\n              </div>\n            </div>\n            <div style={{ marginTop: 12 }}>\n              <button type=\"submit\" disabled={submitting} style={{ padding: '8px 14px' }}>\n                {submitting ? 'Saving…' : 'Create'}\n              </button>\n            </div>\n          </form>\n        </section>\n\n        <section style={{ marginTop: 24 }}>\n          <h2 style={{ marginTop: 0 }}>All Products</h2>\n          {loading ? (\n            <div>Loading…</div>\n          ) : (\n            <div style={{ overflowX: 'auto' }}>\n              <table cellPadding=\"8\" style={{ width: '100%', borderCollapse: 'collapse' }}>\n                <thead>\n                  <tr style={{ textAlign: 'left', borderBottom: '1px solid #e5e7eb' }}>\n                    <th>Name</th>\n                    <th>SKU</th>\n                    <th>Price</th>\n                    <th>Status</th>\n                    <th>Variants</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {items.map((p) => (\n                    <tr key={p.id} style={{ borderBottom: '1px solid #f3f4f6' }}>\n                      <td>{p.name}</td>\n                      <td><code>{p.sku}</code></td>\n                      <td>\n                        {typeof p.price === 'number' ? p.price.toFixed(2) : p.price} {p.currency || 'USD'}\n                      </td>\n                      <td>{p.status || 'active'}</td>\n                      <td>{Array.isArray(p.variants) ? p.variants.length : 0}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </section>\n      </div>\n    </>\n  );\n}\n"
    },
    {
      "path": "tests/api.products.test.js",
      "content": "const assert = require('assert');\nconst handler = require('../pages/api/products').default || require('../pages/api/products');\n\nfunction createMockRes() {\n  const res = {};\n  res.headers = {};\n  res.setHeader = (k, v) => { res.headers[k] = v; };\n  res.end = (data) => { res.ended = true; res.body = data; };\n  res.statusCode = 200;\n  return res;\n}\n\nasync function run() {\n  // GET initial products\n  {\n    const req = { method: 'GET' };\n    const res = createMockRes();\n    await handler(req, res);\n    assert.strictEqual(res.statusCode, 200, 'GET status 200');\n    const payload = JSON.parse(res.body);\n    assert(Array.isArray(payload.items), 'GET returns items array');\n    assert(payload.items.length >= 1, 'seeded products present');\n  }\n\n  // POST create a product\n  let createdId = null;\n  {\n    const req = { method: 'POST', body: { name: 'Test Product', sku: 'TEST-001', price: 5.5 } };\n    const res = createMockRes();\n    await handler(req, res);\n    assert.strictEqual(res.statusCode, 201, 'POST status 201');\n    const payload = JSON.parse(res.body);\n    createdId = payload.id;\n    assert(payload.name === 'Test Product', 'created name matches');\n    assert(payload.sku === 'TEST-001', 'created sku matches');\n    assert.strictEqual(typeof createdId, 'string', 'created id is string');\n  }\n\n  // GET again and ensure count increased\n  {\n    const req = { method: 'GET' };\n    const res = createMockRes();\n    await handler(req, res);\n    const payload = JSON.parse(res.body);\n    const found = payload.items.find((p) => p.id === createdId);\n    assert(found, 'created product is in list');\n  }\n\n  console.log('api.products.test.js ok');\n}\n\nrun().catch((err) => {\n  console.error(err);\n  process.exit(1);\n});\n"
    },
    {
      "path": ".vercelignore",
      "content": "tests\n"
    },
    {
      "path": "commit_message.txt",
      "content": "FEATURE: Add basic Products API with in-memory store, rich sample product data, admin products page for listing/creating products, and a minimal API test script."
    }
  ]
}