{
  "files": [
    {
      "path": "lib/attributeGroups.js",
      "content": "function getAttributeGroups() {\n  return [\n    {\n      id: 'general',\n      name: 'General',\n      attributes: [\n        { code: 'name', label: 'Name', type: 'text', required: true },\n        { code: 'sku', label: 'SKU', type: 'text', required: true },\n        { code: 'description', label: 'Description', type: 'richtext', required: false }\n      ]\n    },\n    {\n      id: 'pricing',\n      name: 'Pricing',\n      attributes: [\n        { code: 'price', label: 'Price', type: 'number', required: true, unit: 'USD' },\n        { code: 'sale_price', label: 'Sale Price', type: 'number', required: false, unit: 'USD' }\n      ]\n    },\n    {\n      id: 'inventory',\n      name: 'Inventory',\n      attributes: [\n        { code: 'stock', label: 'Stock', type: 'integer', required: false },\n        { code: 'availability', label: 'Availability', type: 'select', options: ['in_stock', 'out_of_stock', 'preorder'], required: false }\n      ]\n    }\n  ];\n}\n\nmodule.exports = {\n  getAttributeGroups\n};\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "const { getAttributeGroups } = require('../../lib/attributeGroups');\n\nfunction handler(req, res) {\n  if (req.method === 'GET') {\n    res.status(200).json({ groups: getAttributeGroups() });\n    return;\n  }\n  res.setHeader('Allow', ['GET']);\n  res.status(405).json({ error: 'Method Not Allowed' });\n}\n\nexport default handler;\n"
    },
    {
      "path": "pages/attributes.js",
      "content": "import React, { useEffect, useState } from 'react';\n\nexport default function AttributeGroupsPage() {\n  const [groups, setGroups] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    async function load() {\n      try {\n        const res = await fetch('/api/attribute-groups');\n        if (!res.ok) throw new Error('Failed to load attribute groups');\n        const data = await res.json();\n        if (!cancelled) {\n          setGroups(Array.isArray(data.groups) ? data.groups : []);\n        }\n      } catch (e) {\n        if (!cancelled) setError(e.message || 'Unknown error');\n      } finally {\n        if (!cancelled) setLoading(false);\n      }\n    }\n    load();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  return (\n    <div style={{ padding: 20, maxWidth: 900, margin: '0 auto' }}>\n      <h1>Attribute Groups</h1>\n      <p style={{ color: '#666', marginTop: 0 }}>Predefined product attribute groups commonly used in a PIM.</p>\n      {loading && <p>Loading…</p>}\n      {error && <p style={{ color: 'red' }}>Error: {error}</p>}\n      {!loading && !error && groups.length === 0 && <p>No attribute groups defined.</p>}\n\n      <div>\n        {groups.map((group) => (\n          <section key={group.id} style={{ marginBottom: 16, border: '1px solid #e5e5e5', borderRadius: 8, padding: 16 }}>\n            <h2 style={{ margin: '0 0 8px' }}>{group.name}</h2>\n            {group.description && (\n              <p style={{ marginTop: 0, color: '#666' }}>{group.description}</p>\n            )}\n            <ul style={{ margin: 0, paddingLeft: 20 }}>\n              {Array.isArray(group.attributes) && group.attributes.map((attr) => (\n                <li key={attr.code} style={{ margin: '6px 0' }}>\n                  <strong>{attr.label}</strong> <span style={{ color: '#999' }}>({attr.code})</span>\n                  <span style={{ color: '#333' }}> — {attr.type}</span>\n                  {attr.required ? <span style={{ color: '#c00' }}> • required</span> : null}\n                  {attr.unit ? <span> • unit: {attr.unit}</span> : null}\n                  {Array.isArray(attr.options) && attr.options.length > 0 ? (\n                    <span> • options: {attr.options.join(', ')}</span>\n                  ) : null}\n                </li>\n              ))}\n            </ul>\n          </section>\n        ))}\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/attribute-groups.test.js",
      "content": "const assert = require('assert');\nconst { getAttributeGroups } = require('../lib/attributeGroups');\n\nconst groups = getAttributeGroups();\n\nassert(Array.isArray(groups), 'groups should be an array');\nassert(groups.length >= 1, 'should have at least one group');\n\nfor (const g of groups) {\n  assert(typeof g.id === 'string' && g.id, 'group.id should be a non-empty string');\n  assert(typeof g.name === 'string' && g.name, 'group.name should be a non-empty string');\n  assert(Array.isArray(g.attributes), 'group.attributes should be an array');\n  for (const a of g.attributes) {\n    assert(typeof a.code === 'string' && a.code, 'attribute.code should be a non-empty string');\n    assert(typeof a.label === 'string' && a.label, 'attribute.label should be a non-empty string');\n    assert(typeof a.type === 'string' && a.type, 'attribute.type should be a non-empty string');\n  }\n}\n\nconsole.log('OK: attribute groups structure looks valid');\n"
    }
  ]
}