{
  "commit_message": "feat(tags-stats): add tag statistics API and admin page with tests",
  "diff": "--- a/pages/api/tags/stats.js\n+++ b/pages/api/tags/stats.js\n@@\n+export default function handler(req, res) {\n+  if (req.method !== 'GET') {\n+    res.status(405).json({ error: 'Method not allowed' });\n+    return;\n+  }\n+\n+  try {\n+    // Load products directly from data source\n+    const products = require('../../../data/products.json');\n+    const counts = {};\n+\n+    for (const p of products) {\n+      const tags = Array.isArray(p.tags) ? p.tags : [];\n+      for (const tag of tags) {\n+        counts[tag] = (counts[tag] || 0) + 1;\n+      }\n+    }\n+\n+    const top = Object.entries(counts)\n+      .sort((a, b) => b[1] - a[1])\n+      .slice(0, 25)\n+      .map(([tag, count]) => ({ tag, count }));\n+\n+    res.status(200).json({ counts, top });\n+  } catch (e) {\n+    res.status(500).json({ error: 'Failed to compute tag stats' });\n+  }\n+}\n",
  "files": [
    {
      "path": "pages/api/tags/stats.js",
      "content": "export default function handler(req, res) {\n  if (req.method !== 'GET') {\n    res.status(405).json({ error: 'Method not allowed' });\n    return;\n  }\n\n  try {\n    // Load products directly from data source\n    const products = require('../../../data/products.json');\n    const counts = {};\n\n    for (const p of products) {\n      const tags = Array.isArray(p.tags) ? p.tags : [];\n      for (const tag of tags) {\n        counts[tag] = (counts[tag] || 0) + 1;\n      }\n    }\n\n    const top = Object.entries(counts)\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 25)\n      .map(([tag, count]) => ({ tag, count }));\n\n    res.status(200).json({ counts, top });\n  } catch (e) {\n    res.status(500).json({ error: 'Failed to compute tag stats' });\n  }\n}\n"
    },
    {
      "path": "pages/admin/tags-stats.js",
      "content": "import React, { useEffect, useState } from 'react';\nimport Layout from '../../components/Layout';\n\nconst TagsStatsPage = () => {\n  const [data, setData] = useState({ counts: {}, top: [] });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    const load = async () => {\n      try {\n        const res = await fetch('/api/tags/stats');\n        const json = await res.json();\n        if (!cancelled) {\n          setData(json);\n          setLoading(false);\n        }\n      } catch (e) {\n        if (!cancelled) {\n          setError('Failed to load tag stats');\n          setLoading(false);\n        }\n      }\n    };\n    load();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  return (\n    <Layout>\n      <div style={{ maxWidth: 900, margin: '0 auto', padding: '1rem' }}>\n        <h1 style={{ marginBottom: '0.5rem' }}>Tag Stats</h1>\n        <p style={{ color: '#666', marginTop: 0 }}>\n          Unique tags: {Object.keys(data.counts || {}).length}\n        </p>\n        {loading && <div>Loadingâ€¦</div>}\n        {error && <div role=\"alert\" style={{ color: 'crimson' }}>{error}</div>}\n        {!loading && !error && (\n          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(180px, 1fr))', gap: '0.5rem' }}>\n            {(data.top || []).map((t) => (\n              <div key={t.tag} style={{ border: '1px solid #eee', borderRadius: 8, padding: '0.5rem 0.75rem', background: '#fafafa' }}>\n                <div style={{ fontWeight: 600 }}>{t.tag}</div>\n                <div style={{ color: '#555', fontSize: 12 }}>{t.count} product{t.count === 1 ? '' : 's'}</div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </Layout>\n  );\n};\n\nexport default TagsStatsPage;\n"
    },
    {
      "path": "tests/api-tags-stats.test.js",
      "content": "const handler = require('../pages/api/tags/stats').default || require('../pages/api/tags/stats');\n\nfunction createMocks({ method = 'GET', body } = {}) {\n  const req = { method, body };\n  const res = {\n    statusCode: 0,\n    _json: null,\n    status(code) {\n      this.statusCode = code;\n      return this;\n    },\n    json(payload) {\n      this._json = payload;\n      return this;\n    },\n  };\n  return { req, res };\n}\n\ndescribe('API /api/tags/stats', () => {\n  test('returns counts and top arrays', () => {\n    const { req, res } = createMocks({ method: 'GET' });\n    handler(req, res);\n    expect(res.statusCode).toBe(200);\n    expect(res._json).toHaveProperty('counts');\n    expect(typeof res._json.counts).toBe('object');\n    expect(Array.isArray(res._json.top)).toBe(true);\n    // Should have at least one tag in typical sample data\n    expect(Object.keys(res._json.counts).length).toBeGreaterThan(0);\n  });\n\n  test('405 on non-GET', () => {\n    const { req, res } = createMocks({ method: 'POST' });\n    handler(req, res);\n    expect(res.statusCode).toBe(405);\n  });\n});\n"
    },
    {
      "path": "tests/tagsStatsPage.test.js",
      "content": "import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport TagsStatsPage from '../pages/admin/tags-stats';\n\ndescribe('Admin Tag Stats Page', () => {\n  beforeEach(() => {\n    global.fetch = jest.fn(() =>\n      Promise.resolve({\n        json: () =>\n          Promise.resolve({ counts: { shoes: 3, sale: 2 }, top: [{ tag: 'shoes', count: 3 }, { tag: 'sale', count: 2 }] }),\n      })\n    );\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  test('renders tag stats heading and items', async () => {\n    render(<TagsStatsPage />);\n    expect(screen.getByText('Tag Stats')).toBeInTheDocument();\n\n    await waitFor(() => {\n      expect(screen.getByText('shoes')).toBeInTheDocument();\n      expect(screen.getByText(/3 products?/)).toBeInTheDocument();\n    });\n  });\n});\n"
    }
  ]
}