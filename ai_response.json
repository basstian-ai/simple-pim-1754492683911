{
  "files": [
    {
      "path": "lib/attributeGroupsStore.js",
      "content": "const fs = require('fs');\nconst path = require('path');\n\nfunction getDataFilePath() {\n  const custom = process.env.ATTRIBUTE_GROUPS_PATH;\n  if (custom) return path.resolve(custom);\n  return path.join(process.cwd(), 'data', 'attribute-groups.json');\n}\n\nfunction ensureDirExists(filePath) {\n  const dir = path.dirname(filePath);\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir, { recursive: true });\n  }\n}\n\nfunction loadData() {\n  const file = getDataFilePath();\n  try {\n    const raw = fs.readFileSync(file, 'utf8');\n    const json = JSON.parse(raw);\n    if (!json || typeof json !== 'object' || !Array.isArray(json.groups)) {\n      return { groups: [] };\n    }\n    return json;\n  } catch (e) {\n    return { groups: [] };\n  }\n}\n\nfunction saveData(data) {\n  const file = getDataFilePath();\n  ensureDirExists(file);\n  fs.writeFileSync(file, JSON.stringify(data, null, 2), 'utf8');\n}\n\nfunction slugify(input) {\n  return String(input)\n    .toLowerCase()\n    .trim()\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/^-+|-+$/g, '')\n    .slice(0, 60);\n}\n\nfunction genId() {\n  const rnd = Math.random().toString(36).slice(2, 8);\n  return `${Date.now().toString(36)}_${rnd}`;\n}\n\nfunction listGroups() {\n  const data = loadData();\n  return data.groups.slice();\n}\n\nfunction findByCode(code) {\n  const data = loadData();\n  return data.groups.find((g) => g.code === code) || null;\n}\n\nfunction createGroup({ name }) {\n  if (!name || typeof name !== 'string' || !name.trim()) {\n    const err = new Error('Name is required');\n    err.statusCode = 400;\n    throw err;\n  }\n  const data = loadData();\n  let codeBase = slugify(name);\n  if (!codeBase) codeBase = 'group';\n  let code = codeBase;\n  let i = 2;\n  while (data.groups.some((g) => g.code === code)) {\n    code = `${codeBase}-${i++}`;\n  }\n  const group = { id: genId(), name: name.trim(), code, attributes: [] };\n  data.groups.push(group);\n  saveData(data);\n  return group;\n}\n\nfunction getGroup(id) {\n  const data = loadData();\n  return data.groups.find((g) => g.id === id) || null;\n}\n\nfunction updateGroup(id, patch) {\n  const data = loadData();\n  const idx = data.groups.findIndex((g) => g.id === id);\n  if (idx === -1) return null;\n  const current = data.groups[idx];\n  const updated = { ...current };\n  if (typeof patch.name === 'string' && patch.name.trim()) {\n    updated.name = patch.name.trim();\n    // keep code stable to avoid breaking references\n  }\n  if (Array.isArray(patch.attributes)) {\n    // ensure attributes have minimal shape { code, label }\n    const attrs = [];\n    for (const a of patch.attributes) {\n      if (!a) continue;\n      const code = slugify(a.code || a.label || 'attr');\n      const label = (a.label || a.code || '').toString().trim();\n      if (!code || !label) continue;\n      attrs.push({ code, label });\n    }\n    updated.attributes = attrs;\n  }\n  data.groups[idx] = updated;\n  saveData(data);\n  return updated;\n}\n\nfunction deleteGroup(id) {\n  const data = loadData();\n  const before = data.groups.length;\n  data.groups = data.groups.filter((g) => g.id !== id);\n  if (data.groups.length === before) return false;\n  saveData(data);\n  return true;\n}\n\nmodule.exports = {\n  listGroups,\n  createGroup,\n  getGroup,\n  updateGroup,\n  deleteGroup,\n  findByCode,\n  getDataFilePath,\n};\n"
    },
    {
      "path": "pages/api/attribute-groups/index.js",
      "content": "import { listGroups, createGroup } from '../../../lib/attributeGroupsStore.js';\n\nexport default async function handler(req, res) {\n  try {\n    if (req.method === 'GET') {\n      const groups = listGroups().sort((a, b) => a.name.localeCompare(b.name));\n      res.status(200).json({ groups });\n      return;\n    }\n\n    if (req.method === 'POST') {\n      const { name } = req.body || {};\n      const created = createGroup({ name });\n      res.status(201).json(created);\n      return;\n    }\n\n    res.setHeader('Allow', 'GET,POST');\n    res.status(405).json({ error: 'Method Not Allowed' });\n  } catch (e) {\n    const status = e.statusCode || 500;\n    res.status(status).json({ error: e.message || 'Server error' });\n  }\n}\n"
    },
    {
      "path": "pages/api/attribute-groups/[id].js",
      "content": "import { getGroup, updateGroup, deleteGroup } from '../../../lib/attributeGroupsStore.js';\n\nexport default async function handler(req, res) {\n  const { id } = req.query;\n  try {\n    if (req.method === 'GET') {\n      const group = getGroup(id);\n      if (!group) return res.status(404).json({ error: 'Not found' });\n      return res.status(200).json(group);\n    }\n\n    if (req.method === 'PUT' || req.method === 'PATCH') {\n      const patch = req.body || {};\n      const updated = updateGroup(id, patch);\n      if (!updated) return res.status(404).json({ error: 'Not found' });\n      return res.status(200).json(updated);\n    }\n\n    if (req.method === 'DELETE') {\n      const ok = deleteGroup(id);\n      if (!ok) return res.status(404).json({ error: 'Not found' });\n      return res.status(204).end();\n    }\n\n    res.setHeader('Allow', 'GET,PUT,PATCH,DELETE');\n    return res.status(405).json({ error: 'Method Not Allowed' });\n  } catch (e) {\n    const status = e.statusCode || 500;\n    res.status(status).json({ error: e.message || 'Server error' });\n  }\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import { useEffect, useState } from 'react';\n\nexport default function AttributeGroupsAdmin() {\n  const [groups, setGroups] = useState([]);\n  const [name, setName] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  async function refresh() {\n    try {\n      setLoading(true);\n      setError('');\n      const res = await fetch('/api/attribute-groups');\n      const json = await res.json();\n      setGroups(json.groups || []);\n    } catch (e) {\n      setError('Failed to load');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    refresh();\n  }, []);\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    if (!name.trim()) return;\n    setLoading(true);\n    setError('');\n    try {\n      const res = await fetch('/api/attribute-groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name }),\n      });\n      if (!res.ok) {\n        const j = await res.json().catch(() => ({}));\n        throw new Error(j.error || 'Failed to create');\n      }\n      setName('');\n      await refresh();\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function onDelete(id) {\n    if (!confirm('Delete this group?')) return;\n    setLoading(true);\n    setError('');\n    try {\n      const res = await fetch(`/api/attribute-groups/${id}`, { method: 'DELETE' });\n      if (!res.ok && res.status !== 204) {\n        const j = await res.json().catch(() => ({}));\n        throw new Error(j.error || 'Failed to delete');\n      }\n      await refresh();\n    } catch (e) {\n      setError(e.message);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <div style={{ maxWidth: 720, margin: '20px auto', padding: 16 }}>\n      <h1>Attribute Groups</h1>\n      <p style={{ color: '#555' }}>Create and manage attribute groups to organize product attributes.</p>\n\n      <form onSubmit={onSubmit} style={{ display: 'flex', gap: 8, marginBottom: 16 }}>\n        <input\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          placeholder=\"New group name (e.g. Specifications)\"\n          style={{ flex: 1, padding: 8 }}\n        />\n        <button disabled={loading || !name.trim()} type=\"submit\">Add</button>\n      </form>\n\n      {error ? <div style={{ color: 'red', marginBottom: 8 }}>{error}</div> : null}\n\n      {loading ? <div>Loading…</div> : null}\n\n      <ul style={{ listStyle: 'none', padding: 0 }}>\n        {groups.map((g) => (\n          <li key={g.id} style={{ border: '1px solid #e3e3e3', padding: 12, borderRadius: 6, marginBottom: 8, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <div>\n              <div style={{ fontWeight: 600 }}>{g.name}</div>\n              <div style={{ color: '#777', fontSize: 12 }}>code: {g.code} • attributes: {g.attributes?.length || 0}</div>\n            </div>\n            <div style={{ display: 'flex', gap: 8 }}>\n              <button onClick={() => onDelete(g.id)} style={{ background: '#fff', border: '1px solid #d33', color: '#d33' }}>Delete</button>\n            </div>\n          </li>\n        ))}\n      </ul>\n\n      {groups.length === 0 && !loading ? (\n        <div style={{ color: '#666' }}>No attribute groups yet. Create your first one above.</div>\n      ) : null}\n    </div>\n  );\n}\n"
    },
    {
      "path": "data/attribute-groups.json",
      "content": "{\n  \"groups\": []\n}\n"
    },
    {
      "path": "tests/attribute-groups.test.js",
      "content": "const assert = require('assert');\nconst os = require('os');\nconst path = require('path');\nconst fs = require('fs');\n\nprocess.env.ATTRIBUTE_GROUPS_PATH = path.join(os.tmpdir(), `simple-pim-attr-groups-test-${Date.now()}.json`);\n\nconst indexHandler = require('../pages/api/attribute-groups/index.js').default;\nconst idHandler = require('../pages/api/attribute-groups/[id].js').default;\n\nfunction mockReq({ method = 'GET', query = {}, body = undefined } = {}) {\n  return { method, query, body, headers: {} };\n}\n\nfunction mockRes() {\n  const res = {};\n  res.statusCode = 200;\n  res.headers = {};\n  res.body = undefined;\n  res.setHeader = (k, v) => { res.headers[k] = v; };\n  res.status = (code) => { res.statusCode = code; return res; };\n  res.json = (data) => { res.body = data; return res; };\n  res.end = (data) => { res.body = data; return res; };\n  return res;\n}\n\nasync function run() {\n  // Ensure file doesn't exist at start\n  try { fs.unlinkSync(process.env.ATTRIBUTE_GROUPS_PATH); } catch (_) {}\n\n  // GET should return empty list\n  let req = mockReq({ method: 'GET' });\n  let res = mockRes();\n  await indexHandler(req, res);\n  assert.strictEqual(res.statusCode, 200);\n  assert.ok(Array.isArray(res.body.groups));\n  assert.strictEqual(res.body.groups.length, 0);\n\n  // POST create one\n  req = mockReq({ method: 'POST', body: { name: 'Specifications' } });\n  res = mockRes();\n  await indexHandler(req, res);\n  assert.strictEqual(res.statusCode, 201);\n  assert.ok(res.body && res.body.id);\n  const createdId = res.body.id;\n\n  // GET should now include it\n  req = mockReq({ method: 'GET' });\n  res = mockRes();\n  await indexHandler(req, res);\n  assert.strictEqual(res.statusCode, 200);\n  assert.strictEqual(res.body.groups.length, 1);\n  assert.strictEqual(res.body.groups[0].name, 'Specifications');\n\n  // DELETE it\n  req = mockReq({ method: 'DELETE', query: { id: createdId } });\n  res = mockRes();\n  await idHandler(req, res);\n  assert.strictEqual(res.statusCode, 204);\n\n  // GET again empty\n  req = mockReq({ method: 'GET' });\n  res = mockRes();\n  await indexHandler(req, res);\n  assert.strictEqual(res.statusCode, 200);\n  assert.strictEqual(res.body.groups.length, 0);\n\n  console.log('PASS attribute-groups API');\n}\n\nrun().catch((e) => {\n  console.error('FAIL attribute-groups API');\n  console.error(e);\n  process.exit(1);\n});\n"
    }
  ],
  "commit_message": "FEATURE: Add Attribute Groups (API + simple admin UI) with basic test. Provides GET/POST /api/attribute-groups, GET/PUT/DELETE /api/attribute-groups/[id], admin page to list/create/delete groups, and a small test script."
}