{
  "files": [
    {
      "path": "lib/attributeGroups.js",
      "content": "export function getAttributeGroups() {\n  // Static demo data for attribute groups in the PIM\n  return [\n    {\n      id: 'core',\n      name: 'Core',\n      description: 'Core product information used across the catalog.',\n      attributes: [\n        { code: 'name', type: 'text', label: 'Name', required: true },\n        { code: 'sku', type: 'text', label: 'SKU', required: true },\n        { code: 'description', type: 'richtext', label: 'Description', required: false },\n        { code: 'status', type: 'select', label: 'Status', options: ['draft', 'active', 'archived'], required: true }\n      ]\n    },\n    {\n      id: 'pricing',\n      name: 'Pricing',\n      description: 'Prices, taxes and related commerce settings.',\n      attributes: [\n        { code: 'price', type: 'number', label: 'Price', unit: 'USD', required: true },\n        { code: 'compare_at_price', type: 'number', label: 'Compare at Price', unit: 'USD', required: false },\n        { code: 'tax_class', type: 'select', label: 'Tax Class', options: ['standard', 'reduced', 'exempt'], required: true }\n      ]\n    },\n    {\n      id: 'inventory',\n      name: 'Inventory',\n      description: 'Stock management fields for fulfillment.',\n      attributes: [\n        { code: 'stock', type: 'number', label: 'Stock Qty', required: false },\n        { code: 'manage_stock', type: 'boolean', label: 'Manage Stock', required: false },\n        { code: 'backorders', type: 'select', label: 'Backorders', options: ['no', 'allow', 'notify'], required: false }\n      ]\n    }\n  ];\n}\n\nexport function findAttributeGroup(id) {\n  return getAttributeGroups().find((g) => g.id === id) || null;\n}\n\nexport function listAllAttributesFlat() {\n  const groups = getAttributeGroups();\n  return groups.flatMap((g) => g.attributes.map((a) => ({ groupId: g.id, groupName: g.name, ...a })));\n}\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "import { getAttributeGroups, findAttributeGroup } from '../../lib/attributeGroups';\n\nexport default function handler(req, res) {\n  if (req.method === 'GET') {\n    const { id } = req.query || {};\n    if (id) {\n      const group = findAttributeGroup(String(id));\n      if (!group) {\n        res.status(404).json({ error: 'Attribute group not found' });\n        return;\n      }\n      res.status(200).json({ group });\n      return;\n    }\n    const groups = getAttributeGroups();\n    res.status(200).json({ groups, count: groups.length });\n    return;\n  }\n\n  res.setHeader('Allow', ['GET']);\n  res.status(405).json({ error: 'Method Not Allowed' });\n}\n"
    },
    {
      "path": "components/AttributeGroupList.js",
      "content": "import React from 'react';\n\nexport default function AttributeGroupList({ groups }) {\n  if (!groups || groups.length === 0) {\n    return <p>No attribute groups defined.</p>;\n  }\n\n  return (\n    <div>\n      {groups.map((group) => (\n        <div key={group.id} style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: 16, marginBottom: 16 }}>\n          <div style={{ display: 'flex', alignItems: 'baseline', justifyContent: 'space-between' }}>\n            <h2 style={{ margin: 0 }}>{group.name}</h2>\n            <code style={{ color: '#6b7280' }}>{group.id}</code>\n          </div>\n          {group.description ? (\n            <p style={{ color: '#374151', marginTop: 8 }}>{group.description}</p>\n          ) : null}\n          <ul style={{ listStyle: 'none', paddingLeft: 0, marginTop: 12 }}>\n            {group.attributes.map((attr) => (\n              <li key={attr.code} style={{ padding: '8px 0', borderTop: '1px solid #f3f4f6' }}>\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <div>\n                    <strong>{attr.label}</strong>\n                    <span style={{ marginLeft: 8, color: '#6b7280' }}>({attr.code})</span>\n                  </div>\n                  <span style={{ fontSize: 12, padding: '2px 6px', background: '#eef2ff', color: '#3730a3', borderRadius: 6 }}>\n                    {attr.type}\n                  </span>\n                </div>\n                {Array.isArray(attr.options) && attr.options.length > 0 ? (\n                  <div style={{ marginTop: 6, color: '#374151' }}>\n                    Options: {attr.options.join(', ')}\n                  </div>\n                ) : null}\n                {attr.unit ? (\n                  <div style={{ marginTop: 6, color: '#374151' }}>Unit: {attr.unit}</div>\n                ) : null}\n                {attr.required ? (\n                  <div style={{ marginTop: 6, color: '#059669' }}>Required</div>\n                ) : (\n                  <div style={{ marginTop: 6, color: '#6b7280' }}>Optional</div>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n}\n"
    },
    {
      "path": "pages/attribute-groups.js",
      "content": "import React from 'react';\nimport AttributeGroupList from '../components/AttributeGroupList';\nimport { getAttributeGroups } from '../lib/attributeGroups';\n\nexport default function AttributeGroupsPage({ groups }) {\n  return (\n    <div style={{ maxWidth: 900, padding: 24, margin: '0 auto' }}>\n      <header style={{ marginBottom: 24 }}>\n        <h1 style={{ margin: 0 }}>Attribute Groups</h1>\n        <p style={{ color: '#4b5563' }}>\n          Organize product attributes into reusable groups. This helps keep your catalog consistent and manageable.\n        </p>\n      </header>\n      <AttributeGroupList groups={groups} />\n    </div>\n  );\n}\n\nexport async function getServerSideProps() {\n  // Server-side render from shared lib to avoid cross-origin fetch issues\n  const groups = getAttributeGroups();\n  return { props: { groups } };\n}\n"
    },
    {
      "path": "tests/attributeGroups.test.js",
      "content": "/*\n  Minimal test that can be run with: `node tests/attributeGroups.test.js`\n  This avoids introducing new dev dependencies while still asserting core behavior.\n*/\n\nconst assert = require('assert');\nconst { getAttributeGroups, findAttributeGroup, listAllAttributesFlat } = require('../lib/attributeGroups');\n\n(function run() {\n  const groups = getAttributeGroups();\n  assert(Array.isArray(groups), 'getAttributeGroups should return an array');\n  assert(groups.length >= 1, 'should expose at least one attribute group');\n  const core = findAttributeGroup('core');\n  assert(core && core.name === 'Core', 'findAttributeGroup should resolve by id');\n  assert(Array.isArray(core.attributes) && core.attributes.some(a => a.code === 'name'), 'core group should contain name attribute');\n  const flat = listAllAttributesFlat();\n  assert(flat.length >= core.attributes.length, 'flattened list should be >= largest group');\n  assert(flat.every(a => a.groupId && a.code && a.type), 'flattened attributes should expose basic fields');\n  console.log('OK attributeGroups.test.js');\n})();\n"
    }
  ]
}