{
  "commit_message": "feature: add richer sample product generator with attributes and variants; expose generated sample products; add tests",
  "files": [
    {
      "path": "lib/sampleProductsGenerator.js",
      "content": "/*\n Rich sample product generator for the PIM.\n Produces deterministic products with attributes and optional variants so the UI\n and tests can exercise attribute/variant related behavior.\n*/\n\nconst COLORS = ['Red', 'Blue', 'Green', 'Black', 'White'];\nconst SIZES = ['XS', 'S', 'M', 'L', 'XL'];\nconst MATERIALS = ['Cotton', 'Polyester', 'Wool'];\nconst TAGS = ['new', 'sale', 'popular', 'limited', 'clearance'];\nconst ADJECTIVES = ['Classic', 'Modern', 'Vintage', 'Minimal', 'Sport'];\nconst NOUNS = ['T-Shirt', 'Sneakers', 'Jacket', 'Backpack', 'Hat'];\n\nfunction pick(arr, i) {\n  return arr[i % arr.length];\n}\n\nfunction deterministicPrice(i) {\n  // Return a price that varies but is deterministic\n  return Number((9.99 + (i % 50) * 1.25).toFixed(2));\n}\n\nfunction makeBaseProduct(i) {\n  const sku = `SKU${1000 + i}`;\n  const name = `${pick(ADJECTIVES, i)} ${pick(NOUNS, i)}`;\n  const description = `A ${name} with great quality and design.`;\n  const tags = [pick(TAGS, i), pick(TAGS, i + 1)].filter((v, idx, arr) => arr.indexOf(v) === idx);\n  const price = deterministicPrice(i);\n  const inStock = i % 3 !== 0;\n\n  const attributes = {\n    color: pick(COLORS, i),\n    size: pick(SIZES, i + 1),\n    material: pick(MATERIALS, i + 2),\n  };\n\n  const images = [\n    `https://via.placeholder.com/320x320.png?text=${encodeURIComponent(name)}`,\n  ];\n\n  return {\n    sku,\n    name,\n    description,\n    tags,\n    price,\n    inStock,\n    attributes,\n    images,\n  };\n}\n\nfunction makeVariantsFor(base, count, startIndex) {\n  const variants = [];\n  for (let j = 0; j < count; j++) {\n    const vIndex = startIndex + j;\n    // tweak attributes slightly per variant\n    const attributes = {\n      ...base.attributes,\n      color: pick(COLORS, vIndex + 1),\n      size: pick(SIZES, vIndex + 2),\n    };\n    const sku = `${base.sku}-V${j + 1}`;\n    const name = `${base.name} â€” Variant ${j + 1}`;\n    const price = Number((base.price + (j * 0.5)).toFixed(2));\n    const inStock = (vIndex % 2) === 0;\n    variants.push({ sku, name, attributes, price, inStock, images: base.images });\n  }\n  return variants;\n}\n\nexport default function generateSampleProducts(count = 50) {\n  const products = [];\n  let globalVariantCounter = 0;\n  for (let i = 0; i < count; i++) {\n    const base = makeBaseProduct(i);\n\n    // For about 1/4 of products, generate variants (2-4 variants)\n    let variants = [];\n    if (i % 4 === 0) {\n      const vc = 2 + (i % 3); // 2-4 variants\n      variants = makeVariantsFor(base, vc, globalVariantCounter);\n      globalVariantCounter += vc;\n    }\n\n    products.push({ ...base, variants });\n  }\n  return products;\n}\n"
    },
    {
      "path": "lib/sampleProducts.js",
      "content": "import generateSampleProducts from './sampleProductsGenerator';\n\n// Export a default batch of sample products used across the app and tests.\n// Keeping this file as a thin wrapper allows other code to `import sampleProducts`\n// without having to know about the generator.\n\nconst sampleProducts = generateSampleProducts(80);\n\nexport default sampleProducts;\nexport { generateSampleProducts };\n"
    },
    {
      "path": "tests/sampleProductsGenerator.test.js",
      "content": "import generateSampleProducts from '../lib/sampleProductsGenerator';\n\ndescribe('generateSampleProducts', () => {\n  test('generates requested number of products', () => {\n    const list = generateSampleProducts(20);\n    expect(Array.isArray(list)).toBe(true);\n    expect(list).toHaveLength(20);\n  });\n\n  test('each product has attributes object with color and size', () => {\n    const list = generateSampleProducts(12);\n    for (const p of list) {\n      expect(p).toHaveProperty('attributes');\n      expect(typeof p.attributes).toBe('object');\n      expect(p.attributes).toHaveProperty('color');\n      expect(p.attributes).toHaveProperty('size');\n    }\n  });\n\n  test('some products contain variants with their own skus and attributes', () => {\n    const list = generateSampleProducts(40);\n    const withVariants = list.filter((p) => Array.isArray(p.variants) && p.variants.length > 0);\n    expect(withVariants.length).toBeGreaterThan(0);\n\n    // Check variant shape\n    const variant = withVariants[0].variants[0];\n    expect(variant).toHaveProperty('sku');\n    expect(variant).toHaveProperty('attributes');\n    expect(variant.attributes).toHaveProperty('color');\n  });\n});\n"
    }
  ]
}