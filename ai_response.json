{
  "files": [
    {
      "path": "lib/attributeSuggest.js",
      "content": "/*\n  Simple attribute suggestion engine for PIM\n  Heuristically extracts attributes such as Color, Size, Material, Country of Origin, Weight, Dimensions, Brand, Gender, Age Group\n*/\n\nconst COLORS = [\n  'black','white','red','green','blue','yellow','purple','violet','orange','pink','brown','grey','gray',\n  'beige','ivory','navy','teal','turquoise','maroon','gold','silver','bronze','cream','khaki'\n];\n\nconst MATERIALS = [\n  'cotton','polyester','leather','wool','silk','linen','cashmere','denim','nylon','acrylic','spandex','elastane',\n  'rubber','plastic','wood','bamboo','steel','stainless steel','iron','aluminum','aluminium','glass','ceramic'\n];\n\nconst COUNTRIES = [\n  'china','usa','united states','canada','mexico','germany','france','italy','spain','portugal','poland','uk','united kingdom',\n  'japan','south korea','korea','india','vietnam','thailand','indonesia','turkey','brazil','australia','netherlands','sweden','denmark',\n  'norway','finland','switzerland','austria','czech republic','romania','hungary'\n];\n\nconst SIZES = ['xxs','xs','s','m','l','xl','xxl','xxxl'];\n\nfunction uniq(arr, key) {\n  const seen = new Set();\n  const out = [];\n  for (const item of arr) {\n    const k = key ? key(item) : JSON.stringify(item);\n    if (!seen.has(k)) {\n      seen.add(k);\n      out.push(item);\n    }\n  }\n  return out;\n}\n\nfunction titleCase(s) {\n  return s.replace(/(^|\\s)\\S/g, (t) => t.toUpperCase());\n}\n\nfunction normalizeUnit(unit) {\n  const m = unit.toLowerCase();\n  if (m === 'lbs') return 'lb';\n  if (m === 'kgs') return 'kg';\n  if (m === 'cms') return 'cm';\n  if (m === 'ins' || m === 'inches') return 'in';\n  return m;\n}\n\nfunction parseNumber(n) {\n  const x = parseFloat(n.replace(/,/g, '.'));\n  return isNaN(x) ? null : x;\n}\n\nfunction suggestAttributes(text) {\n  const input = (text || '').toString();\n  const lower = input.toLowerCase();\n  const suggestions = [];\n\n  // Color by explicit color token or pattern \"color: X\"\n  const colorPattern = /color\\s*[:\\-]\\s*([a-zA-Z\\s]+)/i;\n  const colorMatch = input.match(colorPattern);\n  if (colorMatch) {\n    const raw = colorMatch[1].trim().split(/[,/]| and /i)[0].trim();\n    if (raw) {\n      suggestions.push({ group: 'Color', name: 'Color', value: titleCase(raw), confidence: 0.9, source: 'pattern' });\n    }\n  }\n  for (const c of COLORS) {\n    if (new RegExp(`\\\\b${c}\\\\b`, 'i').test(input)) {\n      suggestions.push({ group: 'Color', name: 'Color', value: titleCase(c), confidence: 0.7, source: 'keyword' });\n    }\n  }\n\n  // Size tokens: S/M/L/XL, numeric sizes, and pattern \"size: X\"\n  const sizePattern = /size\\s*[:\\-]\\s*([a-z0-9\\s+\\/.-]+)/i;\n  const sizeMatch = input.match(sizePattern);\n  if (sizeMatch) {\n    const raw = sizeMatch[1].trim().split(/[.,]/)[0].trim();\n    if (raw) {\n      suggestions.push({ group: 'Size', name: 'Size', value: raw.toUpperCase(), confidence: 0.9, source: 'pattern' });\n    }\n  }\n  for (const s of SIZES) {\n    if (new RegExp(`\\\\b${s}\\\\b`, 'i').test(lower)) {\n      suggestions.push({ group: 'Size', name: 'Size', value: s.toUpperCase(), confidence: 0.7, source: 'keyword' });\n    }\n  }\n  // Numeric sizes like 28, 30, 32 for waist or shoe sizes 6-13\n  const numSizeMatches = lower.match(/\\b([2-5][0-9]|[6-9]|1[0-3])\\b(?=\\s*(?:eu|us|uk|waist|shoe|size))?/g);\n  if (numSizeMatches) {\n    for (const n of numSizeMatches.slice(0, 3)) {\n      suggestions.push({ group: 'Size', name: 'Size', value: n.toString(), confidence: 0.55, source: 'numeric' });\n    }\n  }\n\n  // Material by pattern and keywords\n  const materialPattern = /material\\s*[:\\-]\\s*([^.,\\n]+)/i;\n  const materialMatch = input.match(materialPattern);\n  if (materialMatch) {\n    const raw = materialMatch[1].trim();\n    suggestions.push({ group: 'Material', name: 'Material', value: titleCase(raw), confidence: 0.9, source: 'pattern' });\n  }\n  for (const m of MATERIALS) {\n    if (new RegExp(`\\\\b${m}\\\\b`, 'i').test(lower)) {\n      suggestions.push({ group: 'Material', name: 'Material', value: titleCase(m), confidence: 0.75, source: 'keyword' });\n    }\n  }\n\n  // Country of Origin: pattern and keyword fallback\n  const madeInPattern = /made in\\s+([a-zA-Z\\s]+)/i;\n  const madeInMatch = input.match(madeInPattern);\n  if (madeInMatch) {\n    const raw = madeInMatch[1].trim().replace(/[.,].*$/, '');\n    suggestions.push({ group: 'Country of Origin', name: 'Country of Origin', value: titleCase(raw), confidence: 0.95, source: 'pattern' });\n  } else {\n    for (const c of COUNTRIES) {\n      if (new RegExp(`\\\\b${c}\\\\b`, 'i').test(lower)) {\n        suggestions.push({ group: 'Country of Origin', name: 'Country of Origin', value: titleCase(c), confidence: 0.6, source: 'keyword' });\n      }\n    }\n  }\n\n  // Weight: e.g., 180 g, 0.5 kg, 2 lb, 12 oz\n  const weightMatches = [...lower.matchAll(/(\\d+[\\.,]?\\d*)\\s*(kg|g|lb|lbs|oz)/g)];\n  for (const m of weightMatches.slice(0, 2)) {\n    const val = parseNumber(m[1]);\n    const unit = normalizeUnit(m[2]);\n    if (val !== null) {\n      suggestions.push({ group: 'Weight', name: 'Weight', value: `${val} ${unit}`, confidence: 0.9, source: 'pattern' });\n    }\n  }\n\n  // Dimensions: 30 x 20 x 2 cm, 12x8 in, 200x100mm\n  const dimMatches = [...lower.matchAll(/(\\d+[\\.,]?\\d*)\\s*x\\s*(\\d+[\\.,]?\\d*)(?:\\s*x\\s*(\\d+[\\.,]?\\d*))?\\s*(mm|cm|in|inch|inches)?/g)];\n  for (const d of dimMatches.slice(0, 2)) {\n    const a = parseNumber(d[1]);\n    const b = parseNumber(d[2]);\n    const c = d[3] ? parseNumber(d[3]) : null;\n    const rawUnit = d[4] || '';\n    const unit = rawUnit ? normalizeUnit(rawUnit) : '';\n    const value = c !== null ? `${a} x ${b} x ${c}${unit ? ' ' + unit : ''}` : `${a} x ${b}${unit ? ' ' + unit : ''}`;\n    suggestions.push({ group: 'Dimensions', name: 'Dimensions', value, confidence: 0.85, source: 'pattern' });\n  }\n\n  // Brand: pattern \"brand: X\" or \"by X\"\n  const brandPattern = /brand\\s*[:\\-]\\s*([^.,\\n]+)/i;\n  const brandMatch = input.match(brandPattern);\n  if (brandMatch) {\n    const raw = brandMatch[1].trim();\n    suggestions.push({ group: 'Brand', name: 'Brand', value: raw, confidence: 0.95, source: 'pattern' });\n  } else {\n    const byPattern = /\\bby\\s+([A-Z][A-Za-z0-9&\\-\\s]{1,40})\\b/;\n    const byMatch = input.match(byPattern);\n    if (byMatch) {\n      const raw = byMatch[1].trim().replace(/\\s+$/,'');\n      suggestions.push({ group: 'Brand', name: 'Brand', value: raw, confidence: 0.7, source: 'pattern' });\n    }\n  }\n\n  // Gender\n  if (/\\bmen'?s\\b|\\bmale\\b|\\bfor men\\b/i.test(input)) {\n    suggestions.push({ group: 'Gender', name: 'Gender', value: 'Men', confidence: 0.7, source: 'keyword' });\n  }\n  if (/\\bwomen'?s\\b|\\bfemale\\b|\\bfor women\\b/i.test(input)) {\n    suggestions.push({ group: 'Gender', name: 'Gender', value: 'Women', confidence: 0.7, source: 'keyword' });\n  }\n  if (/\\bunisex\\b/i.test(input)) {\n    suggestions.push({ group: 'Gender', name: 'Gender', value: 'Unisex', confidence: 0.8, source: 'keyword' });\n  }\n\n  // Age Group\n  if (/\\bkids\\b|\\bchildren\\b|\\bchild\\b|\\byouth\\b/i.test(input)) {\n    suggestions.push({ group: 'Age Group', name: 'Age Group', value: 'Kids', confidence: 0.7, source: 'keyword' });\n  }\n  if (/\\bbaby\\b|\\binfant\\b|\\btoddler\\b/i.test(input)) {\n    suggestions.push({ group: 'Age Group', name: 'Age Group', value: 'Baby', confidence: 0.7, source: 'keyword' });\n  }\n  if (/\\badult\\b/i.test(input)) {\n    suggestions.push({ group: 'Age Group', name: 'Age Group', value: 'Adult', confidence: 0.6, source: 'keyword' });\n  }\n\n  // Clean up duplicates, keep highest confidence for same group/value\n  const deduped = {};\n  for (const s of suggestions) {\n    const key = `${s.group}::${s.value.toLowerCase()}`;\n    if (!deduped[key] || s.confidence > deduped[key].confidence) {\n      deduped[key] = s;\n    }\n  }\n\n  const finalList = Object.values(deduped)\n    .sort((a, b) => {\n      if (a.group === b.group) return b.confidence - a.confidence;\n      return a.group.localeCompare(b.group);\n    });\n\n  return finalList;\n}\n\nmodule.exports = { suggestAttributes };\n"
    },
    {
      "path": "pages/api/ai/attribute-suggest.js",
      "content": "const { suggestAttributes } = require('../../../lib/attributeSuggest');\n\nexport default async function handler(req, res) {\n  try {\n    let text = '';\n    if (req.method === 'POST') {\n      // Next.js parses JSON by default if header is application/json\n      if (typeof req.body === 'string') {\n        try {\n          const parsed = JSON.parse(req.body);\n          text = parsed.text || parsed.description || '';\n        } catch (e) {\n          text = req.body;\n        }\n      } else {\n        text = (req.body && (req.body.text || req.body.description)) || '';\n      }\n    } else if (req.method === 'GET') {\n      text = (req.query && (req.query.text || req.query.q)) || '';\n    } else if (req.method === 'OPTIONS') {\n      res.status(200).end();\n      return;\n    }\n\n    if (!text || !text.trim()) {\n      res.status(400).json({ error: 'Missing text. Provide { text } in POST body or ?text= in query.' });\n      return;\n    }\n\n    const suggestions = suggestAttributes(text);\n\n    res.status(200).json({\n      suggestions,\n      meta: {\n        inputLength: text.length,\n        count: suggestions.length,\n      },\n    });\n  } catch (err) {\n    console.error('attribute-suggest error', err);\n    res.status(500).json({ error: 'Internal error' });\n  }\n}\n"
    },
    {
      "path": "pages/tools/attribute-suggest.js",
      "content": "import { useState } from 'react';\n\nexport default function AttributeSuggestTool() {\n  const [text, setText] = useState('Red cotton t-shirt, size M, made in Portugal. Weight: 180 g. Dimensions: 30 x 20 x 2 cm. Brand: Acme. Unisex.');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [results, setResults] = useState([]);\n\n  async function runSuggest(e) {\n    e && e.preventDefault();\n    setLoading(true);\n    setError('');\n    setResults([]);\n    try {\n      const res = await fetch('/api/ai/attribute-suggest', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ text }),\n      });\n      if (!res.ok) {\n        const j = await res.json().catch(() => ({}));\n        throw new Error(j.error || 'Request failed');\n      }\n      const data = await res.json();\n      setResults(data.suggestions || []);\n    } catch (err) {\n      setError(err.message || 'Error');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  function groupBy(arr, key) {\n    return arr.reduce((acc, item) => {\n      const k = item[key] || 'Other';\n      (acc[k] = acc[k] || []).push(item);\n      return acc;\n    }, {});\n  }\n\n  const grouped = groupBy(results, 'group');\n\n  return (\n    <div style={{ maxWidth: 900, margin: '20px auto', padding: '0 16px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial' }}>\n      <h1>AI-ish Attribute Suggestion</h1>\n      <p style={{ color: '#555' }}>Paste a product title/description to extract structured attributes like Color, Size, Material, Country of Origin, and more. This runs locally without external APIs.</p>\n\n      <form onSubmit={runSuggest}>\n        <textarea\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          rows={8}\n          style={{ width: '100%', fontSize: 14, padding: 10, border: '1px solid #ccc', borderRadius: 6 }}\n          placeholder=\"Enter product description...\"\n        />\n        <div style={{ marginTop: 10, display: 'flex', gap: 8 }}>\n          <button type=\"submit\" onClick={runSuggest} disabled={loading} style={{ padding: '8px 14px', background: '#111827', color: 'white', border: 0, borderRadius: 6, cursor: 'pointer' }}>\n            {loading ? 'Suggesting…' : 'Suggest Attributes'}\n          </button>\n          <button type=\"button\" onClick={() => setText('')} style={{ padding: '8px 14px', background: '#f3f4f6', border: '1px solid #e5e7eb', borderRadius: 6, cursor: 'pointer' }}>Clear</button>\n        </div>\n      </form>\n\n      {error ? <p style={{ color: '#b91c1c', marginTop: 12 }}>{error}</p> : null}\n\n      <div style={{ marginTop: 20 }}>\n        {Object.keys(grouped).length === 0 && !loading ? (\n          <p style={{ color: '#6b7280' }}>No suggestions yet.</p>\n        ) : (\n          Object.keys(grouped).sort().map((g) => (\n            <div key={g} style={{ marginBottom: 16 }}>\n              <h3 style={{ margin: '8px 0' }}>{g}</h3>\n              <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>\n                {grouped[g].map((s, idx) => (\n                  <span key={idx} title={`confidence: ${Math.round(s.confidence * 100)}%`}\n                    style={{ display: 'inline-block', padding: '6px 10px', borderRadius: 999, background: '#f3f4f6', border: '1px solid #e5e7eb', fontSize: 13 }}>\n                    {s.name}: {s.value}\n                  </span>\n                ))}\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n\n      <hr style={{ margin: '24px 0' }} />\n      <p style={{ color: '#6b7280', fontSize: 12 }}>Tip: You can also call the API directly: GET/POST /api/ai/attribute-suggest with {`{ text }`} in body/query.</p>\n    </div>\n  );\n}\n"
    },
    {
      "path": "test/attributeSuggest.test.js",
      "content": "const assert = require('assert');\nconst { suggestAttributes } = require('../lib/attributeSuggest');\n\n(function run() {\n  const text = 'Red cotton t-shirt, size M, made in Portugal. Weight: 180 g. Dimensions: 30 x 20 x 2 cm. Brand: Acme. Unisex.';\n  const res = suggestAttributes(text);\n\n  function has(group, value) {\n    return res.some((s) => s.group === group && new RegExp(value, 'i').test(s.value));\n  }\n\n  assert(has('Color', 'Red'), 'should detect Color: Red');\n  assert(has('Material', 'Cotton'), 'should detect Material: Cotton');\n  assert(has('Size', 'M'), 'should detect Size: M');\n  assert(has('Country of Origin', 'Portugal'), 'should detect Country of Origin: Portugal');\n  assert(has('Weight', '180'), 'should detect Weight 180 g');\n  assert(has('Dimensions', '30 x 20 x 2'), 'should detect Dimensions');\n  assert(has('Brand', 'Acme'), 'should detect Brand: Acme');\n  assert(has('Gender', 'Unisex'), 'should detect Gender: Unisex');\n\n  const text2 = 'Women\\'s leather boots by BrandCo, size 38 EU, color: Black, made in Italy.';\n  const res2 = suggestAttributes(text2);\n  function has2(group, value) { return res2.some((s) => s.group === group && new RegExp(value, 'i').test(s.value)); }\n  assert(has2('Gender', 'Women'), 'should detect Women gender');\n  assert(has2('Material', 'Leather'), 'should detect Leather');\n  assert(has2('Size', '38'), 'should detect numeric size');\n  assert(has2('Color', 'Black'), 'should detect Black color');\n  assert(has2('Country of Origin', 'Italy'), 'should detect Italy');\n\n  console.log('attributeSuggest.test.js passed');\n})();\n"
    },
    {
      "path": "commit_message.txt",
      "content": "feat(ai-attributes): add attribute suggestion engine, API endpoint, and tooling UI page; include basic unit test for heuristic extractor"
    }
  ]
}