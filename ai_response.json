{
  "files": [
    {
      "path": "lib/attributeGroupsStore.js",
      "content": "let groups = [];\n\nfunction nowIso() {\n  return new Date().toISOString();\n}\n\nfunction generateId() {\n  return (\n    Date.now().toString(36) + Math.random().toString(36).slice(2, 10)\n  ).toLowerCase();\n}\n\nfunction validatePayload({ code, name }) {\n  const errors = {};\n  if (!code || typeof code !== 'string' || !code.trim()) {\n    errors.code = 'Code is required';\n  } else if (!/^[a-z0-9_-]+$/i.test(code)) {\n    errors.code = 'Code must contain only letters, numbers, dashes or underscores';\n  }\n  if (!name || typeof name !== 'string' || !name.trim()) {\n    errors.name = 'Name is required';\n  }\n  return {\n    valid: Object.keys(errors).length === 0,\n    errors,\n  };\n}\n\nfunction codeExists(code, excludeId) {\n  return groups.some(\n    (g) => g.code.toLowerCase() === code.toLowerCase() && g.id !== excludeId\n  );\n}\n\nexport function listAttributeGroups() {\n  return groups\n    .slice()\n    .sort((a, b) => a.name.localeCompare(b.name));\n}\n\nexport function getAttributeGroup(id) {\n  return groups.find((g) => g.id === id) || null;\n}\n\nexport function createAttributeGroup({ code, name, description = '' }) {\n  const { valid, errors } = validatePayload({ code, name });\n  if (!valid) {\n    return { ok: false, status: 400, errors };\n  }\n  if (codeExists(code)) {\n    return {\n      ok: false,\n      status: 409,\n      errors: { code: 'Code must be unique' },\n    };\n  }\n  const now = nowIso();\n  const item = {\n    id: generateId(),\n    code: code.trim(),\n    name: name.trim(),\n    description: typeof description === 'string' ? description.trim() : '',\n    createdAt: now,\n    updatedAt: now,\n  };\n  groups.push(item);\n  return { ok: true, status: 201, item };\n}\n\nexport function updateAttributeGroup(id, patch) {\n  const item = getAttributeGroup(id);\n  if (!item) return { ok: false, status: 404 };\n\n  const next = { ...item };\n\n  if (patch.code !== undefined) {\n    if (!patch.code || !/^[a-z0-9_-]+$/i.test(patch.code)) {\n      return {\n        ok: false,\n        status: 400,\n        errors: { code: 'Code must contain only letters, numbers, dashes or underscores' },\n      };\n    }\n    if (codeExists(patch.code, id)) {\n      return { ok: false, status: 409, errors: { code: 'Code must be unique' } };\n    }\n    next.code = String(patch.code).trim();\n  }\n\n  if (patch.name !== undefined) {\n    if (!patch.name || !String(patch.name).trim()) {\n      return { ok: false, status: 400, errors: { name: 'Name is required' } };\n    }\n    next.name = String(patch.name).trim();\n  }\n\n  if (patch.description !== undefined) {\n    next.description = String(patch.description || '').trim();\n  }\n\n  next.updatedAt = nowIso();\n\n  const idx = groups.findIndex((g) => g.id === id);\n  groups[idx] = next;\n  return { ok: true, status: 200, item: next };\n}\n\nexport function deleteAttributeGroup(id) {\n  const idx = groups.findIndex((g) => g.id === id);\n  if (idx === -1) return { ok: false, status: 404 };\n  const [removed] = groups.splice(idx, 1);\n  return { ok: true, status: 200, item: removed };\n}\n\n// Test-only utility to get a clean state\nexport function __resetAttributeGroupsForTests() {\n  groups = [];\n}\n"
    },
    {
      "path": "pages/api/attribute-groups/index.js",
      "content": "import {\n  listAttributeGroups,\n  createAttributeGroup,\n} from '../../../lib/attributeGroupsStore';\n\nexport default async function handler(req, res) {\n  if (req.method === 'GET') {\n    const data = listAttributeGroups();\n    res.status(200).json({ data });\n    return;\n  }\n\n  if (req.method === 'POST') {\n    const { code, name, description } = req.body || {};\n    const result = createAttributeGroup({ code, name, description });\n    if (result.ok) {\n      res.status(result.status).json({ item: result.item });\n    } else {\n      res.status(result.status).json({ errors: result.errors || {} });\n    }\n    return;\n  }\n\n  res.setHeader('Allow', ['GET', 'POST']);\n  res.status(405).json({ error: 'Method Not Allowed' });\n}\n"
    },
    {
      "path": "pages/api/attribute-groups/[id].js",
      "content": "import {\n  getAttributeGroup,\n  updateAttributeGroup,\n  deleteAttributeGroup,\n} from '../../../lib/attributeGroupsStore';\n\nexport default async function handler(req, res) {\n  const { id } = req.query;\n\n  if (req.method === 'GET') {\n    const item = getAttributeGroup(id);\n    if (!item) {\n      res.status(404).json({ error: 'Not Found' });\n      return;\n    }\n    res.status(200).json({ item });\n    return;\n  }\n\n  if (req.method === 'PUT' || req.method === 'PATCH') {\n    const result = updateAttributeGroup(id, req.body || {});\n    if (result.ok) {\n      res.status(result.status).json({ item: result.item });\n    } else {\n      res.status(result.status).json({ errors: result.errors || {} });\n    }\n    return;\n  }\n\n  if (req.method === 'DELETE') {\n    const result = deleteAttributeGroup(id);\n    if (result.ok) {\n      res.status(200).json({ item: result.item });\n    } else {\n      res.status(result.status).json({ error: 'Not Found' });\n    }\n    return;\n  }\n\n  res.setHeader('Allow', ['GET', 'PUT', 'PATCH', 'DELETE']);\n  res.status(405).json({ error: 'Method Not Allowed' });\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import { useEffect, useState } from 'react';\n\nexport default function AttributeGroupsAdmin() {\n  const [groups, setGroups] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  const [form, setForm] = useState({ code: '', name: '', description: '' });\n  const [formErrors, setFormErrors] = useState({});\n  const [submitting, setSubmitting] = useState(false);\n\n  async function load() {\n    setLoading(true);\n    setError('');\n    try {\n      const res = await fetch('/api/attribute-groups');\n      const json = await res.json();\n      if (!res.ok) throw new Error('Failed to load');\n      setGroups(json.data || []);\n    } catch (e) {\n      setError('Failed to load attribute groups');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    setSubmitting(true);\n    setFormErrors({});\n    try {\n      const res = await fetch('/api/attribute-groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(form),\n      });\n      const json = await res.json();\n      if (!res.ok) {\n        setFormErrors(json.errors || { _form: 'Save failed' });\n      } else {\n        setForm({ code: '', name: '', description: '' });\n        await load();\n      }\n    } catch (e) {\n      setFormErrors({ _form: 'Network error' });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <div style={{ maxWidth: 900, margin: '20px auto', padding: '0 16px' }}>\n      <h1>Attribute Groups</h1>\n      <p style={{ color: '#555' }}>\n        Define logical groupings of product attributes (e.g., \"Dimensions\", \"Materials\").\n      </p>\n\n      <section style={{ margin: '24px 0', padding: 16, border: '1px solid #eee', borderRadius: 8 }}>\n        <h2 style={{ marginTop: 0 }}>Create new group</h2>\n        <form onSubmit={onSubmit}>\n          <div style={{ display: 'flex', gap: 12, flexWrap: 'wrap' }}>\n            <div style={{ flex: '1 1 200px' }}>\n              <label htmlFor=\"code\" style={{ display: 'block', fontWeight: 600 }}>Code</label>\n              <input\n                id=\"code\"\n                value={form.code}\n                onChange={(e) => setForm({ ...form, code: e.target.value })}\n                placeholder=\"e.g. dimensions\"\n                style={{ width: '100%', padding: 8 }}\n              />\n              {formErrors.code && (\n                <div style={{ color: 'crimson', fontSize: 12 }}>{formErrors.code}</div>\n              )}\n            </div>\n            <div style={{ flex: '2 1 260px' }}>\n              <label htmlFor=\"name\" style={{ display: 'block', fontWeight: 600 }}>Name</label>\n              <input\n                id=\"name\"\n                value={form.name}\n                onChange={(e) => setForm({ ...form, name: e.target.value })}\n                placeholder=\"e.g. Dimensions\"\n                style={{ width: '100%', padding: 8 }}\n              />\n              {formErrors.name && (\n                <div style={{ color: 'crimson', fontSize: 12 }}>{formErrors.name}</div>\n              )}\n            </div>\n          </div>\n          <div style={{ marginTop: 12 }}>\n            <label htmlFor=\"description\" style={{ display: 'block', fontWeight: 600 }}>Description</label>\n            <textarea\n              id=\"description\"\n              value={form.description}\n              onChange={(e) => setForm({ ...form, description: e.target.value })}\n              placeholder=\"Optional description\"\n              rows={3}\n              style={{ width: '100%', padding: 8 }}\n            />\n          </div>\n          {formErrors._form && (\n            <div style={{ color: 'crimson', marginTop: 8 }}>{formErrors._form}</div>\n          )}\n          <div style={{ marginTop: 12 }}>\n            <button disabled={submitting} type=\"submit\">\n              {submitting ? 'Saving…' : 'Create group'}\n            </button>\n          </div>\n        </form>\n      </section>\n\n      <section style={{ margin: '24px 0' }}>\n        <h2 style={{ marginTop: 0 }}>Existing groups</h2>\n        {loading && <div>Loading…</div>}\n        {error && <div style={{ color: 'crimson' }}>{error}</div>}\n        {!loading && groups.length === 0 && <div>No groups yet.</div>}\n        <ul style={{ listStyle: 'none', padding: 0 }}>\n          {groups.map((g) => (\n            <li key={g.id} style={{\n              border: '1px solid #eee',\n              borderRadius: 8,\n              padding: 12,\n              marginBottom: 8,\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center'\n            }}>\n              <div>\n                <div style={{ fontWeight: 600 }}>{g.name} <span style={{ color: '#999', fontWeight: 400 }}>({g.code})</span></div>\n                {g.description && (\n                  <div style={{ color: '#666', marginTop: 4 }}>{g.description}</div>\n                )}\n              </div>\n              <small style={{ color: '#999' }}>Updated {new Date(g.updatedAt).toLocaleString()}</small>\n            </li>\n          ))}\n        </ul>\n      </section>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/api/attribute-groups.test.js",
      "content": "import handlerIndex from '../../pages/api/attribute-groups/index';\nimport handlerById from '../../pages/api/attribute-groups/[id]';\nimport { __resetAttributeGroupsForTests } from '../../lib/attributeGroupsStore';\n\nfunction createMockRes() {\n  const res = {};\n  res._status = 200;\n  res._json = undefined;\n  res.status = function (code) {\n    this._status = code;\n    return this;\n  };\n  res.json = function (data) {\n    this._json = data;\n    return this;\n  };\n  res.setHeader = function () { return this; };\n  return res;\n}\n\nasync function run() {\n  __resetAttributeGroupsForTests();\n\n  // Create\n  {\n    const req = { method: 'POST', body: { code: 'dimensions', name: 'Dimensions' } };\n    const res = createMockRes();\n    await handlerIndex(req, res);\n    if (res._status !== 201) throw new Error('Expected 201 on create');\n    if (!res._json || !res._json.item || res._json.item.code !== 'dimensions') {\n      throw new Error('Invalid create payload');\n    }\n  }\n\n  // List\n  {\n    const req = { method: 'GET' };\n    const res = createMockRes();\n    await handlerIndex(req, res);\n    if (res._status !== 200) throw new Error('Expected 200 on list');\n    if (!Array.isArray(res._json.data) || res._json.data.length !== 1) {\n      throw new Error('List should return one item');\n    }\n  }\n\n  // Get by id\n  let createdId = undefined;\n  {\n    const reqList = { method: 'GET' };\n    const resList = createMockRes();\n    await handlerIndex(reqList, resList);\n    createdId = resList._json.data[0].id;\n\n    const req = { method: 'GET', query: { id: createdId } };\n    const res = createMockRes();\n    await handlerById(req, res);\n    if (res._status !== 200) throw new Error('Expected 200 on get by id');\n    if (!res._json.item || res._json.item.id !== createdId) {\n      throw new Error('Get by id returned wrong item');\n    }\n  }\n\n  // Update\n  {\n    const req = { method: 'PUT', query: { id: createdId }, body: { name: 'Dims' } };\n    const res = createMockRes();\n    await handlerById(req, res);\n    if (res._status !== 200) throw new Error('Expected 200 on update');\n    if (res._json.item.name !== 'Dims') throw new Error('Update did not apply');\n  }\n\n  // Delete\n  {\n    const req = { method: 'DELETE', query: { id: createdId } };\n    const res = createMockRes();\n    await handlerById(req, res);\n    if (res._status !== 200) throw new Error('Expected 200 on delete');\n  }\n\n  // Verify empty\n  {\n    const req = { method: 'GET' };\n    const res = createMockRes();\n    await handlerIndex(req, res);\n    if (!Array.isArray(res._json.data) || res._json.data.length !== 0) {\n      throw new Error('Expected empty list after delete');\n    }\n  }\n\n  // eslint-disable-next-line no-console\n  console.log('attribute-groups API tests passed');\n}\n\n// Allow running directly with `node tests/api/attribute-groups.test.js`\nif (require.main === module) {\n  run().catch((err) => {\n    // eslint-disable-next-line no-console\n    console.error(err);\n    process.exit(1);\n  });\n}\n\nexport default run;\n"
    }
  ]
}