{
  "commit_message": "Add CSV export API and UI link; include API test for CSV response",
  "files": [
    {
      "path": "pages/api/products/export.js",
      "content": "import { getProducts } from '../../../lib/products';\nimport * as csvModule from '../../../lib/exportCsv';\n\nfunction pickCsvFn(mod) {\n  if (!mod) return null;\n  if (typeof mod === 'function') return mod;\n  if (typeof mod.default === 'function') return mod.default;\n  if (typeof mod.exportCsv === 'function') return mod.exportCsv;\n  if (typeof mod.toCsv === 'function') return mod.toCsv;\n  if (typeof mod.exportProductsToCsv === 'function') return mod.exportProductsToCsv;\n  return null;\n}\n\nfunction csvEscape(val) {\n  if (val == null) return '';\n  const str = String(val);\n  if (/[\",\\n]/.test(str)) {\n    return '\"' + str.replace(/\"/g, '\"\"') + '\"';\n  }\n  return str;\n}\n\nfunction defaultCsv(products = []) {\n  const rows = Array.isArray(products) ? products : [];\n  // Collect column names from all objects to have a stable header\n  const colsSet = new Set();\n  rows.forEach((p) => Object.keys(p || {}).forEach((k) => colsSet.add(k)));\n  const cols = Array.from(colsSet);\n  if (cols.length === 0) return '';\n  const header = cols.join(',');\n  const body = rows\n    .map((p) => cols.map((c) => csvEscape(p[c])).join(','))\n    .join('\\n');\n  return header + '\\n' + body + '\\n';\n}\n\nexport default async function handler(req, res) {\n  if (req.method !== 'GET') {\n    res.setHeader('Allow', 'GET');\n    res.status(405).end('Method Not Allowed');\n    return;\n  }\n\n  const products = await getProducts({});\n  const toCsv = pickCsvFn(csvModule) || defaultCsv;\n\n  let csv;\n  try {\n    csv = toCsv(products);\n  } catch (e) {\n    csv = defaultCsv(products);\n  }\n\n  res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n  res.setHeader('Content-Disposition', 'attachment; filename=\"products.csv\"');\n  res.status(200).send(csv);\n}\n"
    },
    {
      "path": "components/ExportCsvLink.js",
      "content": "import React from 'react';\n\nexport default function ExportCsvLink({ href = '/api/products/export', className, style }) {\n  return (\n    <a\n      href={href}\n      className={className}\n      style={style}\n      aria-label=\"Export CSV\"\n      data-testid=\"export-csv-link\"\n    >\n      Export CSV\n    </a>\n  );\n}\n"
    },
    {
      "path": "pages/index.js",
      "content": "import React, { useEffect, useState } from 'react';\nimport ProductList from '../components/ProductList';\nimport ExportCsvLink from '../components/ExportCsvLink';\n\nconst Home = () => {\n  const [products, setProducts] = useState([]);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    let active = true;\n    const controller = new AbortController();\n\n    const fetchProducts = async () => {\n      const qs = query ? `?search=${encodeURIComponent(query)}` : '';\n      const res = await fetch(`/api/products${qs}`, { signal: controller.signal });\n      const data = await res.json();\n      if (active) setProducts(data);\n    };\n\n    const t = setTimeout(fetchProducts, 250);\n\n    return () => {\n      active = false;\n      controller.abort();\n      clearTimeout(t);\n    };\n  }, [query]);\n\n  return (\n    <div style={{ maxWidth: 900, margin: '0 auto', padding: '1rem' }}>\n      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem' }}>\n        <input\n          type=\"search\"\n          placeholder=\"Search products by name, SKU or description...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          style={{ flex: 1, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n          aria-label=\"Search products\"\n        />\n        <span style={{ color: '#666', fontSize: 12 }}>\n          {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n        </span>\n        <ExportCsvLink style={{ fontSize: 12 }} />\n      </div>\n      <ProductList products={products} />\n    </div>\n  );\n};\n\nexport default Home;\n"
    },
    {
      "path": "tests/api-products-export.test.js",
      "content": "/** @jest-environment node */\n\nconst handler = require('../pages/api/products/export').default;\n\nfunction createMockReqRes(method = 'GET') {\n  const req = { method, headers: {}, query: {} };\n  const headers = {};\n  const res = {\n    statusCode: 200,\n    headers,\n    body: '',\n    finished: false,\n    setHeader(key, val) {\n      headers[String(key).toLowerCase()] = val;\n    },\n    getHeader(key) {\n      return headers[String(key).toLowerCase()];\n    },\n    status(code) {\n      this.statusCode = code;\n      return this;\n    },\n    end(payload) {\n      if (payload !== undefined) this.body += payload;\n      this.finished = true;\n      return this;\n    },\n    send(payload) {\n      return this.end(payload);\n    },\n    json(obj) {\n      return this.send(JSON.stringify(obj));\n    },\n  };\n  return { req, res };\n}\n\ndescribe('API /api/products/export', () => {\n  it('returns CSV with proper headers', async () => {\n    const { req, res } = createMockReqRes('GET');\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(200);\n    const ct = res.getHeader('content-type');\n    expect(ct).toMatch(/text\\/csv/);\n    const cd = res.getHeader('content-disposition');\n    expect(cd).toMatch(/attachment/);\n    expect(typeof res.body).toBe('string');\n    // basic sanity: header line and at least one comma\n    expect(res.body.split('\\n')[0]).toContain(',');\n    expect(res.body.length).toBeGreaterThan(10);\n  });\n\n  it('rejects non-GET methods', async () => {\n    const { req, res } = createMockReqRes('POST');\n    await handler(req, res);\n    expect(res.statusCode).toBe(405);\n    expect(res.getHeader('allow')).toBe('GET');\n  });\n});\n"
    }
  ]
}