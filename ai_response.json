{
  "files": [
    {
      "path": "lib/attributeGroups.js",
      "content": "const ATTRIBUTE_GROUPS = [\n  {\n    id: 'core',\n    name: 'Core',\n    description: 'Essential product fields used across the catalog.',\n    attributes: ['name', 'sku', 'price']\n  },\n  {\n    id: 'seo',\n    name: 'SEO',\n    description: 'Search engine optimization fields for better discoverability.',\n    attributes: ['metaTitle', 'metaDescription']\n  },\n  {\n    id: 'inventory',\n    name: 'Inventory',\n    description: 'Stock and warehouse related fields.',\n    attributes: ['stock', 'warehouse']\n  }\n];\n\nfunction normalizeQuery(q) {\n  return (q || '').toString().trim().toLowerCase();\n}\n\nfunction getAttributeGroups(q) {\n  const term = normalizeQuery(q);\n  if (!term) return ATTRIBUTE_GROUPS.slice();\n  return ATTRIBUTE_GROUPS.filter((g) =>\n    g.id.toLowerCase().includes(term) ||\n    g.name.toLowerCase().includes(term) ||\n    (g.description && g.description.toLowerCase().includes(term))\n  );\n}\n\nmodule.exports = {\n  ATTRIBUTE_GROUPS,\n  getAttributeGroups\n};\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "const { getAttributeGroups } = require('../../lib/attributeGroups');\n\nfunction handler(req, res) {\n  const { method } = req;\n\n  if (method !== 'GET') {\n    res.setHeader('Allow', ['GET']);\n    return res.status(405).json({ error: 'Method Not Allowed' });\n  }\n\n  const { q } = req.query || {};\n  const data = getAttributeGroups(q);\n\n  return res.status(200).json({\n    ok: true,\n    count: data.length,\n    groups: data\n  });\n}\n\nmodule.exports = handler;\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import { useEffect, useState } from 'react';\nimport Head from 'next/head';\n\nexport default function AttributeGroupsAdmin() {\n  const [q, setQ] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [groups, setGroups] = useState([]);\n\n  useEffect(() => {\n    let canceled = false;\n    async function run() {\n      setLoading(true);\n      setError(null);\n      try {\n        const params = q ? `?q=${encodeURIComponent(q)}` : '';\n        const res = await fetch(`/api/attribute-groups${params}`);\n        const json = await res.json();\n        if (!canceled) {\n          if (!res.ok || !json.ok) {\n            throw new Error(json && json.error ? json.error : 'Failed to load');\n          }\n          setGroups(Array.isArray(json.groups) ? json.groups : []);\n        }\n      } catch (e) {\n        if (!canceled) setError(e.message || 'Error');\n      } finally {\n        if (!canceled) setLoading(false);\n      }\n    }\n    run();\n    return () => {\n      canceled = true;\n    };\n  }, [q]);\n\n  return (\n    <div style={{ padding: '1.5rem', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <Head>\n        <title>Attribute Groups · Admin</title>\n      </Head>\n      <h1 style={{ margin: 0, fontSize: '1.75rem' }}>Attribute Groups</h1>\n      <p style={{ color: '#555', marginTop: '0.25rem' }}>Organize product attributes into logical groups.</p>\n\n      <div style={{ margin: '1rem 0', display: 'flex', gap: '0.5rem' }}>\n        <input\n          value={q}\n          onChange={(e) => setQ(e.target.value)}\n          placeholder=\"Search groups (e.g. core, seo)\"\n          aria-label=\"Search attribute groups\"\n          style={{ flex: 1, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n        />\n        {q ? (\n          <button onClick={() => setQ('')} style={{ padding: '0.5rem 0.75rem', borderRadius: 6, border: '1px solid #ddd', background: '#fafafa' }}>Clear</button>\n        ) : null}\n      </div>\n\n      {loading && <div style={{ color: '#666' }}>Loading…</div>}\n      {error && <div style={{ color: '#c00' }}>{error}</div>}\n\n      {!loading && !error && (\n        groups.length ? (\n          <ul style={{ listStyle: 'none', padding: 0, margin: 0, display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(260px, 1fr))', gap: '0.75rem' }}>\n            {groups.map((g) => (\n              <li key={g.id} style={{ border: '1px solid #eee', borderRadius: 8, padding: '0.75rem' }}>\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'baseline' }}>\n                  <strong>{g.name}</strong>\n                  <span style={{ color: '#666', fontSize: 12 }}>{g.attributes?.length || 0} attrs</span>\n                </div>\n                {g.description ? (\n                  <div style={{ color: '#555', fontSize: 14, marginTop: 4 }}>{g.description}</div>\n                ) : null}\n                {Array.isArray(g.attributes) && g.attributes.length ? (\n                  <div style={{ marginTop: 8 }}>\n                    <div style={{ color: '#666', fontSize: 12, marginBottom: 4 }}>Attributes</div>\n                    <div style={{ display: 'flex', flexWrap: 'wrap', gap: 6 }}>\n                      {g.attributes.map((a) => (\n                        <code key={a} style={{ background: '#f6f6f6', border: '1px solid #eee', borderRadius: 6, padding: '2px 6px', fontSize: 12 }}>{a}</code>\n                      ))}\n                    </div>\n                  </div>\n                ) : null}\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <div style={{ color: '#666' }}>No attribute groups found.</div>\n        )\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "__tests__/attributeGroups.test.js",
      "content": "const assert = require('assert');\nconst { getAttributeGroups, ATTRIBUTE_GROUPS } = require('../lib/attributeGroups');\n\n(function testGetAll() {\n  const all = getAttributeGroups();\n  assert(Array.isArray(all), 'Expected an array');\n  assert(all.length === ATTRIBUTE_GROUPS.length, 'Expected full list when no query');\n})();\n\n(function testQueryFilter() {\n  const res = getAttributeGroups('seo');\n  assert(res.length >= 1, 'Expected at least one match for \"seo\"');\n  assert(res.some((g) => g.id === 'seo' || g.name.toLowerCase().includes('seo')),\n    'Expected seo group to be present');\n})();\n\nconsole.log('attributeGroups tests passed');\n"
    }
  ]
}