{
  "files": [
    {
      "path": "lib/attributeGroups.js",
      "content": "// Simple in-memory store for Attribute Groups\n// Note: This store is ephemeral and resets on serverless cold starts.\n\nlet groups = [];\nlet seq = 1;\n\nfunction clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nfunction listGroups() {\n  return clone(groups);\n}\n\nfunction getGroup(id) {\n  const g = groups.find((x) => x.id === String(id));\n  return g ? clone(g) : null;\n}\n\nfunction ensureUniqueName(name, ignoreId) {\n  const lower = String(name || '').trim().toLowerCase();\n  if (!lower) return;\n  const exists = groups.some((g) => g.name.trim().toLowerCase() === lower && g.id !== ignoreId);\n  if (exists) {\n    const err = new Error('Attribute Group name must be unique');\n    err.statusCode = 409;\n    throw err;\n  }\n}\n\nfunction normalizeAttributes(attrs) {\n  if (!Array.isArray(attrs)) return [];\n  return attrs\n    .map((a) => ({\n      code: String(a.code || '').trim(),\n      label: String(a.label || '').trim(),\n    }))\n    .filter((a) => a.code);\n}\n\nfunction validateGroupInput(input) {\n  if (!input || typeof input !== 'object') {\n    const err = new Error('Invalid body');\n    err.statusCode = 400;\n    throw err;\n  }\n  const name = String(input.name || '').trim();\n  if (!name) {\n    const err = new Error('Name is required');\n    err.statusCode = 400;\n    throw err;\n  }\n  const attributes = normalizeAttributes(input.attributes || []);\n  return { name, attributes };\n}\n\nfunction createGroup(input) {\n  const { name, attributes } = validateGroupInput(input);\n  ensureUniqueName(name);\n  const id = String(seq++);\n  const now = new Date().toISOString();\n  const group = { id, name, attributes, createdAt: now, updatedAt: now };\n  groups.push(group);\n  return clone(group);\n}\n\nfunction updateGroup(id, updates) {\n  const idx = groups.findIndex((x) => x.id === String(id));\n  if (idx === -1) {\n    const err = new Error('Not found');\n    err.statusCode = 404;\n    throw err;\n  }\n  const { name, attributes } = validateGroupInput({\n    name: updates.name != null ? updates.name : groups[idx].name,\n    attributes: updates.attributes != null ? updates.attributes : groups[idx].attributes,\n  });\n  ensureUniqueName(name, String(id));\n  const updated = {\n    ...groups[idx],\n    name,\n    attributes: normalizeAttributes(attributes),\n    updatedAt: new Date().toISOString(),\n  };\n  groups[idx] = updated;\n  return clone(updated);\n}\n\nfunction deleteGroup(id) {\n  const idx = groups.findIndex((x) => x.id === String(id));\n  if (idx === -1) {\n    const err = new Error('Not found');\n    err.statusCode = 404;\n    throw err;\n  }\n  const removed = groups.splice(idx, 1)[0];\n  return clone(removed);\n}\n\n// Utilities for tests\nfunction resetStore() {\n  groups = [];\n  seq = 1;\n}\n\nmodule.exports = {\n  listGroups,\n  getGroup,\n  createGroup,\n  updateGroup,\n  deleteGroup,\n  resetStore,\n};\n"
    },
    {
      "path": "pages/api/attribute-groups/index.js",
      "content": "import { listGroups, createGroup } from '../../../lib/attributeGroups';\n\nexport default async function handler(req, res) {\n  res.setHeader('Content-Type', 'application/json');\n  try {\n    if (req.method === 'GET') {\n      const all = listGroups();\n      res.status(200).send(JSON.stringify({ data: all }));\n      return;\n    }\n    if (req.method === 'POST') {\n      const created = createGroup(req.body || {});\n      res.status(201).send(JSON.stringify({ data: created }));\n      return;\n    }\n    res.setHeader('Allow', 'GET, POST');\n    res.status(405).send(JSON.stringify({ error: 'Method Not Allowed' }));\n  } catch (e) {\n    const status = e && e.statusCode ? e.statusCode : 500;\n    res.status(status).send(JSON.stringify({ error: e.message || 'Server error' }));\n  }\n}\n"
    },
    {
      "path": "pages/api/attribute-groups/[id].js",
      "content": "import { getGroup, updateGroup, deleteGroup } from '../../../lib/attributeGroups';\n\nexport default async function handler(req, res) {\n  res.setHeader('Content-Type', 'application/json');\n  const { id } = req.query;\n  try {\n    if (req.method === 'GET') {\n      const g = getGroup(id);\n      if (!g) {\n        res.status(404).send(JSON.stringify({ error: 'Not found' }));\n        return;\n      }\n      res.status(200).send(JSON.stringify({ data: g }));\n      return;\n    }\n    if (req.method === 'PUT' || req.method === 'PATCH') {\n      const updated = updateGroup(id, req.body || {});\n      res.status(200).send(JSON.stringify({ data: updated }));\n      return;\n    }\n    if (req.method === 'DELETE') {\n      const removed = deleteGroup(id);\n      res.status(200).send(JSON.stringify({ data: removed }));\n      return;\n    }\n    res.setHeader('Allow', 'GET, PUT, PATCH, DELETE');\n    res.status(405).send(JSON.stringify({ error: 'Method Not Allowed' }));\n  } catch (e) {\n    const status = e && e.statusCode ? e.statusCode : 500;\n    res.status(status).send(JSON.stringify({ error: e.message || 'Server error' }));\n  }\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import { useEffect, useState } from 'react';\n\nfunction parseAttributes(csv) {\n  // Format: code:label; code2:label2 ...\n  if (!csv) return [];\n  return csv\n    .split(';')\n    .map((s) => s.trim())\n    .filter(Boolean)\n    .map((pair) => {\n      const [code, label] = pair.split(':');\n      return { code: (code || '').trim(), label: (label || '').trim() };\n    })\n    .filter((a) => a.code);\n}\n\nexport default function AttributeGroupsAdmin() {\n  const [groups, setGroups] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [name, setName] = useState('');\n  const [attrsCsv, setAttrsCsv] = useState('');\n\n  async function load() {\n    setLoading(true);\n    setError('');\n    try {\n      const res = await fetch('/api/attribute-groups');\n      const json = await res.json();\n      if (!res.ok) throw new Error(json.error || 'Failed to load');\n      setGroups(json.data || []);\n    } catch (e) {\n      setError(e.message || 'Failed to load');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  async function onCreate(e) {\n    e.preventDefault();\n    setError('');\n    try {\n      const payload = { name, attributes: parseAttributes(attrsCsv) };\n      const res = await fetch('/api/attribute-groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n      const json = await res.json();\n      if (!res.ok) throw new Error(json.error || 'Create failed');\n      setName('');\n      setAttrsCsv('');\n      setGroups((prev) => [json.data, ...prev]);\n    } catch (e) {\n      setError(e.message || 'Create failed');\n    }\n  }\n\n  async function onDelete(id) {\n    setError('');\n    try {\n      const res = await fetch(`/api/attribute-groups/${id}`, { method: 'DELETE' });\n      const json = await res.json();\n      if (!res.ok) throw new Error(json.error || 'Delete failed');\n      setGroups((prev) => prev.filter((g) => g.id !== id));\n    } catch (e) {\n      setError(e.message || 'Delete failed');\n    }\n  }\n\n  return (\n    <div style={{ maxWidth: 900, margin: '40px auto', padding: '0 16px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica, Arial, sans-serif' }}>\n      <h1>Attribute Groups</h1>\n      <p style={{ color: '#666' }}>Define reusable attribute groups for your products, like Specifications, Dimensions, or Care Instructions.</p>\n\n      <form onSubmit={onCreate} style={{ border: '1px solid #e5e7eb', padding: 16, borderRadius: 8, marginBottom: 24 }}>\n        <h3 style={{ marginTop: 0 }}>Create a new Group</h3>\n        <label style={{ display: 'block', marginBottom: 8 }}>\n          <div style={{ fontSize: 12, fontWeight: 600, color: '#374151', marginBottom: 4 }}>Name</div>\n          <input\n            type=\"text\"\n            placeholder=\"e.g. Specifications\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            style={{ width: '100%', padding: '8px 10px', border: '1px solid #d1d5db', borderRadius: 6 }}\n            required\n          />\n        </label>\n        <label style={{ display: 'block', marginBottom: 8 }}>\n          <div style={{ fontSize: 12, fontWeight: 600, color: '#374151', marginBottom: 4 }}>Attributes (code:label; code2:label2)</div>\n          <input\n            type=\"text\"\n            placeholder=\"color:Color; size:Size; material:Material\"\n            value={attrsCsv}\n            onChange={(e) => setAttrsCsv(e.target.value)}\n            style={{ width: '100%', padding: '8px 10px', border: '1px solid #d1d5db', borderRadius: 6 }}\n          />\n        </label>\n        <button type=\"submit\" style={{ background: '#111827', color: 'white', border: 0, padding: '8px 14px', borderRadius: 6, cursor: 'pointer' }}>Create</button>\n        {error ? <div style={{ color: '#b91c1c', marginTop: 8 }}>{error}</div> : null}\n      </form>\n\n      {loading ? (\n        <div>Loading…</div>\n      ) : groups.length === 0 ? (\n        <div style={{ color: '#6b7280' }}>No attribute groups yet.</div>\n      ) : (\n        <div style={{ display: 'grid', gap: 12 }}>\n          {groups.map((g) => (\n            <div key={g.id} style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: 12 }}>\n              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                <div>\n                  <div style={{ fontWeight: 700 }}>{g.name}</div>\n                  <div style={{ fontSize: 12, color: '#6b7280' }}>#{g.id} · {g.attributes?.length || 0} attributes</div>\n                </div>\n                <div>\n                  <button onClick={() => onDelete(g.id)} style={{ background: '#fee2e2', color: '#991b1b', border: 0, padding: '6px 10px', borderRadius: 6, cursor: 'pointer' }}>Delete</button>\n                </div>\n              </div>\n              {g.attributes && g.attributes.length > 0 ? (\n                <ul style={{ marginTop: 8, marginBottom: 0, paddingLeft: 18 }}>\n                  {g.attributes.map((a) => (\n                    <li key={a.code}>\n                      <span style={{ fontFamily: 'ui-monospace, SFMono-Regular, Menlo, monospace', background: '#f3f4f6', padding: '2px 6px', borderRadius: 4 }}>{a.code}</span>\n                      <span style={{ color: '#6b7280', marginLeft: 8 }}>{a.label}</span>\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <div style={{ color: '#6b7280', fontSize: 13, marginTop: 6 }}>No attributes</div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/attributeGroups.test.js",
      "content": "const assert = require('assert');\nconst { resetStore, createGroup, listGroups, updateGroup } = require('../lib/attributeGroups');\n\nfunction testCreateAndList() {\n  resetStore();\n  let g1 = createGroup({ name: 'Specifications', attributes: [{ code: 'color', label: 'Color' }] });\n  let g2 = createGroup({ name: 'Dimensions', attributes: [{ code: 'height', label: 'Height' }] });\n  const all = listGroups();\n  assert.strictEqual(all.length, 2, 'Should list two groups');\n  assert.strictEqual(all[0].id, '1', 'First id is 1');\n  assert.strictEqual(all[1].id, '2', 'Second id is 2');\n  assert.strictEqual(g1.name, 'Specifications');\n  assert.strictEqual(g2.attributes[0].code, 'height');\n}\n\nfunction testUniqueName() {\n  resetStore();\n  createGroup({ name: 'Specs', attributes: [] });\n  let threw = false;\n  try {\n    createGroup({ name: 'Specs', attributes: [] });\n  } catch (e) {\n    threw = true;\n  }\n  assert.strictEqual(threw, true, 'Should throw on duplicate name');\n}\n\nfunction testUpdateNameUniqueness() {\n  resetStore();\n  createGroup({ name: 'A', attributes: [] });\n  const b = createGroup({ name: 'B', attributes: [] });\n  let threw = false;\n  try {\n    updateGroup(b.id, { name: 'A' });\n  } catch (e) {\n    threw = true;\n  }\n  assert.strictEqual(threw, true, 'Should not allow renaming to existing name');\n}\n\nfunction run() {\n  testCreateAndList();\n  testUniqueName();\n  testUpdateNameUniqueness();\n  console.log('attributeGroups tests passed');\n}\n\nif (require.main === module) {\n  run();\n}\n\nmodule.exports = { run };\n"
    }
  ]
}