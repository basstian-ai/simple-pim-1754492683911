{
  "files": [
    {
      "path": "pages/admin/product/[sku]/attributes.js",
      "content": "import React from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\n\nexport default function ProductAttributesFlatPage() {\n  const router = useRouter();\n  const { sku } = router.query || {};\n  const [state, setState] = React.useState({ loading: true, error: null, data: null });\n\n  React.useEffect(() => {\n    let cancelled = false;\n    async function load() {\n      if (!sku || typeof sku !== 'string') return;\n      setState((s) => ({ ...s, loading: true, error: null }));\n      try {\n        const res = await fetch(`/api/products/${encodeURIComponent(sku)}/attributes/flat`);\n        if (!res.ok) throw new Error(`Failed to load: ${res.status}`);\n        const json = await res.json();\n        if (!cancelled) setState({ loading: false, error: null, data: json });\n      } catch (err) {\n        if (!cancelled) setState({ loading: false, error: err.message || 'Failed to load', data: null });\n      }\n    }\n    load();\n    return () => {\n      cancelled = true;\n    };\n  }, [sku]);\n\n  const count = state.data?.count || 0;\n\n  return (\n    <div style={container}>\n      <div style={{ marginBottom: 12 }}>\n        <Link href=\"/admin/products\">\n          <a>&larr; Back to Admin Products</a>\n        </Link>\n      </div>\n      <h1 style={{ margin: '8px 0' }}>Attributes for {sku || ''}</h1>\n      {state.loading && <p>Loadingâ€¦</p>}\n      {state.error && <p style={{ color: '#b91c1c' }}>Error: {state.error}</p>}\n      {state.data && (\n        <>\n          <p style={{ color: '#374151' }}>Found {count} attribute{count === 1 ? '' : 's'}.</p>\n          {Array.isArray(state.data.attributes) && state.data.attributes.length > 0 ? (\n            <ul style={list}>\n              {state.data.attributes.map((a, idx) => (\n                <li key={`${a.groupId || a.groupName || 'g'}-${a.code || idx}`} style={listItem}>\n                  <div style={{ display: 'flex', alignItems: 'center', gap: 8, flexWrap: 'wrap' }}>\n                    <strong>{a.name || a.code}</strong>\n                    {a.code ? <code style={codeBadge}>{a.code}</code> : null}\n                    {a.groupName ? <span style={pill}>{a.groupName}</span> : null}\n                    {a.type ? <span style={typePill}>{a.type}</span> : null}\n                  </div>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>No attributes.</p>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nconst container = { padding: 20, maxWidth: 960, margin: '0 auto' };\nconst list = { listStyle: 'none', padding: 0, margin: 0, display: 'flex', flexDirection: 'column', gap: 8 };\nconst listItem = { border: '1px solid #e5e7eb', borderRadius: 8, padding: 12, background: '#fff' };\nconst codeBadge = { background: '#eef2ff', color: '#3730a3', padding: '2px 6px', borderRadius: 4, fontFamily: 'monospace', fontSize: 12 };\nconst pill = { background: '#f1f5f9', color: '#0f172a', padding: '2px 6px', borderRadius: 999, fontSize: 12 };\nconst typePill = { background: '#ecfeff', color: '#155e75', padding: '2px 6px', borderRadius: 999, fontSize: 12 };\n"
    },
    {
      "path": "tests/admin-product-attributes-page.test.js",
      "content": "import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\n\njest.mock('next/router', () => ({\n  useRouter() {\n    return { query: { sku: 'SKU-1' } };\n  },\n}));\n\nimport Page from '../pages/admin/product/[sku]/attributes';\n\ndescribe('Admin Product Attributes (flat) page', () => {\n  beforeEach(() => {\n    global.fetch = jest.fn(async () => ({\n      ok: true,\n      json: async () => ({\n        sku: 'SKU-1',\n        count: 2,\n        attributes: [\n          { groupId: 'seo', groupName: 'SEO', code: 'meta_title', name: 'Meta Title', type: 'text' },\n          { groupId: 'shipping', groupName: 'Shipping', code: 'weight', name: 'Weight', type: 'number', unit: 'kg' },\n        ],\n      }),\n    }));\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  it('renders flattened attributes for a product', async () => {\n    render(<Page />);\n\n    expect(screen.getByText(/Attributes for/i)).toBeInTheDocument();\n\n    await waitFor(() => expect(global.fetch).toHaveBeenCalledWith('/api/products/SKU-1/attributes/flat'));\n\n    expect(await screen.findByText('Meta Title')).toBeInTheDocument();\n    expect(screen.getByText('SEO')).toBeInTheDocument();\n    expect(screen.getByText('Weight')).toBeInTheDocument();\n    expect(screen.getByText(/Found 2 attributes/)).toBeInTheDocument();\n  });\n});\n"
    },
    {
      "path": "README.md",
      "content": "# Simple PIM (Next.js)\n\nThis is a lightweight Product Information Management (PIM) demo built with Next.js and deployed on Vercel. It includes sample data, APIs for products, tags, attributes, attribute groups, and a minimal admin UI.\n\n## Quick start\n\n- Install dependencies: `npm install`\n- Dev server: `npm run dev`\n- Run tests: `npm test`\n\n## Notable features\n\n- Product search, tag filtering, and CSV export on the storefront (home page)\n- Admin dashboard with product stats and tools\n- Attributes and Attribute Groups management and exports\n- Tag stats and bulk tag tools\n- Variant generation helpers\n- Per-product flat attributes viewer at `/admin/product/[sku]/attributes` (uses `/api/products/[sku]/attributes/flat`)\n\n## New: Admin Products filters and CSV export\n\nThe Admin Products page now mirrors the storefront filtering experience:\n\n- Search by name, SKU, or description\n- Filter by tags and in-stock only\n- CSV export link that always reflects the current filters\n- All filters are synced to the URL for easy sharing and reproducible exports\n\nYou can find it at `/admin/products`.\n\n## API\n\nExplore the API routes under `/pages/api/*`. Common ones include:\n\n- `/api/products`, `/api/products/[sku]`, `/api/products/search`, `/api/products/export`\n- `/api/products/[sku]/attributes/flat` (flatten a product's Attribute Groups for easy export/inspection)\n- `/api/tags`, `/api/tags/stats`, `/api/tags/export`\n- `/api/attributes`, `/api/attributes/suggest`\n- `/api/attribute-groups`, `/api/attribute-groups/flat`, `/api/attribute-groups/export`\n\n## Testing\n\nThis project uses Jest and Testing Library. When adding features, ensure you:\n\n- Cover new behavior with tests\n- Keep the main branch green (tests and build passing)\n\nRun tests with `npm test`.\n"
    }
  ]
}