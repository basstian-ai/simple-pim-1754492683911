{
  "commit_message": "Feature: Add in-stock filter to product listing (UI + API) with tests",
  "diff": "--- a/lib/filterProducts.js\n+++ b/lib/filterProducts.js\n@@\n-const filterProducts = (products, { search, tags } = {}) => {\n+const filterProducts = (products, { search, tags, inStock } = {}) => {\n   let result = Array.isArray(products) ? products.slice() : [];\n \n   if (search && typeof search === 'string') {\n     const q = search.toLowerCase();\n     result = result.filter((p) => {\n       return (\n         (p.name && p.name.toLowerCase().includes(q)) ||\n         (p.sku && String(p.sku).toLowerCase().includes(q)) ||\n         (p.description && p.description.toLowerCase().includes(q))\n       );\n     });\n   }\n \n   if (Array.isArray(tags) && tags.length > 0) {\n     const wanted = new Set(tags);\n     result = result.filter((p) => {\n       const ptags = Array.isArray(p.tags) ? p.tags : [];\n       return ptags.some((t) => wanted.has(t));\n     });\n   }\n+\n+  // Optional in-stock filtering; treat any truthy value (\"1\", \"true\", true) as enabled\n+  if (inStock) {\n+    result = result.filter((p) => {\n+      // Accept either boolean inStock or quantity > 0 or stock > 0\n+      if (typeof p.inStock === 'boolean') return p.inStock;\n+      if (typeof p.quantity === 'number') return p.quantity > 0;\n+      if (typeof p.stock === 'number') return p.stock > 0;\n+      return false;\n+    });\n+  }\n \n   return result;\n };\n \n module.exports = filterProducts;\n",
  "files": [
    {
      "path": "pages/api/products/index.js",
      "content": "import productsHandler from '../../../lib/api/productsHandler';\nexport default productsHandler;\n"
    },
    {
      "path": "lib/api/productsHandler.js",
      "content": "const products = require('../../data/products.json');\nconst filterProducts = require('../filterProducts');\n\nfunction parseBool(val) {\n  if (typeof val === 'boolean') return val;\n  if (typeof val === 'string') return ['1', 'true', 'yes', 'on'].includes(val.toLowerCase());\n  return false;\n}\n\nexport default function handler(req, res) {\n  if (req.method !== 'GET') {\n    res.status(405).json({ error: 'Method Not Allowed' });\n    return;\n  }\n\n  const { search = '', tags = '', inStock = '' } = req.query || {};\n  const tagList = typeof tags === 'string' && tags.length > 0 ? tags.split(',').map((t) => t.trim()).filter(Boolean) : [];\n  const onlyInStock = parseBool(inStock);\n\n  const result = filterProducts(products, { search, tags: tagList, inStock: onlyInStock });\n  res.status(200).json(result);\n}\n"
    },
    {
      "path": "components/StockFilterToggle.js",
      "content": "import React from 'react';\n\nexport default function StockFilterToggle({ checked, onChange }) {\n  return (\n    <label style={{ display: 'inline-flex', alignItems: 'center', gap: 6, fontSize: 12, cursor: 'pointer' }}>\n      <input\n        type=\"checkbox\"\n        checked={!!checked}\n        onChange={(e) => onChange(e.target.checked)}\n        aria-label=\"Show in-stock products only\"\n      />\n      In stock only\n    </label>\n  );\n}\n"
    },
    {
      "path": "pages/index.js",
      "content": "import React, { useEffect, useState } from 'react';\nimport ProductList from '../components/ProductList';\nimport ExportCsvLink from '../components/ExportCsvLink';\nimport StockFilterToggle from '../components/StockFilterToggle';\n\nconst Home = () => {\n  const [products, setProducts] = useState([]);\n  const [query, setQuery] = useState('');\n  const [allTags, setAllTags] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [inStockOnly, setInStockOnly] = useState(false);\n\n  useEffect(() => {\n    let cancelled = false;\n    const loadTags = async () => {\n      try {\n        const res = await fetch('/api/tags');\n        const data = await res.json();\n        if (!cancelled) setAllTags(Array.isArray(data) ? data : []);\n      } catch (e) {\n        if (!cancelled) setAllTags([]);\n      }\n    };\n    loadTags();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  useEffect(() => {\n    let active = true;\n    const controller = new AbortController();\n\n    const fetchProducts = async () => {\n      const params = [];\n      if (query) params.push(`search=${encodeURIComponent(query)}`);\n      if (selectedTags.length > 0) params.push(`tags=${selectedTags.map(encodeURIComponent).join(',')}`);\n      if (inStockOnly) params.push('inStock=1');\n      const qs = params.length ? `?${params.join('&')}` : '';\n      const res = await fetch(`/api/products${qs}`, { signal: controller.signal });\n      const data = await res.json();\n      if (active) setProducts(data);\n    };\n\n    const t = setTimeout(fetchProducts, 250);\n\n    return () => {\n      active = false;\n      controller.abort();\n      clearTimeout(t);\n    };\n  }, [query, selectedTags, inStockOnly]);\n\n  const toggleTag = (tag) => {\n    setSelectedTags((prev) => {\n      if (prev.includes(tag)) return prev.filter((t) => t !== tag);\n      return [...prev, tag];\n    });\n  };\n\n  return (\n    <div style={{ maxWidth: 900, margin: '0 auto', padding: '1rem' }}>\n      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem', flexWrap: 'wrap' }}>\n        <input\n          type=\"search\"\n          placeholder=\"Search products by name, SKU or description...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          style={{ flex: 1, minWidth: 260, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n          aria-label=\"Search products\"\n        />\n        <StockFilterToggle checked={inStockOnly} onChange={setInStockOnly} />\n        <span style={{ color: '#666', fontSize: 12 }}>\n          {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n        </span>\n        <ExportCsvLink style={{ fontSize: 12 }} />\n      </div>\n\n      {allTags.length > 0 && (\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem', marginBottom: '1rem' }}>\n          {allTags.map((tag) => {\n            const active = selectedTags.includes(tag);\n            return (\n              <button\n                key={tag}\n                onClick={() => toggleTag(tag)}\n                aria-pressed={active}\n                style={{\n                  padding: '0.25rem 0.5rem',\n                  borderRadius: 999,\n                  border: '1px solid ' + (active ? '#0b64d8' : '#ddd'),\n                  background: active ? '#e7f1ff' : 'white',\n                  color: active ? '#0b64d8' : '#333',\n                  cursor: 'pointer',\n                  fontSize: 12,\n                }}\n              >\n                {tag}\n              </button>\n            );\n          })}\n          {selectedTags.length > 0 && (\n            <button\n              onClick={() => setSelectedTags([])}\n              style={{\n                marginLeft: 'auto',\n                padding: '0.25rem 0.5rem',\n                borderRadius: 6,\n                border: '1px solid #ddd',\n                background: '#fafafa',\n                cursor: 'pointer',\n                fontSize: 12,\n              }}\n              aria-label=\"Clear selected tags\"\n            >\n              Clear tags\n            </button>\n          )}\n        </div>\n      )}\n\n      <ProductList products={products} />\n    </div>\n  );\n};\n\nexport default Home;\n"
    },
    {
      "path": "__tests__/inStockFilter.test.js",
      "content": "const filterProducts = require('../lib/filterProducts');\n\ndescribe('filterProducts inStock option', () => {\n  const products = [\n    { sku: 'A', name: 'Alpha', inStock: true },\n    { sku: 'B', name: 'Beta', inStock: false },\n    { sku: 'C', name: 'Gamma', quantity: 3 },\n    { sku: 'D', name: 'Delta', stock: 0 },\n  ];\n\n  test('when inStock not set, returns all', () => {\n    const result = filterProducts(products, {});\n    expect(result.map((p) => p.sku)).toEqual(['A', 'B', 'C', 'D']);\n  });\n\n  test('when inStock true, filters correctly', () => {\n    const result = filterProducts(products, { inStock: true });\n    expect(result.map((p) => p.sku)).toEqual(['A', 'C']);\n  });\n});\n"
    }
  ]
}