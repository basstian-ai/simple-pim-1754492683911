{
  "commit_message": "Feature: Add product detail API and page by SKU with tests",
  "patch": "--- a/.gitignore\n+++ b/.gitignore\n@@\n node_modules\n .next\n .env*\n+.vercel\n",
  "files": [
    {
      "path": "lib/api/productBySkuHandler.js",
      "content": "const products = require('../../data/products.json');\n\nfunction sendJson(res, status, payload) {\n  if (typeof res.status === 'function') {\n    return res.status(status).json(payload);\n  }\n  // Fallback for simple mock res objects in tests\n  res.statusCode = status;\n  if (typeof res.setHeader === 'function') {\n    res.setHeader('Content-Type', 'application/json');\n  }\n  res._json = payload; // for tests\n  if (typeof res.end === 'function') {\n    res.end(JSON.stringify(payload));\n  }\n  return res;\n}\n\nmodule.exports = async function productBySkuHandler(req, res) {\n  const { method } = req;\n  if (method !== 'GET') {\n    if (typeof res.setHeader === 'function') {\n      res.setHeader('Allow', 'GET');\n    }\n    return sendJson(res, 405, { error: 'Method Not Allowed' });\n  }\n\n  const { sku } = req.query || {};\n  if (!sku) {\n    return sendJson(res, 400, { error: 'Missing sku' });\n  }\n\n  const lookup = Array.isArray(sku) ? sku[0] : sku;\n  const found = products.find(\n    (p) => String(p.sku).toLowerCase() === String(lookup).toLowerCase()\n  );\n\n  if (!found) {\n    return sendJson(res, 404, { error: 'Product not found' });\n  }\n\n  return sendJson(res, 200, found);\n};\n"
    },
    {
      "path": "pages/api/products/[sku].js",
      "content": "import handler from '../../../lib/api/productBySkuHandler';\n\nexport default handler;\n"
    },
    {
      "path": "pages/products/[sku].js",
      "content": "import React from 'react';\n\nexport default function ProductDetail({ product }) {\n  if (!product) {\n    return (\n      <div style={{ maxWidth: 800, margin: '0 auto', padding: '1rem' }}>\n        <h1 style={{ marginBottom: '0.5rem' }}>Product not found</h1>\n        <p>We couldn't find the product you're looking for.</p>\n        <a href=\"/\" style={{ color: '#0b64d8' }}>Back to products</a>\n      </div>\n    );\n  }\n\n  const { name, sku, description, tags, attributes } = product;\n\n  return (\n    <div style={{ maxWidth: 900, margin: '0 auto', padding: '1rem' }}>\n      <a href=\"/\" style={{ color: '#0b64d8' }}>&larr; Back</a>\n      <h1 style={{ margin: '0.5rem 0 0.25rem' }}>{name || sku}</h1>\n      <div style={{ color: '#666', marginBottom: '0.75rem' }}>SKU: {sku}</div>\n      {description && (\n        <p style={{ lineHeight: 1.5 }}>{description}</p>\n      )}\n\n      {Array.isArray(tags) && tags.length > 0 && (\n        <div style={{ marginTop: '1rem' }}>\n          <h3 style={{ marginBottom: 8 }}>Tags</h3>\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem' }}>\n            {tags.map((t) => (\n              <span key={t} style={{ padding: '0.25rem 0.5rem', border: '1px solid #eee', borderRadius: 999, fontSize: 12 }}>{t}</span>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {attributes && typeof attributes === 'object' && Object.keys(attributes).length > 0 && (\n        <div style={{ marginTop: '1rem' }}>\n          <h3 style={{ marginBottom: 8 }}>Attributes</h3>\n          <ul>\n            {Object.entries(attributes).map(([key, value]) => (\n              <li key={key}><strong>{key}:</strong> {Array.isArray(value) ? value.join(', ') : String(value)}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport async function getServerSideProps({ params }) {\n  try {\n    const all = require('../../data/products.json');\n    const lookup = String(params.sku || '').toLowerCase();\n    const product = Array.isArray(all)\n      ? all.find((p) => String(p.sku).toLowerCase() === lookup)\n      : null;\n\n    return {\n      props: { product: product || null }\n    };\n  } catch (e) {\n    return { props: { product: null } };\n  }\n}\n"
    },
    {
      "path": "tests/api-product-by-sku.test.js",
      "content": "const handler = require('../lib/api/productBySkuHandler');\nconst products = require('../data/products.json');\n\nfunction createRes() {\n  return {\n    statusCode: 200,\n    headers: {},\n    _json: undefined,\n    status(code) {\n      this.statusCode = code;\n      return this;\n    },\n    setHeader(key, val) {\n      this.headers[key] = val;\n    },\n    json(payload) {\n      this._json = payload;\n      return this;\n    },\n  };\n}\n\ndescribe('API: GET /api/products/[sku]', () => {\n  it('returns product by sku', async () => {\n    const sample = Array.isArray(products) && products.find((p) => p && p.sku);\n    expect(sample).toBeTruthy();\n    const res = createRes();\n    await handler({ method: 'GET', query: { sku: sample.sku } }, res);\n    expect(res.statusCode).toBe(200);\n    expect(res._json).toBeTruthy();\n    expect(res._json.sku).toBe(sample.sku);\n  });\n\n  it('returns 404 for unknown sku', async () => {\n    const res = createRes();\n    await handler({ method: 'GET', query: { sku: '__missing__sku__' } }, res);\n    expect(res.statusCode).toBe(404);\n    expect(res._json && res._json.error).toBeTruthy();\n  });\n\n  it('rejects non-GET methods', async () => {\n    const res = createRes();\n    await handler({ method: 'POST', query: { sku: 'ANY' } }, res);\n    expect(res.statusCode).toBe(405);\n  });\n});\n"
    }
  ]
}