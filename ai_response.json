{
  "files": [
    {
      "path": "lib/attributeSuggestor.js",
      "content": "/*\n  Simple rule-based attribute suggestion from free text.\n  Exposes: suggestAttributesFromText(text)\n*/\n\nconst COLORS = [\n  'black', 'white', 'red', 'blue', 'green', 'yellow', 'pink', 'purple', 'orange', 'brown', 'beige', 'navy', 'gold', 'silver', 'gray', 'grey', 'teal', 'maroon'\n];\n\nconst MATERIALS = [\n  'cotton', 'wool', 'leather', 'polyester', 'metal', 'steel', 'aluminum', 'aluminium', 'plastic', 'wood', 'glass', 'silk', 'linen'\n];\n\nconst SIZE_TOKENS = ['XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL'];\n\nfunction uniqueBy(arr, key) {\n  const seen = new Set();\n  const out = [];\n  for (const item of arr) {\n    const k = key(item);\n    if (!seen.has(k)) {\n      seen.add(k);\n      out.push(item);\n    }\n  }\n  return out;\n}\n\nfunction capitalize(s) {\n  if (!s) return s;\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nfunction normalizeValue(v) {\n  // Keep original casing for brand-like values, lower-case for known vocab\n  return v;\n}\n\nfunction suggestAttributesFromText(text) {\n  if (!text || typeof text !== 'string') return [];\n  const original = text;\n  const lower = text.toLowerCase();\n  const suggestions = [];\n\n  // Color detection\n  for (const c of COLORS) {\n    const re = new RegExp(`\\\\b${c}\\\\b`, 'i');\n    if (re.test(text)) {\n      suggestions.push({ code: 'color', name: 'Color', value: c.toLowerCase(), confidence: 0.9 });\n    }\n  }\n\n  // Material detection\n  for (const m of MATERIALS) {\n    const re = new RegExp(`\\\\b${m}\\\\b`, 'i');\n    if (re.test(text)) {\n      let confidence = 0.85;\n      const percRe = new RegExp(`(100%|[1-9]\\\\d?%)\\\\s*${m}`, 'i');\n      if (percRe.test(text)) confidence = 0.95;\n      suggestions.push({ code: 'material', name: 'Material', value: m.toLowerCase(), confidence });\n    }\n  }\n\n  // Size token detection (S/M/L...)\n  const sizeTokenMatch = original.match(/\\b(?:size\\s*:?\\s*)?(XS|S|M|L|XL|XXL|XXXL)\\b/i);\n  if (sizeTokenMatch) {\n    suggestions.push({ code: 'size', name: 'Size', value: sizeTokenMatch[1].toUpperCase(), confidence: 0.92 });\n  }\n\n  // Numeric dimensions e.g., 10 x 20 x 5 cm or 10x20x5 in\n  const dimMatch = lower.match(/(\\d+(?:[\\.,]\\d+)?)\\s*[x×]\\s*(\\d+(?:[\\.,]\\d+)?)\\s*[x×]\\s*(\\d+(?:[\\.,]\\d+)?)\\s*(cm|mm|in|inch|inches|ft|m)\\b/);\n  if (dimMatch) {\n    const unit = dimMatch[4];\n    const nums = [dimMatch[1], dimMatch[2], dimMatch[3]].map(n => n.replace(',', '.'));\n    suggestions.push({ code: 'length', name: 'Length', value: `${nums[0]} ${unit}`, confidence: 0.88 });\n    suggestions.push({ code: 'width', name: 'Width', value: `${nums[1]} ${unit}`, confidence: 0.88 });\n    suggestions.push({ code: 'height', name: 'Height', value: `${nums[2]} ${unit}`, confidence: 0.88 });\n  }\n\n  // Single dimension patterns: 10cm, 2 in, etc.\n  const singleDims = [\n    { code: 'length', name: 'Length', re: /(length|long|l)\\s*[:=]?\\s*(\\d+(?:[\\.,]\\d+)?)\\s*(cm|mm|in|inch|inches|ft|m)\\b/i },\n    { code: 'width', name: 'Width', re: /(width|wide|w)\\s*[:=]?\\s*(\\d+(?:[\\.,]\\d+)?)\\s*(cm|mm|in|inch|inches|ft|m)\\b/i },\n    { code: 'height', name: 'Height', re: /(height|high|h)\\s*[:=]?\\s*(\\d+(?:[\\.,]\\d+)?)\\s*(cm|mm|in|inch|inches|ft|m)\\b/i },\n  ];\n  for (const d of singleDims) {\n    const m = original.match(d.re);\n    if (m) {\n      suggestions.push({ code: d.code, name: d.name, value: `${m[2].replace(',', '.')} ${m[3]}`, confidence: 0.86 });\n    }\n  }\n\n  // Brand detection\n  // Pattern 1: Brand: Acme\n  let brandMatch = original.match(/\\bBrand\\s*:?\\s*([A-Z][A-Za-z0-9&\\- ]{1,40})\\b/);\n  if (!brandMatch) {\n    // Pattern 2: by Acme\n    brandMatch = original.match(/\\bby\\s+([A-Z][A-Za-z0-9&\\- ]{1,40})\\b/);\n  }\n  if (brandMatch) {\n    const brand = brandMatch[1].trim().replace(/\\s{2,}/g, ' ');\n    suggestions.push({ code: 'brand', name: 'Brand', value: normalizeValue(brand), confidence: 0.95 });\n  }\n\n  // Fallback: model/sku like patterns: SKU: ABC-123\n  const skuMatch = original.match(/\\b(SKU|Model)\\s*:?\\s*([A-Z0-9\\-_.]{2,32})\\b/i);\n  if (skuMatch) {\n    const label = skuMatch[1].toUpperCase() === 'SKU' ? 'sku' : 'model';\n    suggestions.push({ code: label, name: label.toUpperCase(), value: skuMatch[2], confidence: 0.93 });\n  }\n\n  // De-duplicate by code+value\n  const deduped = uniqueBy(suggestions, (s) => `${s.code}|${String(s.value).toLowerCase()}`);\n  return deduped;\n}\n\nmodule.exports = {\n  suggestAttributesFromText,\n  COLORS,\n  MATERIALS,\n  SIZE_TOKENS,\n};\n"
    },
    {
      "path": "pages/api/attributes/suggest.js",
      "content": "const { suggestAttributesFromText } = require('../../../lib/attributeSuggestor');\n\nexport default function handler(req, res) {\n  // Allow simple CORS for local tooling and GET for convenience\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'POST,GET,OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n  if (req.method === 'OPTIONS') {\n    res.status(204).end();\n    return;\n  }\n\n  try {\n    let text = '';\n    if (req.method === 'GET') {\n      text = (req.query.text || '').toString();\n    } else if (req.method === 'POST') {\n      if (typeof req.body === 'string') {\n        try {\n          const parsed = JSON.parse(req.body);\n          text = parsed.description || parsed.text || '';\n        } catch (e) {\n          text = '';\n        }\n      } else {\n        text = (req.body && (req.body.description || req.body.text)) || '';\n      }\n    } else {\n      res.setHeader('Allow', ['GET', 'POST', 'OPTIONS']);\n      res.status(405).json({ error: 'Method Not Allowed' });\n      return;\n    }\n\n    if (!text || typeof text !== 'string') {\n      res.status(400).json({ error: 'Missing description/text' });\n      return;\n    }\n\n    const attributes = suggestAttributesFromText(text);\n    res.status(200).json({ attributes, count: attributes.length });\n  } catch (err) {\n    console.error('attribute suggestion error', err);\n    res.status(500).json({ error: 'Internal Server Error' });\n  }\n}\n"
    },
    {
      "path": "pages/admin/attribute-suggest.js",
      "content": "import { useState } from 'react';\n\nexport default function AttributeSuggestPage() {\n  const [text, setText] = useState('Acme Cotton T-Shirt, size M, color Black. Made of 100% cotton. Brand: Acme. Dimensions: 10 x 20 x 5 cm. SKU: SHIRT-001');\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    setResult(null);\n    try {\n      const res = await fetch('/api/attributes/suggest', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ description: text })\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Request failed');\n      setResult(data);\n    } catch (err) {\n      setError(err.message || 'Error');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <div style={{ maxWidth: 900, margin: '20px auto', padding: '0 16px' }}>\n      <h1>Attribute Suggestions (Beta)</h1>\n      <p>Paste a product title or description. This tool suggests structured attributes like color, size, material, brand, and basic dimensions.</p>\n      <form onSubmit={onSubmit}>\n        <textarea\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          rows={6}\n          style={{ width: '100%', fontFamily: 'inherit' }}\n        />\n        <div style={{ marginTop: 12, display: 'flex', gap: 8 }}>\n          <button type=\"submit\" disabled={loading}>\n            {loading ? 'Suggesting…' : 'Suggest Attributes'}\n          </button>\n          {error && <span style={{ color: 'red' }}>{error}</span>}\n        </div>\n      </form>\n\n      {result && (\n        <div style={{ marginTop: 24 }}>\n          <h2>Suggestions ({result.count})</h2>\n          {result.attributes.length === 0 && <p>No attributes found.</p>}\n          {result.attributes.length > 0 && (\n            <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n              <thead>\n                <tr>\n                  <th style={{ textAlign: 'left', borderBottom: '1px solid #ddd', padding: '6px' }}>Code</th>\n                  <th style={{ textAlign: 'left', borderBottom: '1px solid #ddd', padding: '6px' }}>Name</th>\n                  <th style={{ textAlign: 'left', borderBottom: '1px solid #ddd', padding: '6px' }}>Value</th>\n                  <th style={{ textAlign: 'left', borderBottom: '1px solid #ddd', padding: '6px' }}>Confidence</th>\n                </tr>\n              </thead>\n              <tbody>\n                {result.attributes.map((a, idx) => (\n                  <tr key={idx}>\n                    <td style={{ borderBottom: '1px solid #f0f0f0', padding: '6px' }}>{a.code}</td>\n                    <td style={{ borderBottom: '1px solid #f0f0f0', padding: '6px' }}>{a.name}</td>\n                    <td style={{ borderBottom: '1px solid #f0f0f0', padding: '6px' }}>{String(a.value)}</td>\n                    <td style={{ borderBottom: '1px solid #f0f0f0', padding: '6px' }}>{Math.round((a.confidence || 0) * 100)}%</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "__tests__/attributeSuggestor.test.js",
      "content": "const assert = require('assert');\nconst { suggestAttributesFromText } = require('../lib/attributeSuggestor');\n\nfunction run() {\n  const text = 'Acme Cotton T-Shirt, size M, color Black. Made of 100% cotton. Brand: Acme. Dimensions: 10 x 20 x 5 cm. SKU: SHIRT-001';\n  const attrs = suggestAttributesFromText(text);\n\n  const byCode = (code) => attrs.filter(a => a.code === code);\n  const has = (code, val) => byCode(code).some(a => String(a.value).toLowerCase() === String(val).toLowerCase());\n\n  assert.ok(attrs.length >= 4, 'should extract several attributes');\n  assert.ok(has('color', 'black'), 'should detect color black');\n  assert.ok(has('material', 'cotton'), 'should detect material cotton');\n  assert.ok(has('size', 'M'), 'should detect size M');\n  assert.ok(has('brand', 'Acme'), 'should detect brand Acme');\n  assert.ok(has('sku', 'SHIRT-001'), 'should detect SKU');\n}\n\nif (typeof describe === 'function') {\n  describe('attributeSuggestor', () => {\n    it('extracts common attributes from text', () => {\n      run();\n    });\n  });\n} else {\n  // Fallback runner if executed directly via node\n  run();\n  console.log('attributeSuggestor tests passed');\n}\n"
    }
  ]
}