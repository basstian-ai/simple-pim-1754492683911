{
  "commit_message": "feat: add product search suggestions API and core with tests",
  "diff": "--- a/lib/productSuggest.js\n+++ b/lib/productSuggest.js\n@@\n+'use strict';\n+\n+function normalize(s) {\n+  return (s || '').toString().toLowerCase();\n+}\n+\n+function scoreProduct(q, p, tokens) {\n+  const name = normalize(p.name);\n+  const sku = normalize(p.sku);\n+  const desc = normalize(p.description);\n+\n+  let score = 0;\n+\n+  if (sku === q) score += 1000;\n+  if (name === q) score += 900;\n+\n+  const skuPos = sku.indexOf(q);\n+  if (skuPos === 0) score += 800;\n+  else if (skuPos > -1) score += Math.max(0, 600 - skuPos);\n+\n+  const namePos = name.indexOf(q);\n+  if (namePos === 0) score += 500;\n+  else if (namePos > -1) score += Math.max(0, 400 - namePos);\n+\n+  const descPos = desc.indexOf(q);\n+  if (descPos > -1) score += Math.max(0, 100 - descPos);\n+\n+  if (Array.isArray(tokens) && tokens.length) {\n+    for (const t of tokens) {\n+      const inSku = sku.indexOf(t) > -1;\n+      const inName = name.indexOf(t) > -1;\n+      const inDesc = desc.indexOf(t) > -1;\n+      if (inSku) score += 30;\n+      if (inName) score += 20;\n+      if (!inSku && !inName && inDesc) score += 5;\n+    }\n+  }\n+\n+  return score;\n+}\n+\n+function suggestProducts(query, products, limit = 10) {\n+  const q = normalize(query || '');\n+  if (!q.trim()) return [];\n+  const tokens = q.split(/\\s+/).filter(Boolean);\n+\n+  const ranked = (products || [])\n+    .map((p) => ({ p, score: scoreProduct(q, p, tokens) }))\n+    .filter((r) => r.score > 0)\n+    .sort((a, b) => {\n+      if (b.score !== a.score) return b.score - a.score;\n+      const an = (a.p.name || '').toString();\n+      const bn = (b.p.name || '').toString();\n+      return an.localeCompare(bn);\n+    })\n+    .slice(0, Math.max(1, Math.min(50, limit)));\n+\n+  return ranked.map(({ p }) => ({ sku: p.sku, name: p.name }));\n+}\n+\n+module.exports = {\n+  suggestProducts,\n+};\n+\n",
  "files": [
    {
      "path": "lib/productSuggest.js",
      "content": "'use strict';\n\nfunction normalize(s) {\n  return (s || '').toString().toLowerCase();\n}\n\nfunction scoreProduct(q, p, tokens) {\n  const name = normalize(p.name);\n  const sku = normalize(p.sku);\n  const desc = normalize(p.description);\n\n  let score = 0;\n\n  if (sku === q) score += 1000;\n  if (name === q) score += 900;\n\n  const skuPos = sku.indexOf(q);\n  if (skuPos === 0) score += 800;\n  else if (skuPos > -1) score += Math.max(0, 600 - skuPos);\n\n  const namePos = name.indexOf(q);\n  if (namePos === 0) score += 500;\n  else if (namePos > -1) score += Math.max(0, 400 - namePos);\n\n  const descPos = desc.indexOf(q);\n  if (descPos > -1) score += Math.max(0, 100 - descPos);\n\n  if (Array.isArray(tokens) && tokens.length) {\n    for (const t of tokens) {\n      const inSku = sku.indexOf(t) > -1;\n      const inName = name.indexOf(t) > -1;\n      const inDesc = desc.indexOf(t) > -1;\n      if (inSku) score += 30;\n      if (inName) score += 20;\n      if (!inSku && !inName && inDesc) score += 5;\n    }\n  }\n\n  return score;\n}\n\nfunction suggestProducts(query, products, limit = 10) {\n  const q = normalize(query || '');\n  if (!q.trim()) return [];\n  const tokens = q.split(/\\s+/).filter(Boolean);\n\n  const ranked = (products || [])\n    .map((p) => ({ p, score: scoreProduct(q, p, tokens) }))\n    .filter((r) => r.score > 0)\n    .sort((a, b) => {\n      if (b.score !== a.score) return b.score - a.score;\n      const an = (a.p.name || '').toString();\n      const bn = (b.p.name || '').toString();\n      return an.localeCompare(bn);\n    })\n    .slice(0, Math.max(1, Math.min(50, limit)));\n\n  return ranked.map(({ p }) => ({ sku: p.sku, name: p.name }));\n}\n\nmodule.exports = {\n  suggestProducts,\n};\n"
    },
    {
      "path": "pages/api/products/suggest.js",
      "content": "const { suggestProducts } = require('../../../lib/productSuggest');\n\nmodule.exports = (req, res) => {\n  if (req.method !== 'GET') {\n    res.setHeader('Allow', 'GET');\n    res.status(405).json({ error: 'Method Not Allowed' });\n    return;\n  }\n\n  const { q, query, search, limit } = req.query || {};\n  const term = (q || query || search || '').toString();\n  const lim = Math.min(50, Math.max(1, parseInt(limit, 10) || 10));\n\n  try {\n    const products = require('../../../data/products.json');\n    const suggestions = suggestProducts(term, products, lim);\n    res.status(200).json(suggestions);\n  } catch (e) {\n    res.status(500).json({ error: 'Failed to generate suggestions' });\n  }\n};\n"
    },
    {
      "path": "tests/productSuggest.test.js",
      "content": "const { suggestProducts } = require('../lib/productSuggest');\n\ntest('suggestProducts returns empty for empty query', () => {\n  const products = [\n    { sku: 'ABC-123', name: 'Red Shirt', description: 'Cotton shirt' },\n  ];\n  expect(suggestProducts('', products)).toEqual([]);\n});\n\ntest('suggestProducts favors exact SKU and name matches', () => {\n  const products = [\n    { sku: 'ABC-123', name: 'Red Shirt', description: 'Cotton shirt' },\n    { sku: 'PHONE-XL', name: 'Smartphone XL', description: 'Latest smartphone' },\n    { sku: 'ABC-999', name: 'Blue Shirt', description: 'Blue cotton shirt' },\n  ];\n\n  const bySku = suggestProducts('abc-123', products);\n  expect(bySku[0]).toEqual({ sku: 'ABC-123', name: 'Red Shirt' });\n\n  const byName = suggestProducts('smartphone xl', products);\n  expect(byName[0]).toEqual({ sku: 'PHONE-XL', name: 'Smartphone XL' });\n});\n\ntest('suggestProducts token scoring boosts multi-word queries', () => {\n  const products = [\n    { sku: 'TSHIRT-RED-M', name: 'T-Shirt Red Medium', description: 'Soft cotton tee' },\n    { sku: 'TSHIRT-BLUE-M', name: 'T-Shirt Blue Medium', description: 'Soft cotton tee' },\n  ];\n\n  const res = suggestProducts('red shirt', products);\n  expect(res[0].sku).toBe('TSHIRT-RED-M');\n});\n"
    }
  ]
}