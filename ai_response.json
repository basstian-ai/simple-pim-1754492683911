{
  "commit_message": "feat: add deterministic placeholder images to products and surface them in Home list; add tests\n\n- New lib/ensureProductImages.js: utility to add deterministic placeholder image URLs to product objects (uses sku/name as seed).\n- pages/index.js: augment fetched products with images (in addition to timestamps) before rendering.\n- tests/ensureProductImages.test.js: unit tests for the image-augmentation utility.\n\nThis improves the realism of sample data (images) for dashboard/admin UIs and provides a small, test-covered enhancement.",
  "files": [
    {
      "path": "lib/ensureProductImages.js",
      "content": "import slugify from './slugify';\n\n// Add deterministic placeholder image URLs to products.\n// Uses product.sku (preferred) or a slugified product name as the seed so the\n// same product always gets the same image URL. If the product already has\n// an image property, it is left untouched.\nexport function addImagesToProducts(products = []) {\n  if (!Array.isArray(products)) return [];\n\n  return products.map((p) => {\n    if (!p || typeof p !== 'object') return p;\n    if (p.image) return p;\n\n    const seed = (p.sku && String(p.sku)) || slugify(p.name || '') || 'product';\n    // Use picsum.photos with a deterministic seed per product.\n    // The encoded seed ensures safe characters in the URL.\n    const image = `https://picsum.photos/seed/${encodeURIComponent(seed)}/200/200`;\n    return { ...p, image };\n  });\n}\n\nexport default addImagesToProducts;\n"
    },
    {
      "path": "pages/index.js",
      "content": "import React, { useEffect, useRef, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport ProductList from '../components/ProductList';\nimport ExportCsvLink from '../components/ExportCsvLink';\nimport StockFilterToggle from '../components/StockFilterToggle';\nimport { addTimestampsToProducts } from '../lib/ensureTimestamps';\nimport { addImagesToProducts } from '../lib/ensureProductImages';\n\nconst Home = () => {\n  const router = useRouter();\n  const [products, setProducts] = useState([]);\n  const [query, setQuery] = useState('');\n  const [allTags, setAllTags] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [inStockOnly, setInStockOnly] = useState(false);\n\n  // ref for the search input so we can focus it via keyboard shortcut\n  const searchInputRef = useRef(null);\n\n  const initializedFromUrl = useRef(false);\n\n  // Initialize filter state from URL on first render\n  useEffect(() => {\n    if (initializedFromUrl.current) return;\n    const q = router?.query || {};\n    if (typeof q.search === 'string') setQuery(q.search);\n    if (typeof q.tags === 'string' && q.tags.trim()) {\n      setSelectedTags(q.tags.split(',').map((t) => decodeURIComponent(t)));\n    }\n    if (q.inStock === '1' || q.inStock === 'true') setInStockOnly(true);\n    initializedFromUrl.current = true;\n  }, [router?.query]);\n\n  // Keep URL in sync with filters (for shareable links and CSV export)\n  useEffect(() => {\n    // Avoid pushing identical queries repeatedly\n    const nextQuery = {};\n    if (query) nextQuery.search = query;\n    if (selectedTags.length) nextQuery.tags = selectedTags.join(',');\n    if (inStockOnly) nextQuery.inStock = '1';\n\n    const current = router?.query || {};\n    const same =\n      current.search === nextQuery.search &&\n      (current.tags || '') === (nextQuery.tags || '') &&\n      (current.inStock || '') === (nextQuery.inStock || '');\n\n    if (!same) {\n      router.replace({ pathname: router.pathname, query: nextQuery }, undefined, { shallow: true });\n    }\n  }, [query, selectedTags, inStockOnly]);\n\n  useEffect(() => {\n    let cancelled = false;\n    const loadTags = async () => {\n      try {\n        const res = await fetch('/api/tags');\n        const data = await res.json();\n        if (!cancelled) setAllTags(Array.isArray(data) ? data : []);\n      } catch (e) {\n        if (!cancelled) setAllTags([]);\n      }\n    };\n    loadTags();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  useEffect(() => {\n    let active = true;\n    const controller = new AbortController();\n\n    const fetchProducts = async () => {\n      const params = [];\n      if (query) params.push(`search=${encodeURIComponent(query)}`);\n      if (selectedTags.length > 0) params.push(`tags=${selectedTags.map(encodeURIComponent).join(',')}`);\n      if (inStockOnly) params.push('inStock=1');\n      const qs = params.length ? `?${params.join('&')}` : '';\n      const res = await fetch(`/api/products${qs}`, { signal: controller.signal });\n      const data = await res.json();\n      // augment products with deterministic timestamps for richer UI and export\n      const augmented = addTimestampsToProducts(Array.isArray(data) ? data : []);\n      // also ensure each product has a deterministic placeholder image\n      const withImages = addImagesToProducts(augmented);\n      if (active) setProducts(withImages);\n    };\n\n    const t = setTimeout(fetchProducts, 250);\n\n    return () => {\n      active = false;\n      controller.abort();\n      clearTimeout(t);\n    };\n  }, [query, selectedTags, inStockOnly]);\n\n  // Keyboard shortcut: press '/' to focus the search input\n  useEffect(() => {\n    const handler = (e) => {\n      // only trigger on the '/' key, ignore when focus is already in an input/textarea\n      if (e.key === '/') {\n        const active = document.activeElement;\n        const tag = active && active.tagName && active.tagName.toLowerCase();\n        if (tag !== 'input' && tag !== 'textarea') {\n          e.preventDefault();\n          if (searchInputRef.current) searchInputRef.current.focus();\n        }\n      }\n    };\n    window.addEventListener('keydown', handler);\n    return () => window.removeEventListener('keydown', handler);\n  }, []);\n\n  const toggleTag = (tag) => {\n    setSelectedTags((prev) => {\n      if (prev.includes(tag)) return prev.filter((t) => t !== tag);\n      return [...prev, tag];\n    });\n  };\n\n  return (\n    <div style={{ maxWidth: 900, margin: '0 auto', padding: '1rem' }}>\n      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem', flexWrap: 'wrap' }}>\n        <input\n          ref={searchInputRef}\n          type=\"search\"\n          placeholder=\"Search products by name, SKU or description...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          style={{ flex: 1, minWidth: 260, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n          aria-label=\"Search products\"\n        />\n        <StockFilterToggle checked={inStockOnly} onChange={setInStockOnly} />\n        <span style={{ color: '#666', fontSize: 12 }}>\n          {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n        </span>\n        <ExportCsvLink style={{ fontSize: 12 }} />\n      </div>\n\n      {allTags.length > 0 && (\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem', marginBottom: '1rem' }}>\n          {allTags.map((tag) => {\n            const active = selectedTags.includes(tag);\n            return (\n              <button\n                key={tag}\n                onClick={() => toggleTag(tag)}\n                aria-pressed={active}\n                style={{\n                  padding: '0.25rem 0.5rem',\n                  borderRadius: 999,\n                  border: '1px solid ' + (active ? '#0b64d8' : '#ddd'),\n                  background: active ? '#e7f1ff' : 'white',\n                  color: active ? '#0b64d8' : '#333',\n                  cursor: 'pointer',\n                  fontSize: 12,\n                }}\n              >\n                {tag}\n              </button>\n            );\n          })}\n          {selectedTags.length > 0 && (\n            <button\n              onClick={() => setSelectedTags([])}\n              style={{\n                marginLeft: 'auto',\n                padding: '0.25rem 0.5rem',\n                borderRadius: 6,\n                border: '1px solid #ddd',\n                background: '#fafafa',\n                cursor: 'pointer',\n                fontSize: 12,\n              }}\n              aria-label=\"Clear selected tags\"\n            >\n              Clear tags\n            </button>\n          )}\n        </div>\n      )}\n\n      <ProductList products={products} />\n    </div>\n  );\n};\n\nexport default Home;\n"
    },
    {
      "path": "tests/ensureProductImages.test.js",
      "content": "import { addImagesToProducts } from '../lib/ensureProductImages';\n\ndescribe('addImagesToProducts', () => {\n  it('adds an image property using sku as seed when missing', () => {\n    const input = [\n      { sku: 'SKU-123', name: 'Test product' },\n      { sku: 'another/sku', name: 'Another' },\n    ];\n    const out = addImagesToProducts(input);\n    expect(out).toHaveLength(2);\n    expect(out[0].image).toBeDefined();\n    expect(typeof out[0].image).toBe('string');\n    expect(out[0].image).toContain('/200/200');\n    // seed should be encoded for URL safety\n    expect(encodeURIComponent('another/sku')).toBeTruthy();\n    expect(out[1].image).toContain(encodeURIComponent('another/sku'));\n  });\n\n  it('uses slugified name when sku is not available', () => {\n    const input = [{ name: 'Fancy Product  â™ª' }];\n    const out = addImagesToProducts(input);\n    expect(out[0].image).toContain('/200/200');\n    // should include a slugified fragment (fancy-product)\n    expect(out[0].image.toLowerCase()).toContain('fancy-product');\n  });\n\n  it('preserves an existing image property', () => {\n    const input = [{ sku: 'a', image: 'https://example.com/x.png' }];\n    const out = addImagesToProducts(input);\n    expect(out[0].image).toBe('https://example.com/x.png');\n  });\n\n  it('handles non-arrays gracefully', () => {\n    expect(addImagesToProducts(null)).toEqual([]);\n    expect(addImagesToProducts(undefined)).toEqual([]);\n  });\n});\n"
    }
  ]
}