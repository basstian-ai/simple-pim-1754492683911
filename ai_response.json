{
  "files": [
    {
      "path": "lib/attributeGroups.js",
      "content": "/*\n  Simple in-memory Attribute Groups for the PIM\n  - Provides a read-only dataset and a query helper used by the API route\n*/\n\nconst ATTRIBUTE_GROUPS = [\n  {\n    id: 'core',\n    name: 'Core',\n    attributes: [\n      { code: 'sku', name: 'SKU', type: 'text', required: true },\n      { code: 'name', name: 'Name', type: 'text', required: true },\n      { code: 'description', name: 'Description', type: 'richtext', required: false }\n    ]\n  },\n  {\n    id: 'pricing',\n    name: 'Pricing',\n    attributes: [\n      { code: 'price', name: 'Price', type: 'number', required: true },\n      { code: 'currency', name: 'Currency', type: 'select', options: ['USD', 'EUR', 'GBP'], required: true }\n    ]\n  },\n  {\n    id: 'seo',\n    name: 'SEO',\n    attributes: [\n      { code: 'meta_title', name: 'Meta title', type: 'text', required: false },\n      { code: 'meta_description', name: 'Meta description', type: 'text', required: false }\n    ]\n  }\n];\n\nfunction queryAttributeGroups(opts = {}) {\n  const { q, limit } = opts;\n  let data = ATTRIBUTE_GROUPS.slice();\n\n  if (q && typeof q === 'string') {\n    const s = q.toLowerCase();\n    data = data.filter(\n      (g) =>\n        g.name.toLowerCase().includes(s) ||\n        g.attributes.some(\n          (a) =>\n            (a.name && String(a.name).toLowerCase().includes(s)) ||\n            (a.code && String(a.code).toLowerCase().includes(s))\n        )\n    );\n  }\n\n  if (limit !== undefined) {\n    const n = Number(limit);\n    if (!Number.isNaN(n) && n >= 0) {\n      data = data.slice(0, n);\n    }\n  }\n\n  return data;\n}\n\nmodule.exports = { ATTRIBUTE_GROUPS, queryAttributeGroups };\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "const { queryAttributeGroups } = require('../../lib/attributeGroups');\n\nmodule.exports = function handler(req, res) {\n  if (req.method === 'GET' || req.method === 'HEAD') {\n    const q = Array.isArray(req.query.q) ? req.query.q[0] : req.query.q;\n    const limit = Array.isArray(req.query.limit) ? req.query.limit[0] : req.query.limit;\n    const items = queryAttributeGroups({ q, limit });\n\n    res.status(200).json({ items, total: items.length });\n    return;\n  }\n\n  res.setHeader('Allow', ['GET', 'HEAD']);\n  res.status(405).json({ error: 'Method Not Allowed' });\n};\n"
    },
    {
      "path": "tests/attribute-groups.test.js",
      "content": "const assert = require('assert');\nconst { queryAttributeGroups, ATTRIBUTE_GROUPS } = require('../lib/attributeGroups');\n\n// Basic unit tests for the attribute groups query helper\n(function run() {\n  // returns all by default\n  const all = queryAttributeGroups();\n  assert(Array.isArray(all), 'Expected an array');\n  assert.strictEqual(all.length, ATTRIBUTE_GROUPS.length, 'Expected full list');\n\n  // filter by attribute code\n  const pricing = queryAttributeGroups({ q: 'price' });\n  assert(pricing.find((g) => g.id === 'pricing'), 'Expected pricing group to be present when filtering by price');\n\n  // respects limit\n  const limited = queryAttributeGroups({ limit: 1 });\n  assert.strictEqual(limited.length, 1, 'Expected limit to be applied');\n\n  // case-insensitive search by group name\n  const seo = queryAttributeGroups({ q: 'SeO' });\n  assert(seo.length >= 1 && seo[0].id === 'seo', 'Expected to find SEO group case-insensitively');\n})();\n\nconsole.log('attribute-groups tests: ok');\n"
    }
  ]
}