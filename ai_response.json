{
  "files": [
    {
      "path": "lib/sampleData.js",
      "content": "/*\n  Sample catalog data with attribute groups and basic variant fields.\n  CommonJS exports so it can be used by Next.js pages and Node-based tests.\n*/\n\nconst attributeGroups = [\n  {\n    code: \"basics\",\n    name: \"Basics\",\n    attributes: [\n      {\n        code: \"color\",\n        name: \"Color\",\n        type: \"select\",\n        options: [\n          { code: \"red\", label: \"Red\" },\n          { code: \"blue\", label: \"Blue\" },\n          { code: \"green\", label: \"Green\" }\n        ]\n      },\n      {\n        code: \"size\",\n        name: \"Size\",\n        type: \"select\",\n        options: [\n          { code: \"s\", label: \"Small\" },\n          { code: \"m\", label: \"Medium\" },\n          { code: \"l\", label: \"Large\" }\n        ]\n      }\n    ]\n  },\n  {\n    code: \"materials\",\n    name: \"Materials\",\n    attributes: [\n      {\n        code: \"material\",\n        name: \"Material\",\n        type: \"select\",\n        options: [\n          { code: \"cotton\", label: \"Cotton\" },\n          { code: \"wool\", label: \"Wool\" },\n          { code: \"poly\", label: \"Polyester\" }\n        ]\n      }\n    ]\n  }\n];\n\nconst products = [\n  {\n    id: \"p-shirt-classic\",\n    slug: \"classic-tee\",\n    name: \"Classic Tee\",\n    description: \"A timeless classic tee with multiple colors and sizes.\",\n    images: [\n      \"/images/products/classic-tee-red.jpg\",\n      \"/images/products/classic-tee-blue.jpg\"\n    ],\n    currency: \"USD\",\n    price: 1999,\n    attributes: { material: \"cotton\" },\n    variants: [\n      { id: \"p-shirt-classic-red-s\", sku: \"CT-RED-S\", price: 1999, stock: 25, options: { color: \"red\", size: \"s\" } },\n      { id: \"p-shirt-classic-red-m\", sku: \"CT-RED-M\", price: 1999, stock: 30, options: { color: \"red\", size: \"m\" } },\n      { id: \"p-shirt-classic-blue-m\", sku: \"CT-BLU-M\", price: 1999, stock: 12, options: { color: \"blue\", size: \"m\" } },\n      { id: \"p-shirt-classic-green-l\", sku: \"CT-GRN-L\", price: 1999, stock: 5, options: { color: \"green\", size: \"l\" } }\n    ]\n  },\n  {\n    id: \"p-hoodie-premium\",\n    slug: \"premium-hoodie\",\n    name: \"Premium Hoodie\",\n    description: \"Cozy premium hoodie with soft-touch materials.\",\n    images: [\n      \"/images/products/premium-hoodie-black.jpg\"\n    ],\n    currency: \"USD\",\n    price: 4999,\n    attributes: { material: \"wool\" },\n    variants: [\n      { id: \"p-hoodie-premium-red-m\", sku: \"PH-RED-M\", price: 4999, stock: 8, options: { color: \"red\", size: \"m\" } },\n      { id: \"p-hoodie-premium-blue-l\", sku: \"PH-BLU-L\", price: 4999, stock: 0, options: { color: \"blue\", size: \"l\" } },\n      { id: \"p-hoodie-premium-green-m\", sku: \"PH-GRN-M\", price: 4999, stock: 3, options: { color: \"green\", size: \"m\" } }\n    ]\n  },\n  {\n    id: \"p-joggers-lite\",\n    slug: \"lite-joggers\",\n    name: \"Lite Joggers\",\n    description: \"Breathable joggers for everyday comfort.\",\n    images: [\n      \"/images/products/lite-joggers-gray.jpg\"\n    ],\n    currency: \"USD\",\n    price: 3999,\n    attributes: { material: \"poly\" },\n    variants: [\n      { id: \"p-joggers-lite-blue-s\", sku: \"LJ-BLU-S\", price: 3999, stock: 40, options: { color: \"blue\", size: \"s\" } },\n      { id: \"p-joggers-lite-blue-m\", sku: \"LJ-BLU-M\", price: 3999, stock: 22, options: { color: \"blue\", size: \"m\" } },\n      { id: \"p-joggers-lite-blue-l\", sku: \"LJ-BLU-L\", price: 3999, stock: 10, options: { color: \"blue\", size: \"l\" } }\n    ]\n  }\n];\n\nfunction getSampleAttributes() {\n  return JSON.parse(JSON.stringify(attributeGroups));\n}\n\nfunction getSampleProducts() {\n  return JSON.parse(JSON.stringify(products));\n}\n\nfunction getSampleCatalog() {\n  return { attributes: getSampleAttributes(), products: getSampleProducts() };\n}\n\nmodule.exports = { getSampleAttributes, getSampleProducts, getSampleCatalog };\n"
    },
    {
      "path": "pages/api/admin/products.js",
      "content": "const { getSampleCatalog } = require(\"../../../lib/sampleData\");\n\nexport default function handler(req, res) {\n  const catalog = getSampleCatalog();\n  res.status(200).json({\n    success: true,\n    attributes: catalog.attributes,\n    products: catalog.products,\n    meta: {\n      count: catalog.products.length,\n      generatedAt: new Date().toISOString()\n    }\n  });\n}\n"
    },
    {
      "path": "pages/admin/index.js",
      "content": "import React from \"react\";\n\nfunction Stat({ label, value }) {\n  return (\n    <div style={{ padding: 12, border: \"1px solid #e5e7eb\", borderRadius: 8, background: \"#fff\" }}>\n      <div style={{ color: \"#6b7280\", fontSize: 12, textTransform: \"uppercase\", letterSpacing: 1 }}>{label}</div>\n      <div style={{ fontSize: 20, fontWeight: 700 }}>{value}</div>\n    </div>\n  );\n}\n\nfunction VariantsTable({ variants }) {\n  return (\n    <table style={{ width: \"100%\", borderCollapse: \"collapse\" }}>\n      <thead>\n        <tr>\n          <th style={{ textAlign: \"left\", borderBottom: \"1px solid #e5e7eb\", padding: \"8px 4px\" }}>SKU</th>\n          <th style={{ textAlign: \"left\", borderBottom: \"1px solid #e5e7eb\", padding: \"8px 4px\" }}>Options</th>\n          <th style={{ textAlign: \"right\", borderBottom: \"1px solid #e5e7eb\", padding: \"8px 4px\" }}>Price</th>\n          <th style={{ textAlign: \"right\", borderBottom: \"1px solid #e5e7eb\", padding: \"8px 4px\" }}>Stock</th>\n        </tr>\n      </thead>\n      <tbody>\n        {variants.map((v) => (\n          <tr key={v.id}>\n            <td style={{ padding: \"8px 4px\", borderBottom: \"1px solid #f3f4f6\" }}>{v.sku}</td>\n            <td style={{ padding: \"8px 4px\", borderBottom: \"1px solid #f3f4f6\" }}>\n              {Object.entries(v.options).map(([k, val]) => (\n                <span key={k} style={{ display: \"inline-block\", marginRight: 8, padding: \"2px 6px\", background: \"#f3f4f6\", borderRadius: 4, fontSize: 12 }}>\n                  {k}: {val}\n                </span>\n              ))}\n            </td>\n            <td style={{ padding: \"8px 4px\", textAlign: \"right\", borderBottom: \"1px solid #f3f4f6\" }}>\n              ${(v.price / 100).toFixed(2)}\n            </td>\n            <td style={{ padding: \"8px 4px\", textAlign: \"right\", borderBottom: \"1px solid #f3f4f6\" }}>{v.stock}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default function AdminDashboard() {\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(null);\n  const [data, setData] = React.useState({ products: [], attributes: [] });\n\n  React.useEffect(() => {\n    let isMounted = true;\n    async function load() {\n      try {\n        const res = await fetch(\"/api/admin/products\");\n        if (!res.ok) throw new Error(\"Failed to load products\");\n        const json = await res.json();\n        if (isMounted) {\n          setData({ products: json.products || [], attributes: json.attributes || [] });\n        }\n      } catch (e) {\n        if (isMounted) setError(e.message || String(e));\n      } finally {\n        if (isMounted) setLoading(false);\n      }\n    }\n    load();\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  return (\n    <div style={{ maxWidth: 1100, margin: \"0 auto\", padding: 24 }}>\n      <h1 style={{ fontSize: 28, fontWeight: 800, marginBottom: 8 }}>PIM Admin</h1>\n      <p style={{ color: \"#6b7280\", marginBottom: 16 }}>View products, attribute groups, and basic variants.</p>\n\n      {loading && <div>Loadingâ€¦</div>}\n      {error && <div style={{ color: \"#b91c1c\" }}>Error: {error}</div>}\n\n      {!loading && !error && (\n        <div>\n          <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(3, minmax(0,1fr))\", gap: 12, marginBottom: 24 }}>\n            <Stat label=\"Products\" value={data.products.length} />\n            <Stat label=\"Attribute Groups\" value={data.attributes.length} />\n            <Stat label=\"Total Variants\" value={data.products.reduce((acc, p) => acc + (p.variants ? p.variants.length : 0), 0)} />\n          </div>\n\n          <div style={{ marginBottom: 24 }}>\n            <h2 style={{ fontSize: 20, fontWeight: 700, marginBottom: 8 }}>Attribute Groups</h2>\n            <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(2, minmax(0,1fr))\", gap: 12 }}>\n              {data.attributes.map((group) => (\n                <div key={group.code} style={{ border: \"1px solid #e5e7eb\", borderRadius: 8, padding: 12, background: \"#fff\" }}>\n                  <div style={{ fontWeight: 600, marginBottom: 4 }}>{group.name}</div>\n                  <div style={{ color: \"#6b7280\", fontSize: 12, marginBottom: 8 }}>Code: {group.code}</div>\n                  <div>\n                    {group.attributes.map((attr) => (\n                      <div key={attr.code} style={{ marginBottom: 6 }}>\n                        <div style={{ fontWeight: 500 }}>{attr.name} <span style={{ color: \"#6b7280\" }}>({attr.code})</span></div>\n                        {attr.options && attr.options.length > 0 && (\n                          <div style={{ marginTop: 4 }}>\n                            {attr.options.map((opt) => (\n                              <span key={opt.code} style={{ display: \"inline-block\", marginRight: 6, marginBottom: 4, padding: \"2px 6px\", background: \"#f3f4f6\", borderRadius: 4, fontSize: 12 }}>\n                                {opt.label}\n                              </span>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <h2 style={{ fontSize: 20, fontWeight: 700, marginBottom: 8 }}>Products</h2>\n            <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(1, minmax(0,1fr))\", gap: 12 }}>\n              {data.products.map((product) => (\n                <div key={product.id} style={{ border: \"1px solid #e5e7eb\", borderRadius: 8, padding: 16, background: \"#fff\" }}>\n                  <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"baseline\", marginBottom: 8 }}>\n                    <div>\n                      <div style={{ fontSize: 18, fontWeight: 700 }}>{product.name}</div>\n                      <div style={{ color: \"#6b7280\", fontSize: 12 }}>ID: {product.id} Â· Slug: {product.slug}</div>\n                    </div>\n                    <div style={{ color: \"#111827\", fontWeight: 700 }}>${(product.price / 100).toFixed(2)}</div>\n                  </div>\n                  <p style={{ color: \"#374151\", marginBottom: 12 }}>{product.description}</p>\n                  {product.attributes && (\n                    <div style={{ marginBottom: 12 }}>\n                      {Object.entries(product.attributes).map(([k, v]) => (\n                        <span key={k} style={{ display: \"inline-block\", marginRight: 8, padding: \"2px 6px\", background: \"#eef2ff\", borderRadius: 4, fontSize: 12 }}>\n                          {k}: {v}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n                  {product.variants && product.variants.length > 0 && (\n                    <div>\n                      <div style={{ fontWeight: 600, marginBottom: 6 }}>Variants ({product.variants.length})</div>\n                      <VariantsTable variants={product.variants} />\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/sampleData.test.js",
      "content": "/*\n  Minimal test without external dependencies. Run with:\n  node tests/sampleData.test.js\n*/\nconst assert = require(\"assert\");\nconst { getSampleCatalog } = require(\"../lib/sampleData\");\n\n(function () {\n  const { attributes, products } = getSampleCatalog();\n\n  assert(Array.isArray(attributes), \"attributes should be an array\");\n  assert(attributes.length > 0, \"attributes should not be empty\");\n  attributes.forEach((group) => {\n    assert(group.code && group.name, \"attribute group must have code and name\");\n    assert(Array.isArray(group.attributes) && group.attributes.length > 0, \"group.attributes must be non-empty\");\n    group.attributes.forEach((attr) => {\n      assert(attr.code && attr.name, \"attribute must have code and name\");\n    });\n  });\n\n  assert(Array.isArray(products), \"products should be an array\");\n  assert(products.length > 0, \"products should not be empty\");\n\n  const attrCodes = new Set(attributes.flatMap((g) => g.attributes.map((a) => a.code)));\n\n  products.forEach((p) => {\n    assert(p.id && p.slug && p.name, \"product must have id, slug, name\");\n    assert(Array.isArray(p.variants) && p.variants.length > 0, \"product must have at least one variant\");\n    p.variants.forEach((v) => {\n      assert(v.id && v.sku, \"variant must have id and sku\");\n      assert(typeof v.price === \"number\", \"variant.price must be number\");\n      assert(v.options && typeof v.options === \"object\", \"variant.options must be an object\");\n      Object.keys(v.options).forEach((k) => {\n        assert(attrCodes.has(k), `variant option key ${k} must reference a defined attribute`);\n      });\n    });\n  });\n\n  console.log(\"OK: sampleData provides valid catalog with attribute groups and variants\");\n})();\n"
    }
  ],
  "commit_message": "FEATURE: Add admin dashboard and API with rich sample product data including attribute groups and basic variant fields; include minimal Node-based test for data shape."
}