{
  "files": [
    {
      "path": "pages/api/attributes.js",
      "content": "const groups = [\n  { id: 'grp-core', code: 'core', label: 'Core' },\n  { id: 'grp-marketing', code: 'marketing', label: 'Marketing' },\n];\n\nconst attributes = [\n  { id: 'attr-sku', code: 'sku', label: 'SKU', type: 'text', groupId: 'grp-core', required: true },\n  { id: 'attr-name', code: 'name', label: 'Name', type: 'text', groupId: 'grp-core', required: true },\n  { id: 'attr-desc', code: 'description', label: 'Description', type: 'richtext', groupId: 'grp-marketing', required: false },\n  { id: 'attr-brand', code: 'brand', label: 'Brand', type: 'text', groupId: 'grp-marketing', required: false },\n];\n\nfunction handler(req, res) {\n  if (req.method !== 'GET') {\n    res.status(405);\n    res.setHeader('Allow', 'GET');\n    return res.json({ error: 'Method Not Allowed' });\n  }\n\n  res.setHeader('Content-Type', 'application/json');\n  // Cache lightly to avoid hammering the server while allowing quick edits during development\n  res.setHeader('Cache-Control', 'public, max-age=60');\n\n  return res.status(200).json({ groups, attributes });\n}\n\nmodule.exports = handler;\n"
    },
    {
      "path": "pages/admin/attributes.js",
      "content": "import React, { useEffect, useMemo, useState } from 'react';\n\nexport default function AttributesAdminPage() {\n  const [data, setData] = useState({ groups: [], attributes: [] });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let mounted = true;\n    async function load() {\n      try {\n        const res = await fetch('/api/attributes');\n        if (!res.ok) throw new Error('Failed to load attributes');\n        const json = await res.json();\n        if (mounted) {\n          setData(json);\n          setLoading(false);\n        }\n      } catch (e) {\n        if (mounted) {\n          setError(e.message || 'Error');\n          setLoading(false);\n        }\n      }\n    }\n    load();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  const attributesByGroup = useMemo(() => {\n    const map = {};\n    for (const g of data.groups) map[g.id] = [];\n    for (const a of data.attributes) {\n      if (!map[a.groupId]) map[a.groupId] = [];\n      map[a.groupId].push(a);\n    }\n    return map;\n  }, [data]);\n\n  return (\n    <div style={{ padding: '24px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1 style={{ margin: 0, fontSize: '24px' }}>Attribute Manager</h1>\n      <p style={{ color: '#555' }}>Read-only list of attribute groups and attributes.</p>\n\n      {loading && <p>Loadingâ€¦</p>}\n      {error && <p style={{ color: 'crimson' }}>Error: {error}</p>}\n\n      {!loading && !error && (\n        <div style={{ display: 'grid', gridTemplateColumns: '1fr 2fr', gap: '24px' }}>\n          <section>\n            <h2 style={{ fontSize: '16px', marginBottom: '8px' }}>Groups</h2>\n            <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n              {data.groups.map((g) => (\n                <li key={g.id} style={{ padding: '8px 12px', border: '1px solid #eee', borderRadius: 6, marginBottom: 8 }}>\n                  <div style={{ fontWeight: 600 }}>{g.label}</div>\n                  <div style={{ color: '#666', fontSize: 12 }}>code: {g.code}</div>\n                  <div style={{ color: '#666', fontSize: 12 }}>attributes: {attributesByGroup[g.id]?.length || 0}</div>\n                </li>\n              ))}\n            </ul>\n          </section>\n\n          <section>\n            <h2 style={{ fontSize: '16px', marginBottom: '8px' }}>Attributes</h2>\n            <div style={{ overflowX: 'auto' }}>\n              <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                <thead>\n                  <tr>\n                    <th style={thStyle}>Label</th>\n                    <th style={thStyle}>Code</th>\n                    <th style={thStyle}>Type</th>\n                    <th style={thStyle}>Required</th>\n                    <th style={thStyle}>Group</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.attributes.map((a) => {\n                    const g = data.groups.find((x) => x.id === a.groupId);\n                    return (\n                      <tr key={a.id}>\n                        <td style={tdStyle}>{a.label}</td>\n                        <td style={tdStyle}><code>{a.code}</code></td>\n                        <td style={tdStyle}>{a.type}</td>\n                        <td style={tdStyle}>{a.required ? 'Yes' : 'No'}</td>\n                        <td style={tdStyle}>{g ? g.label : a.groupId}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </section>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst thStyle = {\n  textAlign: 'left',\n  fontSize: 12,\n  color: '#666',\n  borderBottom: '1px solid #eee',\n  padding: '8px 6px',\n};\n\nconst tdStyle = {\n  padding: '10px 6px',\n  borderBottom: '1px solid #f1f1f1',\n};\n"
    },
    {
      "path": "tests/api-attributes.test.js",
      "content": "const assert = require('assert');\nconst handler = require('../pages/api/attributes');\n\nfunction createMockRes() {\n  let statusCode = 200;\n  const headers = {};\n  let body = undefined;\n  return {\n    status(code) {\n      statusCode = code;\n      return this;\n    },\n    setHeader(key, val) {\n      headers[key] = val;\n    },\n    json(data) {\n      body = data;\n      return this;\n    },\n    end() {\n      return this;\n    },\n    _get() {\n      return { statusCode, headers, body };\n    },\n  };\n}\n\n// GET should return groups and attributes\n{\n  const res = createMockRes();\n  handler({ method: 'GET' }, res);\n  const out = res._get();\n  assert.strictEqual(out.statusCode, 200);\n  assert.ok(out.body && Array.isArray(out.body.groups), 'groups should be array');\n  assert.ok(out.body && Array.isArray(out.body.attributes), 'attributes should be array');\n  assert.ok(out.body.groups.length >= 1, 'at least one group');\n}\n\n// Non-GET should be 405\n{\n  const res = createMockRes();\n  handler({ method: 'POST' }, res);\n  const out = res._get();\n  assert.strictEqual(out.statusCode, 405);\n}\n\nconsole.log('api-attributes.test.js: OK');\n"
    }
  ]
}