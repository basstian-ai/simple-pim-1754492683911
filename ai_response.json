{
  "files": [
    {
      "path": "lib/attributeGroupsStore.js",
      "content": "let groups = [\n  {\n    id: 'core',\n    name: 'Core',\n    description: 'Core product attributes',\n    attributes: []\n  }\n];\n\nfunction slugify(input) {\n  return String(input)\n    .toLowerCase()\n    .trim()\n    .replace(/[^a-z0-9\\s-]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-');\n}\n\nfunction ensureUniqueId(baseId) {\n  let id = baseId;\n  let i = 1;\n  while (groups.some(g => g.id === id)) {\n    id = `${baseId}-${i++}`;\n  }\n  return id;\n}\n\nfunction listGroups() {\n  // Return a shallow copy to avoid external mutation\n  return groups.map(g => ({ ...g }));\n}\n\nfunction getGroup(id) {\n  return groups.find(g => g.id === id) || null;\n}\n\nfunction addGroup(input) {\n  const name = (input && input.name ? String(input.name) : '').trim();\n  const description = (input && input.description ? String(input.description) : '').trim();\n  if (!name) {\n    const err = new Error('name is required');\n    err.code = 'VALIDATION_ERROR';\n    throw err;\n  }\n  const baseId = slugify(name) || 'group';\n  const id = ensureUniqueId(baseId);\n  const group = { id, name, description, attributes: [] };\n  groups.push(group);\n  return { ...group };\n}\n\nfunction _reset() {\n  groups = [];\n}\n\nmodule.exports = {\n  listGroups,\n  getGroup,\n  addGroup,\n  _reset\n};\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "const store = require('../../lib/attributeGroupsStore');\n\nexport default async function handler(req, res) {\n  if (req.method === 'GET') {\n    const items = store.listGroups();\n    res.status(200).json({ items });\n    return;\n  }\n\n  if (req.method === 'POST') {\n    try {\n      const body = typeof req.body === 'string' ? JSON.parse(req.body || '{}') : (req.body || {});\n      const created = store.addGroup({ name: body.name, description: body.description });\n      res.status(201).json(created);\n    } catch (err) {\n      if (err && err.code === 'VALIDATION_ERROR') {\n        res.status(400).json({ error: err.message });\n      } else {\n        res.status(500).json({ error: 'Internal Server Error' });\n      }\n    }\n    return;\n  }\n\n  res.setHeader('Allow', 'GET, POST');\n  res.status(405).json({ error: 'Method Not Allowed' });\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import { useEffect, useState } from 'react';\n\nexport default function AttributeGroupsPage() {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [submitting, setSubmitting] = useState(false);\n\n  const load = async () => {\n    try {\n      setLoading(true);\n      const res = await fetch('/api/attribute-groups');\n      const data = await res.json();\n      setItems(Array.isArray(data.items) ? data.items : []);\n      setError('');\n    } catch (e) {\n      setError('Failed to load');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (!name.trim()) return;\n    setSubmitting(true);\n    try {\n      const res = await fetch('/api/attribute-groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name, description })\n      });\n      if (!res.ok) {\n        const data = await res.json().catch(() => ({}));\n        throw new Error(data.error || 'Failed to create');\n      }\n      setName('');\n      setDescription('');\n      await load();\n    } catch (e) {\n      setError(e.message || 'Failed to create');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: 780, margin: '40px auto', padding: 16, fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, sans-serif' }}>\n      <h1>Attribute Groups</h1>\n      <p style={{ color: '#555' }}>Organize product attributes into groups.</p>\n\n      <section style={{ margin: '24px 0', padding: 16, border: '1px solid #eaeaea', borderRadius: 8 }}>\n        <h2 style={{ marginTop: 0, fontSize: 18 }}>Create Group</h2>\n        <form onSubmit={onSubmit}>\n          <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>\n            <input\n              type=\"text\"\n              placeholder=\"Name (e.g. Specs)\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              style={{ flex: '1 1 240px', padding: 8, borderRadius: 6, border: '1px solid #ccc' }}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Description (optional)\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              style={{ flex: '2 1 320px', padding: 8, borderRadius: 6, border: '1px solid #ccc' }}\n            />\n            <button\n              type=\"submit\"\n              disabled={submitting || !name.trim()}\n              style={{ padding: '8px 14px', borderRadius: 6, border: '1px solid #111', background: '#111', color: '#fff', cursor: 'pointer', opacity: submitting || !name.trim() ? 0.6 : 1 }}\n            >\n              {submitting ? 'Creating…' : 'Add Group'}\n            </button>\n          </div>\n        </form>\n        {error ? <p style={{ color: 'crimson', marginTop: 8 }}>{error}</p> : null}\n      </section>\n\n      <section style={{ margin: '24px 0' }}>\n        <h2 style={{ fontSize: 18, marginTop: 0 }}>Groups</h2>\n        {loading ? (\n          <p>Loading…</p>\n        ) : items.length === 0 ? (\n          <p>No attribute groups yet.</p>\n        ) : (\n          <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n            {items.map((g) => (\n              <li key={g.id} style={{ border: '1px solid #eaeaea', borderRadius: 8, padding: 12, marginBottom: 10 }}>\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'baseline', gap: 8, flexWrap: 'wrap' }}>\n                  <strong>{g.name}</strong>\n                  <code style={{ background: '#f6f6f6', padding: '2px 6px', borderRadius: 4, color: '#555' }}>{g.id}</code>\n                </div>\n                {g.description ? <p style={{ margin: '6px 0 0', color: '#444' }}>{g.description}</p> : null}\n                <small style={{ color: '#777' }}>{Array.isArray(g.attributes) ? g.attributes.length : 0} attributes</small>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/attributeGroupsStore.test.js",
      "content": "const test = require('node:test');\nconst assert = require('assert');\nconst store = require('../lib/attributeGroupsStore');\n\ntest('attributeGroupsStore: add and list groups', () => {\n  store._reset();\n  assert.strictEqual(store.listGroups().length, 0);\n  const g = store.addGroup({ name: 'Specs', description: 'Tech specs' });\n  assert.ok(g.id && typeof g.id === 'string');\n  assert.strictEqual(g.name, 'Specs');\n  const items = store.listGroups();\n  assert.strictEqual(items.length, 1);\n  assert.strictEqual(items[0].id, g.id);\n});\n\ntest('attributeGroupsStore: generates unique ids', () => {\n  store._reset();\n  const g1 = store.addGroup({ name: 'Core' });\n  const g2 = store.addGroup({ name: 'Core' });\n  assert.notStrictEqual(g1.id, g2.id);\n});\n\ntest('attributeGroupsStore: validation', () => {\n  store._reset();\n  let threw = false;\n  try {\n    store.addGroup({ name: '' });\n  } catch (e) {\n    threw = true;\n    assert.strictEqual(e.code, 'VALIDATION_ERROR');\n  }\n  assert.ok(threw);\n});\n"
    },
    {
      "path": "commit_message.txt",
      "content": "FEATURE: Add basic Attribute Groups feature with API endpoint, simple admin page to create/list groups, and a small unit test for the in-memory store."
    }
  ]
}