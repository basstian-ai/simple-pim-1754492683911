{
  "commit_message": "feat: add helper to build products CSV export URL + tests",
  "files": [
    {
      "path": "lib/buildExportUrl.js",
      "content": "/*\n Helper to build a products export URL including current filters.\n Returns a path like: /api/products/export?search=...&tags=a,b&inStock=1\n Accepts tags as either an array of strings or a single comma-separated string.\n*/\n\nfunction buildProductsExportUrl(filters = {}) {\n  const { search, tags, inStock } = filters || {};\n  const params = [];\n\n  if (typeof search === 'string' && search.trim() !== '') {\n    params.push(`search=${encodeURIComponent(search)}`);\n  }\n\n  if (Array.isArray(tags) && tags.length > 0) {\n    // encode each tag and join with commas\n    params.push(`tags=${tags.map((t) => encodeURIComponent(t)).join(',')}`);\n  } else if (typeof tags === 'string' && tags.trim() !== '') {\n    // tags may be a single comma-separated string\n    params.push(`tags=${tags.split(',').map((t) => encodeURIComponent(t.trim())).join(',')}`);\n  }\n\n  if (inStock === true || inStock === '1' || inStock === 1) {\n    params.push('inStock=1');\n  }\n\n  return params.length > 0 ? `/api/products/export?${params.join('&')}` : '/api/products/export';\n}\n\nmodule.exports = buildProductsExportUrl;\n"
    },
    {
      "path": "tests/buildExportUrl.test.js",
      "content": "const buildProductsExportUrl = require('../lib/buildExportUrl');\n\ndescribe('buildProductsExportUrl', () => {\n  test('returns base export path when no filters provided', () => {\n    expect(buildProductsExportUrl()).toBe('/api/products/export');\n    expect(buildProductsExportUrl({})).toBe('/api/products/export');\n  });\n\n  test('includes search query when provided', () => {\n    expect(buildProductsExportUrl({ search: 'blue shirt' })).toBe(\n      '/api/products/export?search=blue%20shirt'\n    );\n  });\n\n  test('includes tags when provided as array', () => {\n    expect(buildProductsExportUrl({ tags: ['men', 'new'] })).toBe(\n      '/api/products/export?tags=men,new'\n    );\n  });\n\n  test('includes tags when provided as comma separated string', () => {\n    expect(buildProductsExportUrl({ tags: 'men,new' })).toBe(\n      '/api/products/export?tags=men,new'\n    );\n  });\n\n  test('encodes tag values and search', () => {\n    expect(buildProductsExportUrl({ search: 'red & blue', tags: ['women & kids', 'sale 10%'] })).toBe(\n      '/api/products/export?search=red%20%26%20blue&tags=women%20%26%20kids,sale%2010%25'\n    );\n  });\n\n  test('includes inStock when truthy', () => {\n    expect(buildProductsExportUrl({ inStock: true })).toBe('/api/products/export?inStock=1');\n    expect(buildProductsExportUrl({ inStock: '1' })).toBe('/api/products/export?inStock=1');\n    expect(buildProductsExportUrl({ inStock: 1 })).toBe('/api/products/export?inStock=1');\n  });\n\n  test('combines multiple params in correct order', () => {\n    expect(\n      buildProductsExportUrl({ search: 'hat', tags: ['summer', 'sale'], inStock: true })\n    ).toBe('/api/products/export?search=hat&tags=summer,sale&inStock=1');\n  });\n});\n"
    }
  ]
}