{
  "commit_message": "Feature: Add product tag discovery and filtering with /api/tags endpoint and Home page tag filter; include unit and API tests",
  "diff": "--- a/pages/index.js\n+++ b/pages/index.js\n@@ -1,37 +1,68 @@\n-import React, { useEffect, useState } from 'react';\n+import React, { useEffect, useState } from 'react';\n import ProductList from '../components/ProductList';\n import ExportCsvLink from '../components/ExportCsvLink';\n+import { productHasTag } from '../lib/tags';\n \n const Home = () => {\n   const [products, setProducts] = useState([]);\n   const [query, setQuery] = useState('');\n+  const [tags, setTags] = useState([]);\n+  const [tag, setTag] = useState('');\n \n   useEffect(() => {\n     let active = true;\n     const controller = new AbortController();\n \n     const fetchProducts = async () => {\n       const qs = query ? `?search=${encodeURIComponent(query)}` : '';\n       const res = await fetch(`/api/products${qs}`, { signal: controller.signal });\n       const data = await res.json();\n       if (active) setProducts(data);\n     };\n \n     const t = setTimeout(fetchProducts, 250);\n \n     return () => {\n       active = false;\n       controller.abort();\n       clearTimeout(t);\n     };\n   }, [query]);\n+\n+  useEffect(() => {\n+    let mounted = true;\n+    const loadTags = async () => {\n+      try {\n+        const res = await fetch('/api/tags');\n+        const data = await res.json();\n+        if (mounted) setTags(Array.isArray(data) ? data : []);\n+      } catch (e) {\n+        if (mounted) setTags([]);\n+      }\n+    };\n+    loadTags();\n+    return () => {\n+      mounted = false;\n+    };\n+  }, []);\n+\n+  const displayedProducts = tag ? products.filter((p) => productHasTag(p, tag)) : products;\n \n   return (\n     <div style={{ maxWidth: 900, margin: '0 auto', padding: '1rem' }}>\n       <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem' }}>\n         <input\n           type=\"search\"\n           placeholder=\"Search products by name, SKU or description...\"\n           value={query}\n           onChange={(e) => setQuery(e.target.value)}\n           style={{ flex: 1, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n           aria-label=\"Search products\"\n         />\n+        <select\n+          value={tag}\n+          onChange={(e) => setTag(e.target.value)}\n+          aria-label=\"Filter by tag\"\n+          style={{ padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n+        >\n+          <option value=\"\">All tags</option>\n+          {tags.map((t) => (\n+            <option key={t} value={t}>{t}</option>\n+          ))}\n+        </select>\n         <span style={{ color: '#666', fontSize: 12 }}>\n-          {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n+          {displayedProducts?.length || 0} result{(displayedProducts?.length || 0) === 1 ? '' : 's'}\n         </span>\n         <ExportCsvLink style={{ fontSize: 12 }} />\n       </div>\n-      <ProductList products={products} />\n+      <ProductList products={displayedProducts} />\n     </div>\n   );\n };\n \n export default Home;\n",
  "files": [
    {
      "path": "lib/tags.js",
      "content": "const STOPWORDS = new Set([\n  'the', 'and', 'for', 'with', 'from', 'this', 'that', 'are', 'was', 'were', 'will', 'you', 'your', 'our', 'their', 'its',\n  'a', 'an', 'to', 'of', 'in', 'on', 'by', 'at', 'as', 'is', 'it', 'or', 'be'\n]);\n\nfunction normalizeWord(w) {\n  if (!w) return '';\n  const t = String(w).toLowerCase().replace(/[^a-z0-9]/g, '');\n  if (t.length < 3) return '';\n  if (STOPWORDS.has(t)) return '';\n  return t;\n}\n\nexport function computeProductTags(product) {\n  const tags = new Set();\n  if (!product || typeof product !== 'object') return [];\n\n  const { name, description, sku } = product;\n\n  const addWords = (text) => {\n    if (!text) return;\n    String(text)\n      .split(/\\s+/)\n      .map(normalizeWord)\n      .filter(Boolean)\n      .forEach((w) => tags.add(w));\n  };\n\n  addWords(name);\n  addWords(description);\n\n  if (sku) {\n    const prefix = String(sku).split(/[-_\\s]/)[0];\n    if (prefix && prefix.length >= 2) tags.add(prefix.toLowerCase());\n  }\n\n  return Array.from(tags);\n}\n\nexport function productHasTag(product, tag) {\n  if (!tag) return true;\n  const t = String(tag).toLowerCase();\n  return computeProductTags(product).includes(t);\n}\n\nexport function aggregateTags(products) {\n  const map = new Map();\n  (products || []).forEach((p) => {\n    computeProductTags(p).forEach((t) => {\n      map.set(t, (map.get(t) || 0) + 1);\n    });\n  });\n  return map;\n}\n\nexport function getAllTags({ search } = {}) {\n  // Lazy-load data to avoid bundling on client\n  const products = require('../data/products.json');\n  const map = aggregateTags(products);\n  let tags = Array.from(map.keys());\n  if (search) {\n    const s = String(search).toLowerCase();\n    tags = tags.filter((t) => t.includes(s));\n  }\n  tags.sort();\n  return tags;\n}\n"
    },
    {
      "path": "pages/api/tags.js",
      "content": "import { getAllTags } from '../../lib/tags';\n\nexport default function handler(req, res) {\n  const { search } = req.query || {};\n  const tags = getAllTags({ search });\n  res.status(200).json(tags);\n}\n"
    },
    {
      "path": "tests/tags.test.js",
      "content": "const { computeProductTags, productHasTag } = require('../lib/tags');\n\ndescribe('computeProductTags', () => {\n  it('extracts meaningful tags from product fields', () => {\n    const product = {\n      name: 'Awesome Red Shirt',\n      description: 'A red shirt for summer adventures',\n      sku: 'SHIRT-RED-001'\n    };\n\n    const tags = computeProductTags(product);\n\n    expect(Array.isArray(tags)).toBe(true);\n    // Should include non-stopwords from name/description and SKU prefix\n    expect(tags).toEqual(expect.arrayContaining(['awesome', 'red', 'shirt', 'summer', 'shirt', 'shirt'.replace(/[^a-z0-9]/g, '')]));\n    // Ensure stopwords not included\n    expect(tags).not.toEqual(expect.arrayContaining(['for', 'and', 'the']));\n\n    // productHasTag should align with computeProductTags\n    expect(productHasTag(product, 'red')).toBe(true);\n    expect(productHasTag(product, 'FOR')).toBe(false);\n  });\n});\n"
    },
    {
      "path": "tests/api-tags.test.js",
      "content": "import handler from '../pages/api/tags';\n\ndescribe('/api/tags', () => {\n  function createMockRes() {\n    const res = {};\n    res.statusCode = 200;\n    res.status = (code) => { res.statusCode = code; return res; };\n    res.json = (data) => { res._data = data; return res; };\n    return res;\n  }\n\n  it('returns a list of tags', async () => {\n    const req = { query: {} };\n    const res = createMockRes();\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(200);\n    expect(Array.isArray(res._data)).toBe(true);\n    // Tags should be strings\n    if (res._data.length > 0) {\n      expect(typeof res._data[0]).toBe('string');\n    }\n  });\n\n  it('supports search filtering', async () => {\n    const req = { query: { search: 'red' } };\n    const res = createMockRes();\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(200);\n    expect(Array.isArray(res._data)).toBe(true);\n    res._data.forEach((t) => {\n      expect(typeof t).toBe('string');\n      expect(t.toLowerCase()).toEqual(expect.stringContaining('red'));\n    });\n  });\n});\n"
    }
  ]
}