{
  "commit_message": "feat(api): add AI name-suggestion API endpoint + tests\n\nAdd a new lightweight AI helper endpoint at /api/ai/name-suggest which wraps the existing generateNameSuggestions utility. Include tests to cover allowed method handling, successful suggestions, and error handling. This provides a simple, well-tested building block for UI-driven AI-assisted product name suggestions.",
  "files": [
    {
      "path": "pages/api/ai/name-suggest.js",
      "content": "import generateNameSuggestions from '../../../lib/generateNameSuggestions';\n\nexport default function handler(req, res) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  const product = req.body || {};\n\n  try {\n    const suggestions = generateNameSuggestions(product);\n    return res.status(200).json({ suggestions });\n  } catch (err) {\n    // Keep error message minimal but informative for debugging in dev\n    return res.status(500).json({ error: err && err.message ? err.message : 'Server error' });\n  }\n}\n"
    },
    {
      "path": "tests/api-ai-name-suggest-new.test.js",
      "content": "const handlerModule = require('../../pages/api/ai/name-suggest');\nconst handler = handlerModule && handlerModule.default ? handlerModule.default : handlerModule;\nconst generateNameSuggestions = require('../../lib/generateNameSuggestions');\n\njest.mock('../../lib/generateNameSuggestions');\n\ndescribe('/api/ai/name-suggest', () => {\n  beforeEach(() => jest.resetAllMocks());\n\n  test('returns 405 for non-POST methods', async () => {\n    const req = { method: 'GET' };\n    const json = jest.fn();\n    const status = jest.fn().mockReturnValue({ json });\n    const res = { status };\n\n    await handler(req, res);\n\n    expect(status).toHaveBeenCalledWith(405);\n    expect(json).toHaveBeenCalledWith({ error: 'Method not allowed' });\n  });\n\n  test('returns suggestions for valid POST body', async () => {\n    const req = { method: 'POST', body: { name: 'Blue T-Shirt', sku: 'TSHIRT-001' } };\n    const fake = ['Blue T-Shirt - TSHIRT-001', 'Blue T-Shirt'];\n    generateNameSuggestions.mockReturnValue(fake);\n\n    const json = jest.fn();\n    const status = jest.fn().mockReturnValue({ json });\n    const res = { status };\n\n    await handler(req, res);\n\n    expect(generateNameSuggestions).toHaveBeenCalledWith(req.body);\n    expect(status).toHaveBeenCalledWith(200);\n    expect(json).toHaveBeenCalledWith({ suggestions: fake });\n  });\n\n  test('returns 500 when generateNameSuggestions throws', async () => {\n    const req = { method: 'POST', body: { name: 'Faulty' } };\n    generateNameSuggestions.mockImplementation(() => {\n      throw new Error('boom');\n    });\n\n    const json = jest.fn();\n    const status = jest.fn().mockReturnValue({ json });\n    const res = { status };\n\n    await handler(req, res);\n\n    expect(status).toHaveBeenCalledWith(500);\n    expect(json).toHaveBeenCalledWith({ error: 'boom' });\n  });\n});\n"
    }
  ]
}