{
  "files": [
    {
      "path": "lib/attributeGroupsStore.js",
      "content": "const fs = require('fs');\nconst path = require('path');\n\nlet groups = [];\n\nfunction loadSeed() {\n  const seedPath = path.join(process.cwd(), 'data', 'attribute-groups.json');\n  try {\n    const raw = fs.readFileSync(seedPath, 'utf8');\n    const parsed = JSON.parse(raw);\n    if (Array.isArray(parsed)) {\n      groups = parsed.map((g) => ({ ...g }));\n    } else {\n      groups = [];\n    }\n  } catch (e) {\n    groups = [];\n  }\n}\n\nfunction nowISO() {\n  return new Date().toISOString();\n}\n\nfunction genId(prefix = 'grp') {\n  // Simple unique id: grp-<timestamp>-<random>\n  const rand = Math.random().toString(36).slice(2, 8);\n  return `${prefix}-${Date.now()}-${rand}`;\n}\n\n// Initialize from seed on first load\nloadSeed();\n\nfunction list(options = {}) {\n  const { q } = options;\n  let result = groups.slice();\n  if (q && typeof q === 'string') {\n    const needle = q.toLowerCase();\n    result = result.filter((g) =>\n      g.name.toLowerCase().includes(needle) ||\n      (Array.isArray(g.attributes) && g.attributes.some((a) => `${a.code} ${a.label}`.toLowerCase().includes(needle)))\n    );\n  }\n  // sort by position then name for stable order\n  result.sort((a, b) => {\n    const ap = typeof a.position === 'number' ? a.position : Number.MAX_SAFE_INTEGER;\n    const bp = typeof b.position === 'number' ? b.position : Number.MAX_SAFE_INTEGER;\n    if (ap !== bp) return ap - bp;\n    return a.name.localeCompare(b.name);\n  });\n  return result;\n}\n\nfunction findById(id) {\n  return groups.find((g) => g.id === id) || null;\n}\n\nfunction validateGroupPayload(payload, { partial = false } = {}) {\n  const errors = [];\n  const out = {};\n\n  if (!partial || payload.name !== undefined) {\n    if (typeof payload.name !== 'string' || !payload.name.trim()) {\n      errors.push('name is required and must be a non-empty string');\n    } else {\n      out.name = payload.name.trim();\n    }\n  }\n\n  if (payload.position !== undefined) {\n    const p = Number(payload.position);\n    if (!Number.isFinite(p) || p < 0) {\n      errors.push('position must be a non-negative number');\n    } else {\n      out.position = p;\n    }\n  }\n\n  if (!partial || payload.attributes !== undefined) {\n    if (!Array.isArray(payload.attributes)) {\n      errors.push('attributes must be an array');\n    } else {\n      const attrs = [];\n      for (const a of payload.attributes) {\n        if (!a || typeof a !== 'object') {\n          errors.push('each attribute must be an object');\n          continue;\n        }\n        const code = typeof a.code === 'string' ? a.code.trim() : '';\n        const label = typeof a.label === 'string' ? a.label.trim() : '';\n        const type = typeof a.type === 'string' ? a.type.trim() : '';\n        if (!code) errors.push('attribute.code is required');\n        if (!label) errors.push('attribute.label is required');\n        if (!type) errors.push('attribute.type is required');\n        const attr = { code, label, type };\n        if (a.options !== undefined) {\n          if (!Array.isArray(a.options)) {\n            errors.push('attribute.options must be an array when provided');\n          } else {\n            attr.options = a.options;\n          }\n        }\n        attrs.push(attr);\n      }\n      if (errors.length === 0) out.attributes = attrs;\n    }\n  }\n\n  return { errors, value: out };\n}\n\nfunction create(payload) {\n  const { errors, value } = validateGroupPayload(payload, { partial: false });\n  if (errors.length) {\n    const err = new Error('Validation failed');\n    err.statusCode = 400;\n    err.details = errors;\n    throw err;\n  }\n  const id = genId('grp');\n  const now = nowISO();\n  const group = {\n    id,\n    name: value.name,\n    attributes: value.attributes || [],\n    position: value.position !== undefined ? value.position : groups.length + 1,\n    createdAt: now,\n    updatedAt: now,\n  };\n  groups.push(group);\n  return group;\n}\n\nfunction update(id, payload) {\n  const idx = groups.findIndex((g) => g.id === id);\n  if (idx === -1) return null;\n  const { errors, value } = validateGroupPayload(payload, { partial: true });\n  if (errors.length) {\n    const err = new Error('Validation failed');\n    err.statusCode = 400;\n    err.details = errors;\n    throw err;\n  }\n  const prev = groups[idx];\n  const updated = {\n    ...prev,\n    ...value,\n    updatedAt: nowISO(),\n  };\n  groups[idx] = updated;\n  return updated;\n}\n\nfunction remove(id) {\n  const idx = groups.findIndex((g) => g.id === id);\n  if (idx === -1) return false;\n  groups.splice(idx, 1);\n  return true;\n}\n\n// Internal/testing helper to reset in-memory state from seed\nfunction _resetForTests() {\n  loadSeed();\n}\n\nmodule.exports = {\n  list,\n  findById,\n  create,\n  update,\n  remove,\n  _resetForTests,\n};\n"
    },
    {
      "path": "pages/api/attribute-groups/index.js",
      "content": "import store from '../../../lib/attributeGroupsStore';\n\n// Support both ES import default and CommonJS require\nconst groupsStore = store && store.list ? store : require('../../../lib/attributeGroupsStore');\n\nexport default function handler(req, res) {\n  const { method, query, body } = req;\n\n  if (method === 'GET') {\n    const q = typeof query.q === 'string' ? query.q : undefined;\n    const items = groupsStore.list({ q });\n    res.status(200).json({ items, count: items.length });\n    return;\n  }\n\n  if (method === 'POST') {\n    try {\n      const created = groupsStore.create(body || {});\n      res.status(201).json({ item: created });\n    } catch (e) {\n      const status = e.statusCode || 500;\n      res.status(status).json({ error: e.message, details: e.details || undefined });\n    }\n    return;\n  }\n\n  res.setHeader('Allow', 'GET, POST');\n  res.status(405).json({ error: `Method ${method} Not Allowed` });\n}\n"
    },
    {
      "path": "pages/api/attribute-groups/[id].js",
      "content": "import store from '../../../lib/attributeGroupsStore';\n\nconst groupsStore = store && store.list ? store : require('../../../lib/attributeGroupsStore');\n\nexport default function handler(req, res) {\n  const { method, query, body } = req;\n  const { id } = query;\n\n  if (!id || typeof id !== 'string') {\n    res.status(400).json({ error: 'id is required' });\n    return;\n  }\n\n  if (method === 'GET') {\n    const item = groupsStore.findById(id);\n    if (!item) return res.status(404).json({ error: 'Not Found' });\n    res.status(200).json({ item });\n    return;\n  }\n\n  if (method === 'PUT' || method === 'PATCH') {\n    try {\n      const updated = groupsStore.update(id, body || {});\n      if (!updated) return res.status(404).json({ error: 'Not Found' });\n      res.status(200).json({ item: updated });\n    } catch (e) {\n      const status = e.statusCode || 500;\n      res.status(status).json({ error: e.message, details: e.details || undefined });\n    }\n    return;\n  }\n\n  if (method === 'DELETE') {\n    const ok = groupsStore.remove(id);\n    if (!ok) return res.status(404).json({ error: 'Not Found' });\n    res.status(204).end();\n    return;\n  }\n\n  res.setHeader('Allow', 'GET, PUT, PATCH, DELETE');\n  res.status(405).json({ error: `Method ${method} Not Allowed` });\n}\n"
    },
    {
      "path": "data/attribute-groups.json",
      "content": "[\n  {\n    \"id\": \"grp-1723248000000-abcd12\",\n    \"name\": \"Color & Finish\",\n    \"attributes\": [\n      { \"code\": \"color\", \"label\": \"Color\", \"type\": \"select\", \"options\": [\"Red\", \"Green\", \"Blue\", \"Black\", \"White\"] },\n      { \"code\": \"finish\", \"label\": \"Finish\", \"type\": \"select\", \"options\": [\"Matte\", \"Glossy\"] }\n    ],\n    \"position\": 1,\n    \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n    \"updatedAt\": \"2024-01-01T00:00:00.000Z\"\n  },\n  {\n    \"id\": \"grp-1723248000000-ef3456\",\n    \"name\": \"Size & Dimensions\",\n    \"attributes\": [\n      { \"code\": \"size\", \"label\": \"Size\", \"type\": \"select\", \"options\": [\"XS\", \"S\", \"M\", \"L\", \"XL\"] },\n      { \"code\": \"width\", \"label\": \"Width (cm)\", \"type\": \"number\" },\n      { \"code\": \"height\", \"label\": \"Height (cm)\", \"type\": \"number\" }\n    ],\n    \"position\": 2,\n    \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n    \"updatedAt\": \"2024-01-01T00:00:00.000Z\"\n  }\n]\n"
    },
    {
      "path": "tests/api/attribute-groups.test.js",
      "content": "const store = require('../../lib/attributeGroupsStore');\n\nbeforeEach(() => {\n  if (typeof store._resetForTests === 'function') store._resetForTests();\n});\n\ntest('lists seeded attribute groups', () => {\n  const items = store.list();\n  expect(Array.isArray(items)).toBe(true);\n  expect(items.length).toBeGreaterThanOrEqual(2);\n  // Ensure basic structure\n  expect(items[0]).toHaveProperty('id');\n  expect(items[0]).toHaveProperty('name');\n  expect(items[0]).toHaveProperty('attributes');\n});\n\ntest('creates a new attribute group', () => {\n  const before = store.list().length;\n  const created = store.create({\n    name: 'Materials',\n    position: 3,\n    attributes: [\n      { code: 'material', label: 'Material', type: 'select', options: ['Cotton', 'Wool'] },\n    ],\n  });\n  expect(created).toHaveProperty('id');\n  expect(created.name).toBe('Materials');\n  const after = store.list().length;\n  expect(after).toBe(before + 1);\n});\n"
    }
  ]
}