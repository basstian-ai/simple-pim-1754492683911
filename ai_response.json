{
  "files": [
    {
      "path": "data/attribute-groups.json",
      "content": "[\n  {\n    \"id\": \"grp-core\",\n    \"name\": \"Core\",\n    \"attributes\": [\n      { \"code\": \"title\", \"label\": \"Title\", \"type\": \"text\", \"required\": true },\n      { \"code\": \"sku\", \"label\": \"SKU\", \"type\": \"text\", \"required\": true },\n      { \"code\": \"description\", \"label\": \"Description\", \"type\": \"richtext\", \"required\": false }\n    ]\n  },\n  {\n    \"id\": \"grp-commerce\",\n    \"name\": \"Commerce\",\n    \"attributes\": [\n      { \"code\": \"price\", \"label\": \"Price\", \"type\": \"number\", \"unit\": \"USD\" },\n      {\n        \"code\": \"tax_class\",\n        \"label\": \"Tax Class\",\n        \"type\": \"select\",\n        \"options\": [\"standard\", \"reduced\", \"exempt\"]\n      }\n    ]\n  },\n  {\n    \"id\": \"grp-media\",\n    \"name\": \"Media\",\n    \"attributes\": [\n      { \"code\": \"images\", \"label\": \"Images\", \"type\": \"media[]\" },\n      { \"code\": \"video\", \"label\": \"Video URL\", \"type\": \"url\" }\n    ]\n  }\n]\n"
    },
    {
      "path": "lib/attributeGroups.js",
      "content": "const fs = require('fs');\nconst path = require('path');\n\nconst DATA_PATH = path.join(process.cwd(), 'data', 'attribute-groups.json');\n\nfunction loadAttributeGroups() {\n  try {\n    const raw = fs.readFileSync(DATA_PATH, 'utf8');\n    const data = JSON.parse(raw);\n    if (!Array.isArray(data)) return [];\n    return data;\n  } catch (e) {\n    return [];\n  }\n}\n\nmodule.exports = { loadAttributeGroups, DATA_PATH };\n"
    },
    {
      "path": "pages/api/attribute-groups/index.js",
      "content": "export default function handler(req, res) {\n  if (req.method === 'GET') {\n    const { loadAttributeGroups } = require('../../../lib/attributeGroups');\n    const groups = loadAttributeGroups();\n    res.status(200).json({ groups });\n    return;\n  }\n\n  if (req.method === 'OPTIONS') {\n    res.setHeader('Allow', 'GET,OPTIONS');\n    res.status(204).end();\n    return;\n  }\n\n  res.setHeader('Allow', 'GET,OPTIONS');\n  res.status(405).json({ error: 'Method Not Allowed' });\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import { useEffect, useState } from 'react';\n\nexport default function AttributeGroupsAdmin() {\n  const [groups, setGroups] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showForm, setShowForm] = useState(false);\n  const [newGroup, setNewGroup] = useState({ name: '', attributes: [{ code: '', label: '', type: 'text' }] });\n\n  useEffect(() => {\n    let mounted = true;\n    fetch('/api/attribute-groups')\n      .then((r) => {\n        if (!r.ok) throw new Error('Failed to load attribute groups');\n        return r.json();\n      })\n      .then((data) => {\n        if (mounted) {\n          setGroups(Array.isArray(data.groups) ? data.groups : []);\n          setLoading(false);\n        }\n      })\n      .catch((e) => {\n        if (mounted) {\n          setError(e.message || 'Error');\n          setLoading(false);\n        }\n      });\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  function addAttributeRow() {\n    setNewGroup((g) => ({ ...g, attributes: [...g.attributes, { code: '', label: '', type: 'text' }] }));\n  }\n\n  function updateAttr(idx, key, value) {\n    setNewGroup((g) => {\n      const attrs = g.attributes.slice();\n      attrs[idx] = { ...attrs[idx], [key]: value };\n      return { ...g, attributes: attrs };\n    });\n  }\n\n  function removeAttr(idx) {\n    setNewGroup((g) => ({ ...g, attributes: g.attributes.filter((_, i) => i !== idx) }));\n  }\n\n  function submitNewGroup(e) {\n    e.preventDefault();\n    if (!newGroup.name.trim()) return;\n    const cleaned = {\n      id: 'grp-' + Date.now(),\n      name: newGroup.name.trim(),\n      attributes: newGroup.attributes\n        .filter((a) => a.code.trim() && a.label.trim())\n        .map((a) => ({ code: a.code.trim(), label: a.label.trim(), type: a.type || 'text' }))\n    };\n    setGroups((gs) => [cleaned, ...gs]);\n    setShowForm(false);\n    setNewGroup({ name: '', attributes: [{ code: '', label: '', type: 'text' }] });\n  }\n\n  return (\n    <div style={{ maxWidth: 960, margin: '40px auto', padding: '0 16px' }}>\n      <h1>Attribute Groups</h1>\n      <p style={{ color: '#666' }}>Manage how product attributes are grouped in your PIM.</p>\n\n      <div style={{ background: '#fff7cc', padding: 12, border: '1px solid #ffe58f', borderRadius: 6, marginBottom: 16 }}>\n        Note: Creating groups here updates the client view only for now. Built-in groups are served from the API.\n      </div>\n\n      <div style={{ marginBottom: 16 }}>\n        <button onClick={() => setShowForm((s) => !s)} style={{ padding: '8px 12px', borderRadius: 6, border: '1px solid #ccc', background: '#111', color: '#fff' }}>\n          {showForm ? 'Cancel' : 'New Group'}\n        </button>\n      </div>\n\n      {showForm && (\n        <form onSubmit={submitNewGroup} style={{ border: '1px solid #eee', padding: 16, borderRadius: 8, marginBottom: 24 }}>\n          <div style={{ marginBottom: 12 }}>\n            <label style={{ display: 'block', fontWeight: 600, marginBottom: 6 }}>Group Name</label>\n            <input\n              value={newGroup.name}\n              onChange={(e) => setNewGroup((g) => ({ ...g, name: e.target.value }))}\n              placeholder=\"e.g. SEO\"\n              style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}\n            />\n          </div>\n\n          <div>\n            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n              <strong>Attributes</strong>\n              <button type=\"button\" onClick={addAttributeRow} style={{ padding: '6px 10px', borderRadius: 4, border: '1px solid #ccc', background: '#fafafa' }}>+ Add</button>\n            </div>\n            {newGroup.attributes.map((attr, idx) => (\n              <div key={idx} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 160px 80px', gap: 8, marginTop: 8 }}>\n                <input\n                  value={attr.code}\n                  onChange={(e) => updateAttr(idx, 'code', e.target.value)}\n                  placeholder=\"code (e.g. meta_title)\"\n                  style={{ padding: 8, border: '1px solid #ccc', borderRadius: 4 }}\n                  required\n                />\n                <input\n                  value={attr.label}\n                  onChange={(e) => updateAttr(idx, 'label', e.target.value)}\n                  placeholder=\"Label\"\n                  style={{ padding: 8, border: '1px solid #ccc', borderRadius: 4 }}\n                  required\n                />\n                <select value={attr.type} onChange={(e) => updateAttr(idx, 'type', e.target.value)} style={{ padding: 8, border: '1px solid #ccc', borderRadius: 4 }}>\n                  <option value=\"text\">Text</option>\n                  <option value=\"number\">Number</option>\n                  <option value=\"select\">Select</option>\n                  <option value=\"richtext\">Rich Text</option>\n                  <option value=\"boolean\">Boolean</option>\n                  <option value=\"url\">URL</option>\n                  <option value=\"media\">Media</option>\n                  <option value=\"media[]\">Media List</option>\n                </select>\n                <button type=\"button\" onClick={() => removeAttr(idx)} style={{ padding: 8, borderRadius: 4, border: '1px solid #ccc', background: '#fff' }}>Remove</button>\n              </div>\n            ))}\n          </div>\n\n          <div style={{ marginTop: 16 }}>\n            <button type=\"submit\" style={{ padding: '8px 12px', borderRadius: 6, border: '1px solid #ccc', background: '#0a7', color: '#fff' }}>Create Group</button>\n          </div>\n        </form>\n      )}\n\n      {loading && <div>Loading attribute groupsâ€¦</div>}\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n\n      {!loading && !error && (\n        <div style={{ display: 'grid', gridTemplateColumns: '1fr', gap: 12 }}>\n          {groups.map((g) => (\n            <div key={g.id} style={{ border: '1px solid #eee', borderRadius: 8, padding: 16 }}>\n              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'baseline' }}>\n                <h3 style={{ margin: 0 }}>{g.name}</h3>\n                <code style={{ color: '#666' }}>{g.id}</code>\n              </div>\n              <div style={{ marginTop: 8, color: '#555' }}>{Array.isArray(g.attributes) ? g.attributes.length : 0} attributes</div>\n              {Array.isArray(g.attributes) && g.attributes.length > 0 && (\n                <div style={{ marginTop: 8, display: 'grid', gridTemplateColumns: '1fr 1fr 120px', gap: 6 }}>\n                  <div style={{ fontWeight: 600 }}>Code</div>\n                  <div style={{ fontWeight: 600 }}>Label</div>\n                  <div style={{ fontWeight: 600 }}>Type</div>\n                  {g.attributes.map((a) => (\n                    <>\n                      <div key={g.id + a.code + '-code'} style={{ fontFamily: 'monospace' }}>{a.code}</div>\n                      <div key={g.id + a.code + '-label'}>{a.label}</div>\n                      <div key={g.id + a.code + '-type'}><code>{a.type}</code></div>\n                    </>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "__tests__/lib/attributeGroups.test.js",
      "content": "const { loadAttributeGroups } = require('../../lib/attributeGroups');\n\ndescribe('attributeGroups loader', () => {\n  test('loads sample attribute groups and includes core group', () => {\n    const groups = loadAttributeGroups();\n    expect(Array.isArray(groups)).toBe(true);\n    expect(groups.length).toBeGreaterThan(0);\n    const ids = groups.map((g) => g.id);\n    expect(ids).toContain('grp-core');\n  });\n});\n"
    },
    {
      "path": "commit_message",
      "content": "FEATURE: Add Attribute Groups API and Admin UI with sample data and a unit test"
    }
  ]
}