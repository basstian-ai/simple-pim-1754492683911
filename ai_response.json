{
  "files": [
    {
      "path": "data/attribute-groups.json",
      "content": "[]\n"
    },
    {
      "path": "lib/storage/attributeGroups.js",
      "content": "const fs = require('fs');\nconst path = require('path');\n\nfunction getFilePath() {\n  const p = process.env.ATTR_GROUPS_FILE\n    ? path.resolve(process.env.ATTR_GROUPS_FILE)\n    : path.join(process.cwd(), 'data', 'attribute-groups.json');\n  ensureFile(p);\n  return p;\n}\n\nfunction ensureFile(filePath) {\n  const dir = path.dirname(filePath);\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir, { recursive: true });\n  }\n  if (!fs.existsSync(filePath)) {\n    fs.writeFileSync(filePath, '[]\\n', 'utf8');\n  }\n}\n\nfunction readGroups() {\n  const file = getFilePath();\n  try {\n    const raw = fs.readFileSync(file, 'utf8');\n    const parsed = JSON.parse(raw);\n    if (Array.isArray(parsed)) return parsed;\n    return [];\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction writeGroups(groups) {\n  const file = getFilePath();\n  fs.writeFileSync(file, JSON.stringify(groups, null, 2) + '\\n', 'utf8');\n}\n\nfunction generateId() {\n  // Simple unique-ish id: timestamp + random string\n  return (\n    Date.now().toString(36) + '-' + Math.random().toString(36).substr(2, 8)\n  );\n}\n\nfunction addGroup({ name, description }) {\n  const groups = readGroups();\n  const now = new Date().toISOString();\n  const group = {\n    id: generateId(),\n    name: String(name || '').trim(),\n    description: String(description || '').trim(),\n    createdAt: now,\n    updatedAt: now,\n  };\n  groups.push(group);\n  writeGroups(groups);\n  return group;\n}\n\nfunction findByName(name) {\n  const groups = readGroups();\n  const n = String(name || '').trim().toLowerCase();\n  return groups.find((g) => g.name.toLowerCase() === n);\n}\n\nmodule.exports = {\n  getFilePath,\n  readGroups,\n  writeGroups,\n  addGroup,\n  findByName,\n};\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "const { readGroups, addGroup, findByName } = require('../../lib/storage/attributeGroups');\n\nasync function handler(req, res) {\n  // Basic API for attribute groups: GET list, POST create\n  if (req.method === 'GET') {\n    const groups = readGroups().sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'application/json');\n    res.end(JSON.stringify(groups));\n    return;\n  }\n\n  if (req.method === 'POST') {\n    const body = req.body || {};\n    const name = (body.name || '').trim();\n    const description = (body.description || '').trim();\n\n    if (!name) {\n      res.statusCode = 400;\n      res.setHeader('Content-Type', 'application/json');\n      res.end(JSON.stringify({ error: 'Name is required' }));\n      return;\n    }\n    if (findByName(name)) {\n      res.statusCode = 409;\n      res.setHeader('Content-Type', 'application/json');\n      res.end(JSON.stringify({ error: 'An attribute group with this name already exists' }));\n      return;\n    }\n\n    const created = addGroup({ name, description });\n    res.statusCode = 201;\n    res.setHeader('Content-Type', 'application/json');\n    res.end(JSON.stringify(created));\n    return;\n  }\n\n  res.setHeader('Allow', 'GET, POST');\n  res.statusCode = 405;\n  res.end('Method Not Allowed');\n}\n\nmodule.exports = handler;\nmodule.exports.default = handler;\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import React from 'react';\n\nexport default function AttributeGroupsPage() {\n  const [groups, setGroups] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const [saving, setSaving] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const [name, setName] = React.useState('');\n  const [description, setDescription] = React.useState('');\n\n  const load = React.useCallback(async () => {\n    setLoading(true);\n    setError('');\n    try {\n      const res = await fetch('/api/attribute-groups');\n      if (!res.ok) throw new Error('Failed to load');\n      const data = await res.json();\n      setGroups(Array.isArray(data) ? data : []);\n    } catch (e) {\n      setError('Failed to load attribute groups');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    load();\n  }, [load]);\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    setSaving(true);\n    setError('');\n    try {\n      const res = await fetch('/api/attribute-groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name, description }),\n      });\n      if (res.status === 409) {\n        const body = await res.json();\n        setError(body && body.error ? body.error : 'Duplicate name');\n        return;\n      }\n      if (!res.ok) throw new Error('Failed to save');\n      setName('');\n      setDescription('');\n      await load();\n    } catch (e) {\n      setError('Failed to save attribute group');\n    } finally {\n      setSaving(false);\n    }\n  }\n\n  return (\n    <div style={{ maxWidth: 800, margin: '2rem auto', padding: '0 1rem' }}>\n      <h1>Attribute Groups</h1>\n      <p style={{ color: '#666' }}>Create and manage attribute groups to organize product attributes (e.g., Dimensions, Materials, Colors).</p>\n\n      <form onSubmit={onSubmit} style={{ margin: '1rem 0', padding: '1rem', border: '1px solid #eee', borderRadius: 8 }}>\n        <div style={{ display: 'flex', flexDirection: 'column', gap: 8 }}>\n          <label>\n            <div style={{ fontWeight: 600 }}>Name</div>\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"e.g., Colors\"\n              required\n              style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}\n            />\n          </label>\n          <label>\n            <div style={{ fontWeight: 600 }}>Description</div>\n            <input\n              type=\"text\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Optional description\"\n              style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}\n            />\n          </label>\n          <div>\n            <button type=\"submit\" disabled={saving} style={{ padding: '8px 14px' }}>\n              {saving ? 'Saving…' : 'Add Group'}\n            </button>\n          </div>\n          {error ? <div style={{ color: 'crimson' }}>{error}</div> : null}\n        </div>\n      </form>\n\n      <div>\n        <h2 style={{ marginTop: '2rem' }}>Existing Groups</h2>\n        {loading ? (\n          <div>Loading…</div>\n        ) : groups.length === 0 ? (\n          <div style={{ color: '#666' }}>No attribute groups yet.</div>\n        ) : (\n          <ul style={{ listStyle: 'none', padding: 0, margin: 0, display: 'grid', gap: 12 }}>\n            {groups.map((g) => (\n              <li key={g.id} style={{ border: '1px solid #eee', borderRadius: 8, padding: 12 }}>\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'baseline', gap: 12 }}>\n                  <div>\n                    <div style={{ fontWeight: 600 }}>{g.name}</div>\n                    {g.description ? (\n                      <div style={{ color: '#555' }}>{g.description}</div>\n                    ) : null}\n                  </div>\n                  <div style={{ color: '#888', fontSize: 12 }}>\n                    {new Date(g.createdAt).toLocaleString()}\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/api-attribute-groups.test.js",
      "content": "const fs = require('fs');\nconst path = require('path');\nconst os = require('os');\nconst handler = require('../pages/api/attribute-groups');\n\nfunction createMockRes() {\n  const res = {};\n  res._status = 200;\n  res._headers = {};\n  res._data = '';\n  res.statusCode = 200;\n  res.setHeader = (k, v) => {\n    res._headers[k.toLowerCase()] = v;\n  };\n  res.end = (data) => {\n    if (typeof data === 'string' || Buffer.isBuffer(data)) {\n      res._data += data.toString();\n    } else if (data) {\n      res._data += String(data);\n    }\n    return res;\n  };\n  return res;\n}\n\nfunction createMockReq(method, body) {\n  return {\n    method,\n    body,\n    headers: { 'content-type': 'application/json' },\n  };\n}\n\nasync function runHandler(method, body) {\n  const req = createMockReq(method, body);\n  const res = createMockRes();\n  await handler(req, res);\n  return res;\n}\n\n// A very small smoke test for the API handler\n(async function main() {\n  const tmpFile = path.join(os.tmpdir(), `attr-groups-test-${Date.now()}.json`);\n  process.env.ATTR_GROUPS_FILE = tmpFile;\n  fs.writeFileSync(tmpFile, '[]', 'utf8');\n\n  let res = await runHandler('POST', { name: 'Colors', description: 'Basic color attributes' });\n  if (res.statusCode !== 201) {\n    throw new Error('Expected 201 on create, got ' + res.statusCode + ' data=' + res._data);\n  }\n\n  res = await runHandler('GET');\n  if (res.statusCode !== 200) {\n    throw new Error('Expected 200 on list');\n  }\n  const list = JSON.parse(res._data || '[]');\n  if (!Array.isArray(list) || list.length !== 1 || list[0].name !== 'Colors') {\n    throw new Error('List response invalid: ' + res._data);\n  }\n\n  // Duplicate name should 409\n  res = await runHandler('POST', { name: 'Colors' });\n  if (res.statusCode !== 409) {\n    throw new Error('Expected 409 on duplicate name, got ' + res.statusCode);\n  }\n\n  // Clean up\n  try { fs.unlinkSync(tmpFile); } catch (e) {}\n  // eslint-disable-next-line no-console\n  console.log('API attribute-groups smoke test passed');\n})();\n"
    },
    {
      "path": "commit_message",
      "content": "FEATURE: Add admin Attribute Groups management with file-backed API (GET/POST), UI page to create/list groups, and a small API smoke test."
    }
  ]
}