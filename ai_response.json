{
  "files": [
    {
      "path": "data/attribute-groups.json",
      "content": "[\n  {\n    \"code\": \"basic\",\n    \"name\": \"Basic\",\n    \"description\": \"Common fields like title, subtitle, and summary\"\n  },\n  {\n    \"code\": \"seo\",\n    \"name\": \"SEO\",\n    \"description\": \"Search engine related attributes\"\n  }\n]\n"
    },
    {
      "path": "lib/attributeGroups.js",
      "content": "'use strict';\n\nfunction toSlug(value) {\n  if (!value) return '';\n  return String(value)\n    .trim()\n    .toLowerCase()\n    .replace(/[^a-z0-9-_\\s]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-')\n    .replace(/^-/g, '')\n    .replace(/-$/g, '');\n}\n\nfunction sanitizeGroup(input) {\n  const code = toSlug(input && input.code);\n  const name = (input && input.name ? String(input.name) : '').trim();\n  const description = (input && input.description ? String(input.description) : '').trim();\n  return { code, name, description };\n}\n\nfunction validateGroup(input) {\n  const g = sanitizeGroup(input);\n  const errors = {};\n\n  if (!g.code) {\n    errors.code = 'Code is required';\n  } else if (!/^[a-z0-9_-]{2,32}$/.test(g.code)) {\n    errors.code = 'Code must be 2-32 chars: lowercase letters, numbers, dash or underscore';\n  }\n\n  if (!g.name) {\n    errors.name = 'Name is required';\n  } else if (g.name.length > 64) {\n    errors.name = 'Name must be at most 64 characters';\n  }\n\n  if (g.description && g.description.length > 200) {\n    errors.description = 'Description must be at most 200 characters';\n  }\n\n  return { valid: Object.keys(errors).length === 0, errors, group: g };\n}\n\nfunction isCodeUnique(groups, code) {\n  const c = toSlug(code);\n  return !Array.isArray(groups) || groups.findIndex(g => (g && g.code) === c) === -1;\n}\n\nfunction addGroup(groups, input) {\n  const { valid, errors, group } = validateGroup(input);\n  if (!valid) return { ok: false, errors };\n  if (!isCodeUnique(groups, group.code)) {\n    return { ok: false, errors: { code: 'Code already exists' } };\n  }\n  const updated = Array.isArray(groups) ? groups.slice() : [];\n  updated.push(group);\n  return { ok: true, groups: updated, group };\n}\n\nmodule.exports = {\n  toSlug,\n  sanitizeGroup,\n  validateGroup,\n  isCodeUnique,\n  addGroup\n};\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "import fs from 'fs';\nimport path from 'path';\n\nconst { validateGroup, isCodeUnique, sanitizeGroup } = require('../../lib/attributeGroups');\n\n// Load initial groups from data file once per cold start\nconst dataFile = path.join(process.cwd(), 'data', 'attribute-groups.json');\nlet initialGroups = [];\ntry {\n  const raw = fs.readFileSync(dataFile, 'utf8');\n  const parsed = JSON.parse(raw);\n  if (Array.isArray(parsed)) initialGroups = parsed;\n} catch (e) {\n  initialGroups = [];\n}\n\n// Ephemeral in-memory store per serverless instance\nlet runtimeGroups = initialGroups.slice();\n\nexport default function handler(req, res) {\n  if (req.method === 'GET') {\n    res.status(200).json({ groups: runtimeGroups });\n    return;\n  }\n\n  if (req.method === 'POST') {\n    const payload = req.body || {};\n    const { valid, errors, group } = validateGroup(payload);\n    if (!valid) {\n      res.status(400).json({ error: 'Validation failed', details: errors });\n      return;\n    }\n    if (!isCodeUnique(runtimeGroups, group.code)) {\n      res.status(409).json({ error: 'Code already exists' });\n      return;\n    }\n    const sanitized = sanitizeGroup(group);\n    runtimeGroups = runtimeGroups.concat([sanitized]);\n    res.status(201).json({ group: sanitized });\n    return;\n  }\n\n  res.setHeader('Allow', 'GET, POST');\n  res.status(405).end('Method Not Allowed');\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import React, { useEffect, useMemo, useState } from 'react';\n\nfunction toSlug(value) {\n  if (!value) return '';\n  return String(value)\n    .trim()\n    .toLowerCase()\n    .replace(/[^a-z0-9-_\\s]/g, '')\n    .replace(/\\s+/g, '-')\n    .replace(/-+/g, '-')\n    .replace(/^-/g, '')\n    .replace(/-$/g, '');\n}\n\nfunction validateLocal(group) {\n  const g = {\n    code: toSlug(group.code),\n    name: (group.name || '').trim(),\n    description: (group.description || '').trim()\n  };\n  const errors = {};\n  if (!g.code) errors.code = 'Code is required';\n  else if (!/^[a-z0-9_-]{2,32}$/.test(g.code)) errors.code = '2-32 chars: a-z, 0-9, -, _';\n  if (!g.name) errors.name = 'Name is required';\n  else if (g.name.length > 64) errors.name = 'Max 64 chars';\n  if (g.description && g.description.length > 200) errors.description = 'Max 200 chars';\n  return { valid: Object.keys(errors).length === 0, errors, group: g };\n}\n\nconst lsKey = 'attributeGroupsLocal';\n\nexport default function AttributeGroupsAdmin() {\n  const [serverGroups, setServerGroups] = useState([]);\n  const [localGroups, setLocalGroups] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Load local first for instant UI\n    try {\n      const raw = window.localStorage.getItem(lsKey);\n      if (raw) setLocalGroups(JSON.parse(raw));\n    } catch (_) {}\n\n    fetch('/api/attribute-groups')\n      .then(r => {\n        if (!r.ok) throw new Error('Failed to load');\n        return r.json();\n      })\n      .then(json => {\n        setServerGroups(Array.isArray(json.groups) ? json.groups : []);\n        setLoading(false);\n      })\n      .catch(e => {\n        setError(e.message || 'Error');\n        setLoading(false);\n      });\n  }, []);\n\n  const groups = useMemo(() => {\n    // merge, local overrides by code\n    const map = new Map();\n    serverGroups.forEach(g => map.set(g.code, g));\n    localGroups.forEach(g => map.set(g.code, g));\n    return Array.from(map.values()).sort((a, b) => a.code.localeCompare(b.code));\n  }, [serverGroups, localGroups]);\n\n  const [form, setForm] = useState({ code: '', name: '', description: '' });\n  const [formErrors, setFormErrors] = useState({});\n  const [saving, setSaving] = useState(false);\n  const [notice, setNotice] = useState(null);\n\n  function onChange(e) {\n    const { name, value } = e.target;\n    setForm(f => ({ ...f, [name]: name === 'code' ? value : value }));\n    if (name === 'code') {\n      // live slugging preview but don't override user typing too aggressively\n      // we show in helper text below\n    }\n  }\n\n  function persistLocal(newLocal) {\n    setLocalGroups(newLocal);\n    try {\n      window.localStorage.setItem(lsKey, JSON.stringify(newLocal));\n    } catch (_) {}\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    setNotice(null);\n    const { valid, errors, group } = validateLocal(form);\n    if (!valid) {\n      setFormErrors(errors);\n      return;\n    }\n    if (groups.find(g => g.code === group.code)) {\n      setFormErrors({ code: 'Code already exists' });\n      return;\n    }\n    setFormErrors({});\n    const newLocal = localGroups.concat([group]);\n    persistLocal(newLocal);\n\n    // Try to persist to API (best-effort)\n    setSaving(true);\n    try {\n      const r = await fetch('/api/attribute-groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(group)\n      });\n      if (r.ok) {\n        setNotice('Saved');\n        // refresh server groups\n        const json = await fetch('/api/attribute-groups').then(res => res.json());\n        setServerGroups(Array.isArray(json.groups) ? json.groups : []);\n      } else {\n        const err = await r.json().catch(() => ({}));\n        setNotice(err && err.error ? `Local only: ${err.error}` : 'Saved locally');\n      }\n    } catch (_) {\n      setNotice('Saved locally');\n    } finally {\n      setSaving(false);\n      setForm({ code: '', name: '', description: '' });\n    }\n  }\n\n  function resetLocal() {\n    persistLocal([]);\n  }\n\n  return (\n    <div style={{ padding: 20, maxWidth: 900, margin: '0 auto', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif' }}>\n      <h1>Attribute Groups</h1>\n      <p style={{ color: '#555' }}>Group your product attributes to keep your catalog tidy. New groups are saved locally and sent to the server when possible.</p>\n\n      <section style={{ marginTop: 20, marginBottom: 30, padding: 16, border: '1px solid #eee', borderRadius: 8 }}>\n        <h2 style={{ marginTop: 0 }}>Create Group</h2>\n        <form onSubmit={onSubmit}>\n          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>\n            <div>\n              <label htmlFor=\"code\" style={{ display: 'block', fontWeight: 600 }}>Code</label>\n              <input id=\"code\" name=\"code\" value={form.code} onChange={onChange} placeholder=\"e.g. dimensions\" style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }} />\n              <div style={{ fontSize: 12, color: '#666', marginTop: 4 }}>Slug: {toSlug(form.code) || 'n/a'}</div>\n              {formErrors.code && <div style={{ color: '#b00020', fontSize: 12 }}>{formErrors.code}</div>}\n            </div>\n            <div>\n              <label htmlFor=\"name\" style={{ display: 'block', fontWeight: 600 }}>Name</label>\n              <input id=\"name\" name=\"name\" value={form.name} onChange={onChange} placeholder=\"Dimensions\" style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }} />\n              {formErrors.name && <div style={{ color: '#b00020', fontSize: 12 }}>{formErrors.name}</div>}\n            </div>\n          </div>\n          <div style={{ marginTop: 12 }}>\n            <label htmlFor=\"description\" style={{ display: 'block', fontWeight: 600 }}>Description</label>\n            <textarea id=\"description\" name=\"description\" value={form.description} onChange={onChange} rows={3} placeholder=\"Optional\" style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }} />\n            {formErrors.description && <div style={{ color: '#b00020', fontSize: 12 }}>{formErrors.description}</div>}\n          </div>\n          <div style={{ marginTop: 12, display: 'flex', gap: 8, alignItems: 'center' }}>\n            <button type=\"submit\" disabled={saving} style={{ padding: '8px 14px', background: '#111827', color: 'white', border: 0, borderRadius: 6, cursor: 'pointer' }}>{saving ? 'Saving…' : 'Add Group'}</button>\n            <button type=\"button\" onClick={resetLocal} style={{ padding: '8px 14px', background: '#e5e7eb', color: '#111827', border: 0, borderRadius: 6, cursor: 'pointer' }}>Reset local changes</button>\n            {notice && <span style={{ color: '#065f46' }}>{notice}</span>}\n          </div>\n        </form>\n      </section>\n\n      <section>\n        <h2 style={{ marginTop: 0 }}>Groups ({groups.length})</h2>\n        {loading && <div>Loading…</div>}\n        {error && <div style={{ color: '#b00020' }}>Error: {error}</div>}\n        {!loading && groups.length === 0 && <div>No groups yet.</div>}\n        {!loading && groups.length > 0 && (\n          <div style={{ border: '1px solid #eee', borderRadius: 8, overflow: 'hidden' }}>\n            <div style={{ display: 'grid', gridTemplateColumns: '200px 200px 1fr', gap: 0, background: '#f9fafb', fontWeight: 600, padding: '10px 12px', borderBottom: '1px solid #eee' }}>\n              <div>Code</div>\n              <div>Name</div>\n              <div>Description</div>\n            </div>\n            {groups.map(g => (\n              <div key={g.code} style={{ display: 'grid', gridTemplateColumns: '200px 200px 1fr', gap: 0, padding: '10px 12px', borderBottom: '1px solid #f3f4f6' }}>\n                <div style={{ fontFamily: 'ui-monospace, SFMono-Regular, Menlo, Consolas, monospace' }}>{g.code}</div>\n                <div>{g.name}</div>\n                <div style={{ color: '#4b5563' }}>{g.description}</div>\n              </div>\n            ))}\n          </div>\n        )}\n      </section>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/attributeGroups.test.js",
      "content": "const assert = require('assert');\nconst { validateGroup, addGroup, isCodeUnique } = require('../lib/attributeGroups');\n\n(function testValidate() {\n  let { valid, errors } = validateGroup({ code: '', name: '' });\n  assert.strictEqual(valid, false);\n  assert.ok(errors.code);\n  assert.ok(errors.name);\n\n  ({ valid, errors } = validateGroup({ code: 'SEO', name: 'Search' }));\n  assert.strictEqual(valid, true);\n  assert.strictEqual(errors && Object.keys(errors).length, 0);\n})();\n\n(function testAddAndUnique() {\n  const groups = [{ code: 'basic', name: 'Basic' }];\n  assert.strictEqual(isCodeUnique(groups, 'seo'), true);\n  assert.strictEqual(isCodeUnique(groups, 'basic'), false);\n\n  const { ok, groups: updated } = addGroup(groups, { code: 'seo', name: 'SEO' });\n  assert.strictEqual(ok, true);\n  assert.strictEqual(updated.length, 2);\n})();\n\nconsole.log('attributeGroups tests passed');\n"
    },
    {
      "path": "commit_message",
      "content": "FEATURE: Add Attribute Groups admin UI and API (list/create) with validation and a small unit test"
    }
  ]
}