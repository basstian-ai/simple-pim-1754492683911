{
  "commit_message": "feat(api): add tag filtering support to /api/products (including directory route) and add test to ensure products can be filtered by tag",
  "files": [
    {
      "path": "lib/api/productsHandler.js",
      "content": "import { getProducts } from '../products';\n\nexport default async function productsHandler(req, res) {\n  const { search } = req.query || {};\n  const rawTags = (req.query && req.query.tags) || '';\n\n  let tags = [];\n  if (typeof rawTags === 'string' && rawTags.trim() !== '') {\n    tags = rawTags\n      .split(',')\n      .map((t) => {\n        try {\n          return decodeURIComponent(t);\n        } catch (e) {\n          return t;\n        }\n      })\n      .map((t) => t.trim())\n      .filter(Boolean);\n  }\n\n  const products = await getProducts({ search, tags });\n  res.status(200).json(products);\n}\n"
    },
    {
      "path": "pages/api/products.js",
      "content": "import productsHandler from '../../lib/api/productsHandler';\n\nexport default productsHandler;\n"
    },
    {
      "path": "pages/api/products/index.js",
      "content": "import productsHandler from '../../../lib/api/productsHandler';\n\nexport default productsHandler;\n"
    },
    {
      "path": "tests/api-products-tags.test.js",
      "content": "const handler = require('../pages/api/products').default;\n\nfunction createRes() {\n  let statusCode = 0;\n  let body = undefined;\n  return {\n    status(code) {\n      statusCode = code;\n      return {\n        json(data) {\n          body = data;\n        },\n      };\n    },\n    getStatus() {\n      return statusCode;\n    },\n    getBody() {\n      return body;\n    },\n  };\n}\n\ndescribe('GET /api/products with tags filter', () => {\n  test('returns only products that include the requested tag', async () => {\n    const allProducts = require('../data/products.json');\n    const allTags = Array.from(\n      new Set(\n        [].concat(\n          ...allProducts.map((p) => Array.isArray(p.tags) ? p.tags : [])\n        )\n      )\n    );\n\n    // If dataset has no tags, skip test gracefully\n    if (allTags.length === 0) {\n      console.warn('No tags found in dataset; skipping tag filter test.');\n      return;\n    }\n\n    const tag = allTags[0];\n\n    const req = { query: { tags: encodeURIComponent(tag) } };\n    const res = createRes();\n\n    await handler(req, res);\n\n    expect(res.getStatus()).toBe(200);\n    const data = res.getBody();\n    expect(Array.isArray(data)).toBe(true);\n    expect(data.length).toBeGreaterThan(0);\n    // Every product should include the tag\n    for (const p of data) {\n      const tags = Array.isArray(p.tags) ? p.tags : [];\n      expect(tags.includes(tag)).toBe(true);\n    }\n  });\n});\n"
    }
  ]
}