{
  "diff": "--- a/pages/index.js\n+++ b/pages/index.js\n@@ -1,36 +1,67 @@\n import React, { useEffect, useState } from 'react';\n import ProductList from '../components/ProductList';\n \n const Home = () => {\n   const [products, setProducts] = useState([]);\n   const [query, setQuery] = useState('');\n+  const [inStockOnly, setInStockOnly] = useState(false);\n \n   useEffect(() => {\n     let active = true;\n     const controller = new AbortController();\n \n     const fetchProducts = async () => {\n-      const qs = query ? `?search=${encodeURIComponent(query)}` : '';\n+      const params = new URLSearchParams();\n+      if (query) params.set('search', query);\n+      if (inStockOnly) params.set('inStock', '1');\n+      const qs = params.toString() ? `?${params.toString()}` : '';\n       const res = await fetch(`/api/products${qs}`, { signal: controller.signal });\n       const data = await res.json();\n       if (active) setProducts(data);\n     };\n \n     const t = setTimeout(fetchProducts, 250);\n \n     return () => {\n       active = false;\n       controller.abort();\n       clearTimeout(t);\n     };\n-  }, [query]);\n+  }, [query, inStockOnly]);\n+\n+  const params = new URLSearchParams();\n+  if (query) params.set('search', query);\n+  if (inStockOnly) params.set('inStock', '1');\n+  const exportHref = `/api/products/export${params.toString() ? `?${params.toString()}` : ''}`;\n \n   return (\n     <div style={{ maxWidth: 900, margin: '0 auto', padding: '1rem' }}>\n-      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem' }}>\n-        <input\n-          type=\"search\"\n-          placeholder=\"Search products by name, SKU or description...\"\n-          value={query}\n-          onChange={(e) => setQuery(e.target.value)}\n-          style={{ flex: 1, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n-          aria-label=\"Search products\"\n-        />\n-        <span style={{ color: '#666', fontSize: 12 }}>\n-          {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n-        </span>\n-      </div>\n+      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem', flexWrap: 'wrap' }}>\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', flex: 1, minWidth: 280 }}>\n+          <input\n+            type=\"search\"\n+            placeholder=\"Search products by name, SKU or description...\"\n+            value={query}\n+            onChange={(e) => setQuery(e.target.value)}\n+            style={{ flex: 1, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n+            aria-label=\"Search products\"\n+          />\n+        </div>\n+        <label htmlFor=\"inStockOnly\" style={{ display: 'flex', alignItems: 'center', gap: 6, fontSize: 14, color: '#333' }}>\n+          <input\n+            id=\"inStockOnly\"\n+            type=\"checkbox\"\n+            checked={inStockOnly}\n+            onChange={(e) => setInStockOnly(e.target.checked)}\n+          />\n+          In stock only\n+        </label>\n+        <a\n+          href={exportHref}\n+          style={{ padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6, textDecoration: 'none', color: '#0366d6', background: '#f9f9f9' }}\n+          aria-label=\"Export filtered products to CSV\"\n+        >\n+          Export CSV\n+        </a>\n+        <span style={{ color: '#666', fontSize: 12, marginLeft: 'auto' }}>\n+          {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n+        </span>\n+      </div>\n       <ProductList products={products} />\n     </div>\n   );\n };\n \n export default Home;\n",
  "files": [
    {
      "path": "lib/isInStock.js",
      "content": "function isInStock(p) {\n  if (!p || typeof p !== 'object') return false;\n  if (Object.prototype.hasOwnProperty.call(p, 'inStock')) return !!p.inStock;\n  const candidates = ['stock', 'inventory', 'quantity', 'qty', 'available', 'onHand'];\n  for (const key of candidates) {\n    if (Object.prototype.hasOwnProperty.call(p, key)) {\n      const v = p[key];\n      if (typeof v === 'number') return v > 0;\n      if (typeof v === 'boolean') return v;\n      const n = Number(v);\n      if (!Number.isNaN(n)) return n > 0;\n      if (typeof v === 'string') {\n        const lower = v.toLowerCase();\n        if (lower === 'true' || lower === 'yes' || lower === 'in stock') return true;\n      }\n    }\n  }\n  return false;\n}\n\nmodule.exports = isInStock;\nmodule.exports.default = isInStock;\n"
    },
    {
      "path": "lib/exportCsv.js",
      "content": "const isInStock = require('./isInStock');\n\nfunction escapeCsvValue(val) {\n  if (val === null || val === undefined) return '';\n  let s = String(val);\n  if (s.includes('\"')) s = s.replace(/\"/g, '\"\"');\n  if (/[\",\\n]/.test(s)) s = '\"' + s + '\"';\n  return s;\n}\n\nfunction getPrice(p) {\n  if (p == null) return '';\n  if (Object.prototype.hasOwnProperty.call(p, 'price')) return p.price;\n  if (p.pricing && Object.prototype.hasOwnProperty.call(p.pricing, 'price')) return p.pricing.price;\n  return '';\n}\n\nfunction getId(p, idx) {\n  return p.id ?? p.sku ?? p.slug ?? String(idx + 1);\n}\n\nfunction getName(p) {\n  return p.name ?? p.title ?? '';\n}\n\nfunction productsToCsv(products = []) {\n  const headers = ['id', 'sku', 'name', 'price', 'description', 'inStock'];\n  const lines = [headers.join(',')];\n  products.forEach((p, idx) => {\n    const row = [\n      escapeCsvValue(getId(p, idx)),\n      escapeCsvValue(p.sku ?? ''),\n      escapeCsvValue(getName(p)),\n      escapeCsvValue(getPrice(p)),\n      escapeCsvValue(p.description ?? ''),\n      escapeCsvValue(isInStock(p))\n    ];\n    lines.push(row.join(','));\n  });\n  return lines.join('\\n');\n}\n\nmodule.exports = { productsToCsv };\n"
    },
    {
      "path": "pages/api/products/export.js",
      "content": "const { getProducts } = require('../../../lib/products');\nconst { productsToCsv } = require('../../../lib/exportCsv');\nconst isInStock = require('../../../lib/isInStock');\n\nmodule.exports = async function handler(req, res) {\n  try {\n    const { search, inStock } = req.query || {};\n    let products = await getProducts({ search });\n\n    const inStockOnly = inStock === '1' || inStock === 'true' || inStock === 1 || inStock === true;\n    if (inStockOnly) {\n      products = products.filter((p) => isInStock(p));\n    }\n\n    const csv = productsToCsv(products);\n    res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n    res.setHeader('Content-Disposition', 'attachment; filename=\"products.csv\"');\n    res.status(200).send(csv);\n  } catch (e) {\n    res.status(500).json({ error: 'Failed to export products' });\n  }\n};\n"
    }
  ],
  "modifications": [
    {
      "path": "pages/api/products.js",
      "diff": "--- a/pages/api/products.js\n+++ b/pages/api/products.js\n@@ -1,6 +1,17 @@\n import { getProducts } from '../../lib/products';\n+import isInStock from '../../lib/isInStock';\n \n export default async function handler(req, res) {\n-  const { search } = req.query || {};\n-  const products = await getProducts({ search });\n-  res.status(200).json(products);\n+  const { search, inStock } = req.query || {};\n+  let products = await getProducts({ search });\n+\n+  const inStockOnly =\n+    inStock === '1' ||\n+    inStock === 'true' ||\n+    inStock === 1 ||\n+    inStock === true ||\n+    (typeof inStock === 'string' && inStock.toLowerCase() === 'true');\n+\n+  if (inStockOnly) {\n+    products = products.filter((p) => isInStock(p));\n+  }\n+\n+  res.status(200).json(products);\n }\n"
    }
  ],
  "tests": [
    {
      "path": "tests/exportCsv.test.js",
      "content": "const { productsToCsv } = require('../lib/exportCsv');\n\ndescribe('productsToCsv', () => {\n  test('generates CSV with header and escaped values', () => {\n    const products = [\n      { id: 1, sku: 'A', name: 'Alpha', price: 10.5, description: 'Hello, \"world\"', inStock: true },\n      { id: 2, sku: 'B', title: 'Bravo, Inc', description: 'Line1\\nLine2', stock: 0 }\n    ];\n\n    const csv = productsToCsv(products);\n    const lines = csv.split('\\n');\n\n    expect(lines[0]).toBe('id,sku,name,price,description,inStock');\n    expect(lines).toHaveLength(products.length + 1);\n\n    // First row: quotes must be doubled and value wrapped\n    expect(lines[1]).toContain('\"Hello, \"\"world\"\"\"');\n\n    // Second row: comma in name should be quoted\n    // and inStock derived from stock=0 should be false\n    const second = lines[2].split(',');\n    expect(second[2]).toBe('\"Bravo, Inc\"');\n    expect(second[5]).toBe('false');\n  });\n});\n"
    }
  ]
}