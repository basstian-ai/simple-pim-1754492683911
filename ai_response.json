{
  "files": [
    {
      "path": "pages/api/attributes.js",
      "content": "export default function handler(req, res) {\n  if (req.method !== 'GET') {\n    res.status(405).json({ ok: false, error: 'Method Not Allowed' });\n    return;\n  }\n\n  const payload = {\n    ok: true,\n    updatedAt: new Date().toISOString(),\n    groups: [\n      {\n        id: 'basic',\n        label: 'Basic',\n        description: 'Core product identification fields',\n        attributes: [\n          { code: 'name', label: 'Name', type: 'text', required: true },\n          { code: 'sku', label: 'SKU', type: 'text', required: true },\n          { code: 'description', label: 'Description', type: 'richtext', required: false }\n        ]\n      },\n      {\n        id: 'pricing',\n        label: 'Pricing',\n        description: 'Price and currency configuration',\n        attributes: [\n          { code: 'price', label: 'Price', type: 'number', required: true },\n          { code: 'currency', label: 'Currency', type: 'select', options: ['USD', 'EUR', 'GBP'], required: true },\n          { code: 'sale_price', label: 'Sale Price', type: 'number', required: false }\n        ]\n      },\n      {\n        id: 'variants',\n        label: 'Variants',\n        description: 'Common variant-defining attributes',\n        attributes: [\n          { code: 'color', label: 'Color', type: 'swatch', required: false },\n          { code: 'size', label: 'Size', type: 'select', options: ['XS', 'S', 'M', 'L', 'XL'], required: false },\n          { code: 'material', label: 'Material', type: 'text', required: false }\n        ]\n      }\n    ]\n  };\n\n  res.status(200).json(payload);\n}\n"
    },
    {
      "path": "pages/admin/attributes.js",
      "content": "import React, { useEffect, useState } from 'react';\n\nexport default function AttributeGroupsAdmin() {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [expanded, setExpanded] = useState({});\n\n  useEffect(() => {\n    let isMounted = true;\n    async function load() {\n      try {\n        const res = await fetch('/api/attributes');\n        if (!res.ok) throw new Error(`HTTP ${res.status}`);\n        const json = await res.json();\n        if (isMounted) setData(json);\n      } catch (e) {\n        if (isMounted) setError(e.message || 'Failed to load');\n      }\n    }\n    load();\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  const toggle = (id) => {\n    setExpanded((prev) => ({ ...prev, [id]: !prev[id] }));\n  };\n\n  return (\n    <div style={styles.container}>\n      <h1 style={styles.title}>Attribute Groups</h1>\n      <p style={styles.subtitle}>Predefined attribute groups to describe products and variants.</p>\n      {error && <div style={styles.error}>Error: {error}</div>}\n      {!data && !error && <div style={styles.loading}>Loading…</div>}\n      {data && (\n        <div>\n          <div style={styles.meta}>Updated: {new Date(data.updatedAt).toLocaleString()}</div>\n          <div style={styles.list}>\n            {data.groups.map((g) => (\n              <div key={g.id} style={styles.card}>\n                <div style={styles.cardHeader}>\n                  <button style={styles.expandBtn} onClick={() => toggle(g.id)} aria-expanded={!!expanded[g.id]} aria-controls={`group-${g.id}`}>\n                    {expanded[g.id] ? '▾' : '▸'}\n                  </button>\n                  <div style={{ flex: 1 }}>\n                    <div style={styles.groupTitle}>{g.label}</div>\n                    <div style={styles.groupDesc}>{g.description}</div>\n                  </div>\n                  <div style={styles.badge}>{g.attributes.length} fields</div>\n                </div>\n                {expanded[g.id] && (\n                  <div id={`group-${g.id}`} style={styles.cardBody}>\n                    {g.attributes.map((a) => (\n                      <div key={a.code} style={styles.attrRow}>\n                        <div style={styles.attrMain}>\n                          <div style={styles.attrCode}>{a.code}</div>\n                          <div style={styles.attrLabel}>{a.label}</div>\n                        </div>\n                        <div style={styles.attrMeta}>\n                          <span style={styles.typeTag}>{a.type}</span>\n                          {a.required && <span style={styles.requiredTag}>required</span>}\n                          {Array.isArray(a.options) && a.options.length > 0 && (\n                            <span style={styles.optionsTag}>{a.options.join(', ')}</span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst styles = {\n  container: { maxWidth: 900, margin: '40px auto', padding: '0 16px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' },\n  title: { margin: '0 0 8px', fontSize: 28, lineHeight: '32px' },\n  subtitle: { margin: '0 0 16px', color: '#555' },\n  meta: { marginBottom: 12, color: '#666', fontSize: 13 },\n  list: { display: 'grid', gridTemplateColumns: '1fr', gap: 12 },\n  card: { border: '1px solid #e5e7eb', borderRadius: 8, overflow: 'hidden', background: '#fff' },\n  cardHeader: { display: 'flex', alignItems: 'center', padding: '10px 12px', background: '#f9fafb', borderBottom: '1px solid #e5e7eb' },\n  groupTitle: { fontWeight: 600 },\n  groupDesc: { color: '#6b7280', fontSize: 13 },\n  badge: { background: '#eef2ff', color: '#3730a3', fontSize: 12, padding: '2px 8px', borderRadius: 999 },\n  expandBtn: { marginRight: 8, border: '1px solid #d1d5db', borderRadius: 6, background: '#fff', padding: '2px 6px', cursor: 'pointer' },\n  cardBody: { padding: 12 },\n  attrRow: { display: 'flex', alignItems: 'center', justifyContent: 'space-between', padding: '8px 0', borderBottom: '1px dashed #eef2f7' },\n  attrMain: { display: 'flex', alignItems: 'baseline', gap: 8 },\n  attrCode: { fontFamily: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, Liberation Mono, monospace', fontSize: 13, background: '#f3f4f6', padding: '2px 6px', borderRadius: 4 },\n  attrLabel: { color: '#111827' },\n  attrMeta: { display: 'flex', gap: 8, alignItems: 'center' },\n  typeTag: { fontSize: 12, color: '#374151', background: '#f3f4f6', padding: '2px 6px', borderRadius: 999 },\n  requiredTag: { fontSize: 12, color: '#991b1b', background: '#fee2e2', padding: '2px 6px', borderRadius: 999 },\n  optionsTag: { fontSize: 12, color: '#065f46', background: '#d1fae5', padding: '2px 6px', borderRadius: 999 },\n  loading: { padding: 12 }\n};\n"
    },
    {
      "path": "__tests__/api-attributes.test.js",
      "content": "const handlerModule = require('../pages/api/attributes');\nconst handler = handlerModule.default || handlerModule;\n\nfunction createMockRes() {\n  const res = {};\n  res.statusCode = 200;\n  res.headers = {};\n  res.status = (code) => {\n    res.statusCode = code;\n    return res;\n  };\n  res.setHeader = (k, v) => {\n    res.headers[k] = v;\n  };\n  res.jsonData = undefined;\n  res.json = (data) => {\n    res.jsonData = data;\n    return res;\n  };\n  return res;\n}\n\ndescribe('GET /api/attributes', () => {\n  it('returns attribute groups payload', async () => {\n    const req = { method: 'GET' };\n    const res = createMockRes();\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(200);\n    expect(res.jsonData).toBeDefined();\n    expect(res.jsonData.ok).toBe(true);\n    expect(Array.isArray(res.jsonData.groups)).toBe(true);\n    expect(res.jsonData.groups.length).toBeGreaterThan(0);\n    const first = res.jsonData.groups[0];\n    expect(first).toHaveProperty('id');\n    expect(first).toHaveProperty('attributes');\n  });\n\n  it('rejects non-GET methods', async () => {\n    const req = { method: 'POST' };\n    const res = createMockRes();\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(405);\n    expect(res.jsonData.ok).toBe(false);\n  });\n});\n"
    }
  ]
}