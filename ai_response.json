{
  "commit_message": "Admin Products: add search, tag filters, in-stock toggle and CSV export with URL sync; add test for URL/query synchronization and update README",
  "files": [
    {
      "path": "pages/admin/products.js",
      "content": "import React, { useEffect, useRef, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport PimAdminProductList from '../../components/PimAdminProductList';\nimport ExportCsvLink from '../../components/ExportCsvLink';\nimport StockFilterToggle from '../../components/StockFilterToggle';\n\nconst AdminProductsPage = () => {\n  const router = useRouter();\n  const [products, setProducts] = useState([]);\n  const [query, setQuery] = useState('');\n  const [allTags, setAllTags] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [inStockOnly, setInStockOnly] = useState(false);\n\n  const initializedFromUrl = useRef(false);\n\n  // Initialize filter state from URL on first render\n  useEffect(() => {\n    if (initializedFromUrl.current) return;\n    const q = router?.query || {};\n    if (typeof q.search === 'string') setQuery(q.search);\n    if (typeof q.tags === 'string' && q.tags.trim()) {\n      setSelectedTags(q.tags.split(',').map((t) => decodeURIComponent(t)));\n    }\n    if (q.inStock === '1' || q.inStock === 'true') setInStockOnly(true);\n    initializedFromUrl.current = true;\n  }, [router?.query]);\n\n  // Keep URL in sync with filters (for shareable links and CSV export)\n  useEffect(() => {\n    const nextQuery = {};\n    if (query) nextQuery.search = query;\n    if (selectedTags.length) nextQuery.tags = selectedTags.join(',');\n    if (inStockOnly) nextQuery.inStock = '1';\n\n    const current = router?.query || {};\n    const same =\n      current.search === nextQuery.search &&\n      (current.tags || '') === (nextQuery.tags || '') &&\n      (current.inStock || '') === (nextQuery.inStock || '');\n\n    if (!same) {\n      router.replace({ pathname: router.pathname, query: nextQuery }, undefined, { shallow: true });\n    }\n  }, [query, selectedTags, inStockOnly]);\n\n  // Load available tags\n  useEffect(() => {\n    let cancelled = false;\n    const loadTags = async () => {\n      try {\n        const res = await fetch('/api/tags');\n        const data = await res.json();\n        if (!cancelled) setAllTags(Array.isArray(data) ? data : []);\n      } catch (e) {\n        if (!cancelled) setAllTags([]);\n      }\n    };\n    loadTags();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  // Load products when filters change\n  useEffect(() => {\n    let active = true;\n    const controller = new AbortController();\n\n    const fetchProducts = async () => {\n      const params = [];\n      if (query) params.push(`search=${encodeURIComponent(query)}`);\n      if (selectedTags.length > 0) params.push(`tags=${selectedTags.map(encodeURIComponent).join(',')}`);\n      if (inStockOnly) params.push('inStock=1');\n      const qs = params.length ? `?${params.join('&')}` : '';\n      const res = await fetch(`/api/products${qs}`, { signal: controller.signal });\n      const data = await res.json();\n      if (active) setProducts(data);\n    };\n\n    const t = setTimeout(fetchProducts, 250);\n\n    return () => {\n      active = false;\n      controller.abort();\n      clearTimeout(t);\n    };\n  }, [query, selectedTags, inStockOnly]);\n\n  const toggleTag = (tag) => {\n    setSelectedTags((prev) => {\n      if (prev.includes(tag)) return prev.filter((t) => t !== tag);\n      return [...prev, tag];\n    });\n  };\n\n  return (\n    <div style={{ maxWidth: 1000, margin: '0 auto', padding: '1rem' }}>\n      <h1 style={{ marginBottom: '0.75rem' }}>Products</h1>\n      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem', flexWrap: 'wrap' }}>\n        <input\n          type=\"search\"\n          placeholder=\"Search products by name, SKU or description...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          style={{ flex: 1, minWidth: 260, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n          aria-label=\"Search products\"\n        />\n        <StockFilterToggle checked={inStockOnly} onChange={setInStockOnly} />\n        <span style={{ color: '#666', fontSize: 12 }}>\n          {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n        </span>\n        <ExportCsvLink style={{ fontSize: 12 }} />\n      </div>\n\n      {allTags.length > 0 && (\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem', marginBottom: '1rem' }}>\n          {allTags.map((tag) => {\n            const active = selectedTags.includes(tag);\n            return (\n              <button\n                key={tag}\n                onClick={() => toggleTag(tag)}\n                aria-pressed={active}\n                style={{\n                  padding: '0.25rem 0.5rem',\n                  borderRadius: 999,\n                  border: '1px solid ' + (active ? '#0b64d8' : '#ddd'),\n                  background: active ? '#e7f1ff' : 'white',\n                  color: active ? '#0b64d8' : '#333',\n                  cursor: 'pointer',\n                  fontSize: 12,\n                }}\n              >\n                {tag}\n              </button>\n            );\n          })}\n          {selectedTags.length > 0 && (\n            <button\n              onClick={() => setSelectedTags([])}\n              style={{\n                marginLeft: 'auto',\n                padding: '0.25rem 0.5rem',\n                borderRadius: 6,\n                border: '1px solid #ddd',\n                background: '#fafafa',\n                cursor: 'pointer',\n                fontSize: 12,\n              }}\n              aria-label=\"Clear selected tags\"\n            >\n              Clear tags\n            </button>\n          )}\n        </div>\n      )}\n\n      <PimAdminProductList products={products} />\n    </div>\n  );\n};\n\nexport default AdminProductsPage;\n"
    },
    {
      "path": "tests/adminProductsUrlSync.test.js",
      "content": "/*\n  Ensures the Admin Products page synchronizes its filters with the URL (router.replace)\n  and exposes a CSV export link that reflects current filters, similar to the homepage.\n*/\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\n\njest.mock('next/router', () => ({\n  useRouter: jest.fn(),\n}));\n\nconst { useRouter } = require('next/router');\n\n// Load the page after mocking next/router\nconst AdminProductsPage = require('../pages/admin/products').default;\n\ndescribe('Admin Products page URL sync', () => {\n  let replaceMock;\n\n  beforeEach(() => {\n    replaceMock = jest.fn();\n    useRouter.mockReturnValue({\n      pathname: '/admin/products',\n      query: {},\n      replace: replaceMock,\n    });\n\n    // Mock fetch for tags and products\n    global.fetch = jest.fn((url) => {\n      if (typeof url === 'string' && url.endsWith('/api/tags')) {\n        return Promise.resolve({\n          json: () => Promise.resolve(['red', 'blue']),\n        });\n      }\n      if (typeof url === 'string' && url.startsWith('/api/products')) {\n        return Promise.resolve({\n          json: () => Promise.resolve([]),\n        });\n      }\n      return Promise.resolve({ json: () => Promise.resolve({}) });\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('syncs search and tag filters to URL via router.replace', async () => {\n    render(<AdminProductsPage />);\n\n    // Search input should be present\n    const input = await screen.findByPlaceholderText('Search products by name, SKU or description...');\n\n    // Type into search\n    fireEvent.change(input, { target: { value: 'chair' } });\n\n    // Click a tag once tags are loaded\n    const redTag = await screen.findByRole('button', { name: 'red' });\n    fireEvent.click(redTag);\n\n    await waitFor(() => {\n      // Expect router.replace to have been called with combined filters\n      expect(replaceMock).toHaveBeenCalledWith(\n        expect.objectContaining({\n          pathname: '/admin/products',\n          query: expect.objectContaining({ search: 'chair', tags: 'red' }),\n        }),\n        undefined,\n        { shallow: true }\n      );\n    });\n  });\n});\n"
    },
    {
      "path": "README.md",
      "content": "# Simple PIM (Next.js)\n\nThis is a lightweight Product Information Management (PIM) demo built with Next.js and deployed on Vercel. It includes sample data, APIs for products, tags, attributes, attribute groups, and a minimal admin UI.\n\n## Quick start\n\n- Install dependencies: `npm install`\n- Dev server: `npm run dev`\n- Run tests: `npm test`\n\n## Notable features\n\n- Product search, tag filtering, and CSV export on the storefront (home page)\n- Admin dashboard with product stats and tools\n- Attributes and Attribute Groups management and exports\n- Tag stats and bulk tag tools\n- Variant generation helpers\n\n## New: Admin Products filters and CSV export\n\nThe Admin Products page now mirrors the storefront filtering experience:\n\n- Search by name, SKU, or description\n- Filter by tags and in-stock only\n- CSV export link that always reflects the current filters\n- All filters are synced to the URL for easy sharing and reproducible exports\n\nYou can find it at `/admin/products`.\n\n## API\n\nExplore the API routes under `/pages/api/*`. Common ones include:\n\n- `/api/products`, `/api/products/[sku]`, `/api/products/search`, `/api/products/export`\n- `/api/tags`, `/api/tags/stats`, `/api/tags/export`\n- `/api/attributes`, `/api/attributes/suggest`\n- `/api/attribute-groups`, `/api/attribute-groups/flat`, `/api/attribute-groups/export`\n\n## Testing\n\nThis project uses Jest and Testing Library. When adding features, ensure you:\n\n- Cover new behavior with tests\n- Keep the main branch green (tests and build passing)\n\nRun tests with `npm test`.\n"
    }
  ]
}