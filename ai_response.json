{
  "files": [
    {
      "path": "pages/api/attribute-groups/duplicates.js",
      "content": "import fs from 'fs';\nimport path from 'path';\n\nfunction loadGroupsFromDisk() {\n  const file = path.join(process.cwd(), 'data', 'attribute-groups.json');\n  try {\n    const buf = fs.readFileSync(file, 'utf8');\n    return JSON.parse(buf);\n  } catch (_) {\n    try {\n      // Jest/Node fallback\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      return require('../../../data/attribute-groups.json');\n    } catch (e) {\n      throw new Error('Failed to load attribute groups data');\n    }\n  }\n}\n\nfunction toArrayGroups(src) {\n  if (Array.isArray(src)) return src;\n  if (src && Array.isArray(src.groups)) return src.groups;\n  return [];\n}\n\nfunction buildDuplicatesByCode(groups, min = 2) {\n  const map = new Map();\n  for (const g of groups) {\n    const gid = g.id || g.code || (g.name ? g.name.toLowerCase().replace(/[^a-z0-9]+/g, '-') : 'group');\n    const gname = g.name || gid;\n    const attrs = Array.isArray(g.attributes) ? g.attributes : [];\n    for (const a of attrs) {\n      const code = a && (a.code || a.id);\n      if (!code) continue;\n      if (!map.has(code)) map.set(code, []);\n      map.get(code).push({ groupId: gid, groupName: gname, attributeName: a.name || a.label || code });\n    }\n  }\n\n  const byCode = [];\n  for (const [code, occ] of map.entries()) {\n    if (occ.length >= min) {\n      const groupsSet = new Map();\n      for (const o of occ) {\n        const key = o.groupId;\n        if (!groupsSet.has(key)) groupsSet.set(key, { id: o.groupId, name: o.groupName, count: 0 });\n        groupsSet.get(key).count += 1;\n      }\n      byCode.push({ code, total: occ.length, groups: Array.from(groupsSet.values()) });\n    }\n  }\n\n  byCode.sort((a, b) => b.total - a.total || a.code.localeCompare(b.code));\n  return { count: byCode.length, byCode };\n}\n\nexport default function handler(req, res) {\n  try {\n    if (req.method !== 'GET') {\n      res.setHeader('Allow', 'GET');\n      return res.status(405).json({ error: 'Method Not Allowed' });\n    }\n    const src = loadGroupsFromDisk();\n    const groups = toArrayGroups(src);\n    const min = Math.max(2, parseInt(String(req.query.min || '2'), 10) || 2);\n    const report = buildDuplicatesByCode(groups, min);\n    res.setHeader('Content-Type', 'application/json');\n    return res.status(200).json(report);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error('Error in /api/attribute-groups/duplicates:', err);\n    return res.status(500).json({ error: 'Failed to analyze duplicates' });\n  }\n}\n\nexport { buildDuplicatesByCode };"
    },
    {
      "path": "pages/admin/attribute-groups-duplicates.js",
      "content": "import React from 'react';\n\nexport default function AttributeGroupsDuplicatesPage() {\n  const [state, setState] = React.useState({ loading: true, error: null, data: null });\n  const [min, setMin] = React.useState(2);\n\n  React.useEffect(() => {\n    let cancelled = false;\n    async function load() {\n      setState({ loading: true, error: null, data: null });\n      try {\n        const res = await fetch(`/api/attribute-groups/duplicates?min=${encodeURIComponent(min)}`);\n        if (!res.ok) throw new Error(`Failed to load: ${res.status}`);\n        const json = await res.json();\n        if (!cancelled) setState({ loading: false, error: null, data: json });\n      } catch (err) {\n        if (!cancelled) setState({ loading: false, error: err.message || 'Failed to load', data: null });\n      }\n    }\n    load();\n    return () => { cancelled = true; };\n  }, [min]);\n\n  const report = state.data || { count: 0, byCode: [] };\n\n  return (\n    <div style={container}>\n      <div style={headerRow}>\n        <h1 style={{ margin: 0 }}>Attribute Duplicates Audit</h1>\n        <div style={{ display: 'flex', gap: 8 }}>\n          <a href=\"/admin/attribute-groups\" style={btn}>Groups</a>\n          <a href=\"/admin/attribute-groups-flat\" style={btn}>Flat view</a>\n          <a href=\"/admin/attribute-groups-grouped\" style={btn}>Grouped view</a>\n        </div>\n      </div>\n\n      <p style={{ color: '#374151', marginTop: 4 }}>Find attribute code collisions across groups. Useful to spot conflicting definitions before export/integration.</p>\n\n      <div style={{ margin: '12px 0', display: 'flex', alignItems: 'center', gap: 8 }}>\n        <label htmlFor=\"min\" style={{ color: '#374151' }}>Minimum occurrences per code:</label>\n        <input id=\"min\" type=\"number\" min={2} value={min} onChange={(e) => setMin(Math.max(2, Number(e.target.value) || 2))} style={input} />\n      </div>\n\n      {state.loading && <p>Loading…</p>}\n      {state.error && <p style={{ color: '#b91c1c' }}>Error: {state.error}</p>}\n\n      {!state.loading && !state.error && (\n        <div>\n          <p style={{ color: '#374151' }}>Duplicate codes found: <strong>{report.count}</strong></p>\n          {report.count === 0 ? (\n            <div style={emptyBox}>No duplicate attribute codes detected with min ≥ {min}.</div>\n          ) : (\n            <ul style={list}>\n              {report.byCode.map((item) => (\n                <li key={item.code} style={listItem}>\n                  <div style={row}>\n                    <strong style={{ fontSize: 16 }}>{item.code}</strong>\n                    <span style={pill}>{item.total} occurrences</span>\n                  </div>\n                  <ul style={innerList}>\n                    {item.groups.map((g) => (\n                      <li key={g.id} style={groupRow}>\n                        <a href={`/admin/attribute-group/${encodeURIComponent(g.id)}`} style={groupLink}>{g.name}</a>\n                        <span style={countPill}>{g.count} in group</span>\n                        <code style={codeBadge}>{g.id}</code>\n                      </li>\n                    ))}\n                  </ul>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst container = { padding: 20, maxWidth: 960, margin: '0 auto' };\nconst headerRow = { display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 8 };\nconst btn = { textDecoration: 'none', background: '#e5e7eb', color: '#111827', padding: '8px 12px', borderRadius: 6 };\nconst input = { width: 100, padding: '6px 8px', border: '1px solid #e5e7eb', borderRadius: 6 };\nconst emptyBox = { background: '#f9fafb', border: '1px solid #e5e7eb', borderRadius: 8, padding: 12 };\nconst list = { listStyle: 'none', padding: 0, margin: 0, display: 'flex', flexDirection: 'column', gap: 12 };\nconst listItem = { border: '1px solid #e5e7eb', borderRadius: 8, padding: 12, background: '#fff' };\nconst row = { display: 'flex', alignItems: 'center', gap: 8 };\nconst pill = { marginLeft: 'auto', background: '#eef2ff', color: '#3730a3', padding: '2px 8px', borderRadius: 999, fontSize: 12 };\nconst innerList = { listStyle: 'none', padding: 0, margin: '8px 0 0', display: 'flex', flexDirection: 'column', gap: 8 };\nconst groupRow = { display: 'flex', alignItems: 'center', gap: 8, borderTop: '1px solid #f3f4f6', paddingTop: 8 };\nconst groupLink = { color: '#111827', textDecoration: 'none', fontWeight: 600 };\nconst countPill = { background: '#ecfdf5', color: '#065f46', padding: '2px 8px', borderRadius: 999, fontSize: 12 };\nconst codeBadge = { marginLeft: 'auto', background: '#f1f5f9', color: '#0f172a', padding: '2px 6px', borderRadius: 4, fontFamily: 'monospace', fontSize: 12 };"
    },
    {
      "path": "tests/api-attribute-groups-duplicates.test.js",
      "content": "const path = require('path');\n\ndescribe('/api/attribute-groups/duplicates', () => {\n  function createMockRes() {\n    const res = {\n      statusCode: 200,\n      headers: {},\n      body: undefined,\n      setHeader(name, value) { this.headers[name] = value; },\n      status(code) { this.statusCode = code; return this; },\n      json(payload) { this.body = payload; return this; },\n    };\n    return res;\n  }\n\n  it('returns a report with byCode array and a numeric count', async () => {\n    const mod = require(path.join('..', 'pages', 'api', 'attribute-groups', 'duplicates.js'));\n    const handler = mod.default || mod;\n\n    const req = { method: 'GET', query: {} };\n    const res = createMockRes();\n\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toBeDefined();\n    expect(Array.isArray(res.body.byCode)).toBe(true);\n    expect(typeof res.body.count).toBe('number');\n\n    if (res.body.count > 0) {\n      for (const item of res.body.byCode) {\n        expect(typeof item.code).toBe('string');\n        expect(typeof item.total).toBe('number');\n        expect(Array.isArray(item.groups)).toBe(true);\n        expect(item.groups.length).toBeGreaterThanOrEqual(2);\n      }\n    }\n  });\n\n  it('respects the min query param', async () => {\n    const mod = require(path.join('..', 'pages', 'api', 'attribute-groups', 'duplicates.js'));\n    const handler = mod.default || mod;\n\n    const req = { method: 'GET', query: { min: '3' } };\n    const res = createMockRes();\n\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toBeDefined();\n    expect(Array.isArray(res.body.byCode)).toBe(true);\n  });\n});\n"
    },
    {
      "path": "README.md",
      "content": "# Simple PIM (Next.js)\n\nThis is a lightweight Product Information Management (PIM) demo built with Next.js and deployed on Vercel. It includes sample data, APIs for products, tags, attributes, attribute groups, and a minimal admin UI.\n\n## Quick start\n\n- Install dependencies: `npm install`\n- Dev server: `npm run dev`\n- Run tests: `npm test`\n\n## Notable features\n\n- Product search, tag filtering, and CSV export on the storefront (home page)\n- Admin dashboard with product stats and tools\n- Attributes and Attribute Groups management and exports\n- Flat Attribute Groups browser with CSV export at `/admin/attribute-groups-flat`\n- Grouped Attribute Groups browser with per-group counts at `/admin/attribute-groups-grouped`\n- Attribute Duplicates audit page to find conflicting attribute codes across groups at `/admin/attribute-groups-duplicates`\n- Tag stats and bulk tag tools\n- Variant generation helpers\n- Per-product flat attributes viewer at `/admin/product/[sku]/attributes` (uses `/api/products/[sku]/attributes/flat`)\n\n## New: Admin Products filters and CSV export\n\nThe Admin Products page now mirrors the storefront filtering experience:\n\n- Search by name, SKU, or description\n- Filter by tags and in-stock only\n- CSV export link that always reflects the current filters\n- All filters are synced to the URL for easy sharing and reproducible exports\n\nYou can find it at `/admin/products`.\n\n## API\n\nExplore the API routes under `/pages/api/*`. Common ones include:\n\n- `/api/products`, `/api/products/[sku]`, `/api/products/search`, `/api/products/export`\n- `/api/products/[sku]/attributes/flat` (flatten a product's Attribute Groups for easy export/inspection)\n- `/api/tags`, `/api/tags/stats`, `/api/tags/export`\n- `/api/attributes`, `/api/attributes/suggest`\n- `/api/attribute-groups`, `/api/attribute-groups/flat`, `/api/attribute-groups/export`, `/api/attribute-groups/grouped`\n- New: `/api/attribute-groups/duplicates` returns attribute codes that appear in multiple groups, with group counts\n\n## Testing\n\nThis project uses Jest and Testing Library. When adding features, ensure you:\n\n- Cover new behavior with tests\n- Keep the main branch green (tests and build passing)\n\nRun tests with `npm test`.\n"
    }
  ]
}