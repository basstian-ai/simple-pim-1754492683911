{
  "files": [
    {
      "path": "lib/productsStore.js",
      "content": "const makeId = () => Math.random().toString(36).substr(2, 9);\n\nconst initialProducts = [\n  {\n    id: makeId(),\n    name: \"Classic Tee\",\n    slug: \"classic-tee\",\n    sku: \"TEE-CLSC-001\",\n    price: 1999,\n    currency: \"USD\",\n    description: \"A timeless classic tee made from organic cotton.\",\n    attributes: [\n      {\n        group: \"General\",\n        items: [\n          { name: \"Brand\", value: \"SimplePIM\" },\n          { name: \"Material\", value: \"100% Organic Cotton\" }\n        ]\n      },\n      {\n        group: \"Fit\",\n        items: [\n          { name: \"Gender\", value: \"Unisex\" },\n          { name: \"Fit\", value: \"Regular\" }\n        ]\n      }\n    ],\n    variants: [\n      {\n        id: makeId(),\n        sku: \"TEE-CLSC-001-BLK-S\",\n        attributes: [\n          { name: \"Color\", value: \"Black\" },\n          { name: \"Size\", value: \"S\" }\n        ],\n        priceDelta: 0,\n        stock: 25\n      },\n      {\n        id: makeId(),\n        sku: \"TEE-CLSC-001-BLK-M\",\n        attributes: [\n          { name: \"Color\", value: \"Black\" },\n          { name: \"Size\", value: \"M\" }\n        ],\n        priceDelta: 0,\n        stock: 34\n      },\n      {\n        id: makeId(),\n        sku: \"TEE-CLSC-001-WHT-L\",\n        attributes: [\n          { name: \"Color\", value: \"White\" },\n          { name: \"Size\", value: \"L\" }\n        ],\n        priceDelta: 100,\n        stock: 12\n      }\n    ],\n    media: [\n      { kind: \"image\", url: \"/images/classic-tee/black-front.jpg\", alt: \"Classic Tee Black - Front\" },\n      { kind: \"image\", url: \"/images/classic-tee/black-back.jpg\", alt: \"Classic Tee Black - Back\" }\n    ]\n  },\n  {\n    id: makeId(),\n    name: \"Everyday Hoodie\",\n    slug: \"everyday-hoodie\",\n    sku: \"HD-ED-002\",\n    price: 4999,\n    currency: \"USD\",\n    description: \"Cozy fleece-lined hoodie for everyday comfort.\",\n    attributes: [\n      {\n        group: \"General\",\n        items: [\n          { name: \"Brand\", value: \"SimplePIM\" },\n          { name: \"Material\", value: \"Fleece Blend\" }\n        ]\n      },\n      {\n        group: \"Care\",\n        items: [\n          { name: \"Machine Wash\", value: \"Cold\" },\n          { name: \"Tumble Dry\", value: \"Low\" }\n        ]\n      }\n    ],\n    variants: [\n      {\n        id: makeId(),\n        sku: \"HD-ED-002-GRY-S\",\n        attributes: [\n          { name: \"Color\", value: \"Grey\" },\n          { name: \"Size\", value: \"S\" }\n        ],\n        priceDelta: 0,\n        stock: 8\n      },\n      {\n        id: makeId(),\n        sku: \"HD-ED-002-GRY-XL\",\n        attributes: [\n          { name: \"Color\", value: \"Grey\" },\n          { name: \"Size\", value: \"XL\" }\n        ],\n        priceDelta: 300,\n        stock: 5\n      }\n    ],\n    media: [\n      { kind: \"image\", url: \"/images/everyday-hoodie/grey-front.jpg\", alt: \"Everyday Hoodie Grey - Front\" }\n    ]\n  },\n  {\n    id: makeId(),\n    name: \"Trail Sneakers\",\n    slug: \"trail-sneakers\",\n    sku: \"SNK-TRL-003\",\n    price: 7999,\n    currency: \"USD\",\n    description: \"Lightweight trail sneakers with superior grip.\",\n    attributes: [\n      {\n        group: \"General\",\n        items: [\n          { name: \"Brand\", value: \"SimplePIM\" },\n          { name: \"Upper\", value: \"Mesh\" }\n        ]\n      },\n      {\n        group: \"Specs\",\n        items: [\n          { name: \"Drop\", value: \"8mm\" },\n          { name: \"Weight\", value: \"270g\" }\n        ]\n      }\n    ],\n    variants: [\n      {\n        id: makeId(),\n        sku: \"SNK-TRL-003-GRN-42\",\n        attributes: [\n          { name: \"Color\", value: \"Green\" },\n          { name: \"EU Size\", value: \"42\" }\n        ],\n        priceDelta: 0,\n        stock: 16\n      },\n      {\n        id: makeId(),\n        sku: \"SNK-TRL-003-GRN-43\",\n        attributes: [\n          { name: \"Color\", value: \"Green\" },\n          { name: \"EU Size\", value: \"43\" }\n        ],\n        priceDelta: 0,\n        stock: 10\n      }\n    ],\n    media: [\n      { kind: \"image\", url: \"/images/trail-sneakers/green-side.jpg\", alt: \"Trail Sneakers Green - Side\" }\n    ]\n  }\n];\n\nlet products = initialProducts.map((p) => ({ ...p }));\n\nfunction list() {\n  return products.map((p) => ({ ...p }));\n}\n\nfunction getById(id) {\n  return products.find((p) => p.id === id) || null;\n}\n\nfunction create(input) {\n  const id = makeId();\n  const now = Date.now();\n  const base = {\n    id,\n    name: String(input.name || \"Untitled\"),\n    slug: String(input.slug || (String(input.name || \"product\") + \"-\" + id)).toLowerCase().replace(/[^a-z0-9-]+/g, \"-\").replace(/-+/g, \"-\").replace(/^-|-$/g, \"\"),\n    sku: String(input.sku || (\"SKU-\" + id)).toUpperCase(),\n    price: Number.isFinite(input.price) ? Math.floor(input.price) : 0,\n    currency: input.currency || \"USD\",\n    description: input.description || \"\",\n    attributes: Array.isArray(input.attributes) ? input.attributes : [],\n    variants: Array.isArray(input.variants) ? input.variants.map((v) => ({ id: makeId(), ...v })) : [],\n    media: Array.isArray(input.media) ? input.media : [],\n    createdAt: now,\n    updatedAt: now\n  };\n  products.unshift(base);\n  return { ...base };\n}\n\nfunction update(id, patch) {\n  const idx = products.findIndex((p) => p.id === id);\n  if (idx === -1) return null;\n  const prev = products[idx];\n  const next = {\n    ...prev,\n    ...patch,\n    slug: patch.slug ? String(patch.slug) : prev.slug,\n    updatedAt: Date.now()\n  };\n  products[idx] = next;\n  return { ...next };\n}\n\nfunction remove(id) {\n  const idx = products.findIndex((p) => p.id === id);\n  if (idx === -1) return false;\n  products.splice(idx, 1);\n  return true;\n}\n\nfunction reset(seed) {\n  products = (seed || initialProducts).map((p) => ({ ...p }));\n}\n\nmodule.exports = {\n  list,\n  getById,\n  create,\n  update,\n  remove,\n  reset\n};\n"
    },
    {
      "path": "pages/api/admin/products.js",
      "content": "const store = require(\"../../../lib/productsStore\");\n\nfunction ok(res, data) {\n  res.status(200).json({ ok: true, data });\n}\nfunction bad(res, status, message) {\n  res.status(status).json({ ok: false, error: { message } });\n}\n\nexport default function handler(req, res) {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Cache-Control\", \"no-store\");\n\n  if (req.method === \"GET\") {\n    const items = store.list();\n    return ok(res, items);\n  }\n\n  if (req.method === \"POST\") {\n    try {\n      const { name, sku, price, currency, description, attributes, variants, media, slug } = req.body || {};\n      if (!name || !sku) return bad(res, 400, \"name and sku are required\");\n      const created = store.create({ name, sku, price, currency, description, attributes, variants, media, slug });\n      return ok(res, created);\n    } catch (e) {\n      return bad(res, 400, \"Invalid JSON body\");\n    }\n  }\n\n  if (req.method === \"PUT\") {\n    try {\n      const { id, ...patch } = req.body || {};\n      if (!id) return bad(res, 400, \"id is required\");\n      const updated = store.update(id, patch);\n      if (!updated) return bad(res, 404, \"Product not found\");\n      return ok(res, updated);\n    } catch (e) {\n      return bad(res, 400, \"Invalid JSON body\");\n    }\n  }\n\n  if (req.method === \"DELETE\") {\n    const { id } = req.query;\n    if (!id || typeof id !== \"string\") return bad(res, 400, \"id query param is required\");\n    const removed = store.remove(id);\n    if (!removed) return bad(res, 404, \"Product not found\");\n    return ok(res, { id });\n  }\n\n  res.setHeader(\"Allow\", \"GET,POST,PUT,DELETE\");\n  return bad(res, 405, \"Method Not Allowed\");\n}\n"
    },
    {
      "path": "pages/admin/products.js",
      "content": "import React from \"react\";\n\nfunction TextInput({ label, value, onChange, placeholder }) {\n  return (\n    <label style={{ display: \"block\", marginBottom: 12 }}>\n      <div style={{ fontSize: 12, fontWeight: 600, color: \"#444\", marginBottom: 4 }}>{label}</div>\n      <input\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        placeholder={placeholder}\n        style={{ width: \"100%\", padding: 8, border: \"1px solid #ccc\", borderRadius: 4 }}\n      />\n    </label>\n  );\n}\n\nfunction NumberInput({ label, value, onChange, placeholder }) {\n  return (\n    <label style={{ display: \"block\", marginBottom: 12 }}>\n      <div style={{ fontSize: 12, fontWeight: 600, color: \"#444\", marginBottom: 4 }}>{label}</div>\n      <input\n        type=\"number\"\n        value={value}\n        onChange={(e) => onChange(parseInt(e.target.value || 0, 10))}\n        placeholder={placeholder}\n        style={{ width: \"100%\", padding: 8, border: \"1px solid #ccc\", borderRadius: 4 }}\n      />\n    </label>\n  );\n}\n\nfunction TextArea({ label, value, onChange, rows = 6 }) {\n  return (\n    <label style={{ display: \"block\", marginBottom: 12 }}>\n      <div style={{ fontSize: 12, fontWeight: 600, color: \"#444\", marginBottom: 4 }}>{label}</div>\n      <textarea\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        rows={rows}\n        style={{ width: \"100%\", padding: 8, border: \"1px solid #ccc\", borderRadius: 4, fontFamily: \"monospace\" }}\n      />\n    </label>\n  );\n}\n\nexport default function AdminProducts() {\n  const [products, setProducts] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n  const [saving, setSaving] = React.useState(false);\n  const [editingId, setEditingId] = React.useState(null);\n  const [msg, setMsg] = React.useState(\"\");\n\n  const [name, setName] = React.useState(\"\");\n  const [sku, setSku] = React.useState(\"\");\n  const [price, setPrice] = React.useState(0);\n  const [currency, setCurrency] = React.useState(\"USD\");\n  const [description, setDescription] = React.useState(\"\");\n  const [attributesJson, setAttributesJson] = React.useState(\"[]\");\n  const [variantsJson, setVariantsJson] = React.useState(\"[]\");\n\n  const resetForm = () => {\n    setEditingId(null);\n    setName(\"\");\n    setSku(\"\");\n    setPrice(0);\n    setCurrency(\"USD\");\n    setDescription(\"\");\n    setAttributesJson(\n      JSON.stringify(\n        [\n          { group: \"General\", items: [{ name: \"Brand\", value: \"SimplePIM\" }] },\n          { group: \"Specs\", items: [{ name: \"Color\", value: \"Black\" }] }\n        ],\n        null,\n        2\n      )\n    );\n    setVariantsJson(\n      JSON.stringify(\n        [\n          { sku: \"SKU-VAR-1\", attributes: [{ name: \"Size\", value: \"M\" }], priceDelta: 0, stock: 10 }\n        ],\n        null,\n        2\n      )\n    );\n  };\n\n  React.useEffect(() => {\n    resetForm();\n  }, []);\n\n  const load = async () => {\n    setLoading(true);\n    setMsg(\"\");\n    try {\n      const res = await fetch(\"/api/admin/products\");\n      const json = await res.json();\n      if (json.ok) setProducts(json.data);\n      else setMsg(json.error?.message || \"Failed to load\");\n    } catch (e) {\n      setMsg(\"Network error while loading products\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    load();\n  }, []);\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    setSaving(true);\n    setMsg(\"\");\n    try {\n      let attributes = [];\n      let variants = [];\n      try {\n        attributes = JSON.parse(attributesJson || \"[]\");\n      } catch (e) {\n        setMsg(\"Attributes JSON is invalid\");\n        setSaving(false);\n        return;\n      }\n      try {\n        variants = JSON.parse(variantsJson || \"[]\");\n      } catch (e) {\n        setMsg(\"Variants JSON is invalid\");\n        setSaving(false);\n        return;\n      }\n\n      const payload = {\n        name,\n        sku,\n        price: parseInt(price || 0, 10),\n        currency,\n        description,\n        attributes,\n        variants\n      };\n\n      const method = editingId ? \"PUT\" : \"POST\";\n      const body = editingId ? { id: editingId, ...payload } : payload;\n\n      const res = await fetch(\"/api/admin/products\", {\n        method,\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body)\n      });\n      const json = await res.json();\n      if (!json.ok) throw new Error(json.error?.message || \"Save failed\");\n      setMsg(editingId ? \"Updated\" : \"Created\");\n      resetForm();\n      await load();\n    } catch (e) {\n      setMsg(e.message || \"Save failed\");\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const onEdit = (p) => {\n    setEditingId(p.id);\n    setName(p.name || \"\");\n    setSku(p.sku || \"\");\n    setPrice(p.price || 0);\n    setCurrency(p.currency || \"USD\");\n    setDescription(p.description || \"\");\n    setAttributesJson(JSON.stringify(p.attributes || [], null, 2));\n    setVariantsJson(JSON.stringify(p.variants || [], null, 2));\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\n  };\n\n  const onDelete = async (id) => {\n    if (!confirm(\"Delete this product?\")) return;\n    setMsg(\"\");\n    try {\n      const res = await fetch(`/api/admin/products?id=${encodeURIComponent(id)}`, { method: \"DELETE\" });\n      const json = await res.json();\n      if (!json.ok) throw new Error(json.error?.message || \"Delete failed\");\n      setMsg(\"Deleted\");\n      await load();\n    } catch (e) {\n      setMsg(e.message || \"Delete failed\");\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: 1200, margin: \"0 auto\", padding: 24 }}>\n      <h1 style={{ fontSize: 24, marginBottom: 8 }}>Admin • Products</h1>\n      <p style={{ color: \"#666\", marginBottom: 24 }}>Manage rich product data with attribute groups and basic variants.</p>\n\n      {msg ? (\n        <div style={{ background: \"#eef9f1\", border: \"1px solid #b7ebc6\", padding: 8, marginBottom: 16, color: \"#156f3a\" }}>{msg}</div>\n      ) : null}\n\n      <form onSubmit={onSubmit} style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: 16, marginBottom: 32, alignItems: \"start\" }}>\n        <div>\n          <TextInput label=\"Name\" value={name} onChange={setName} placeholder=\"Product name\" />\n          <TextInput label=\"SKU\" value={sku} onChange={setSku} placeholder=\"SKU\" />\n          <NumberInput label=\"Price (minor units, e.g. cents)\" value={price} onChange={setPrice} placeholder=\"1999\" />\n          <TextInput label=\"Currency\" value={currency} onChange={setCurrency} placeholder=\"USD\" />\n          <TextArea label=\"Description\" value={description} onChange={setDescription} rows={4} />\n          <div style={{ display: \"flex\", gap: 8 }}>\n            <button type=\"submit\" disabled={saving} style={{ padding: \"10px 14px\", background: \"#111\", color: \"white\", border: 0, borderRadius: 4 }}>\n              {saving ? \"Saving…\" : editingId ? \"Update Product\" : \"Create Product\"}\n            </button>\n            {editingId ? (\n              <button type=\"button\" onClick={resetForm} style={{ padding: \"10px 14px\", background: \"#eee\", color: \"#333\", border: 0, borderRadius: 4 }}>\n                Cancel Edit\n              </button>\n            ) : null}\n          </div>\n        </div>\n        <div>\n          <TextArea label=\"Attribute Groups (JSON)\" value={attributesJson} onChange={setAttributesJson} rows={10} />\n          <TextArea label=\"Variants (JSON)\" value={variantsJson} onChange={setVariantsJson} rows={10} />\n        </div>\n      </form>\n\n      <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", marginBottom: 8 }}>\n        <h2 style={{ fontSize: 18, margin: 0 }}>Products</h2>\n        <button onClick={load} disabled={loading} style={{ padding: \"6px 10px\", border: \"1px solid #ccc\", background: \"white\", borderRadius: 4 }}>{loading ? \"Loading…\" : \"Refresh\"}</button>\n      </div>\n\n      <div style={{ overflowX: \"auto\", border: \"1px solid #eee\", borderRadius: 6 }}>\n        <table style={{ width: \"100%\", borderCollapse: \"collapse\" }}>\n          <thead>\n            <tr style={{ background: \"#fafafa\" }}>\n              <th style={{ textAlign: \"left\", padding: 10, borderBottom: \"1px solid #eee\" }}>Name</th>\n              <th style={{ textAlign: \"left\", padding: 10, borderBottom: \"1px solid #eee\" }}>SKU</th>\n              <th style={{ textAlign: \"left\", padding: 10, borderBottom: \"1px solid #eee\" }}>Price</th>\n              <th style={{ textAlign: \"left\", padding: 10, borderBottom: \"1px solid #eee\" }}>Variants</th>\n              <th style={{ textAlign: \"left\", padding: 10, borderBottom: \"1px solid #eee\" }}>Attributes</th>\n              <th style={{ textAlign: \"right\", padding: 10, borderBottom: \"1px solid #eee\" }}>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {products.map((p) => (\n              <tr key={p.id}>\n                <td style={{ padding: 10, borderBottom: \"1px solid #f1f1f1\" }}>\n                  <div style={{ fontWeight: 600 }}>{p.name}</div>\n                  <div style={{ color: \"#888\", fontSize: 12 }}>{p.slug}</div>\n                </td>\n                <td style={{ padding: 10, borderBottom: \"1px solid #f1f1f1\" }}>{p.sku}</td>\n                <td style={{ padding: 10, borderBottom: \"1px solid #f1f1f1\" }}>\n                  {new Intl.NumberFormat(undefined, { style: \"currency\", currency: p.currency || \"USD\" }).format((p.price || 0) / 100)}\n                </td>\n                <td style={{ padding: 10, borderBottom: \"1px solid #f1f1f1\", maxWidth: 240 }}>\n                  <div style={{ display: \"flex\", flexWrap: \"wrap\", gap: 6 }}>\n                    {(p.variants || []).slice(0, 4).map((v) => (\n                      <span key={v.id || v.sku} style={{ fontSize: 12, padding: \"2px 6px\", border: \"1px solid #ddd\", borderRadius: 4 }}>\n                        {v.attributes?.map((a) => `${a.name}:${a.value}`).join(\"/\") || v.sku}\n                      </span>\n                    ))}\n                    {p.variants && p.variants.length > 4 ? <span style={{ fontSize: 12, color: \"#666\" }}>+{p.variants.length - 4} more</span> : null}\n                  </div>\n                </td>\n                <td style={{ padding: 10, borderBottom: \"1px solid #f1f1f1\", maxWidth: 240 }}>\n                  <div style={{ display: \"flex\", flexWrap: \"wrap\", gap: 6 }}>\n                    {(p.attributes || []).map((g) => (\n                      <span key={g.group} style={{ fontSize: 12, padding: \"2px 6px\", background: \"#f7f7f7\", border: \"1px solid #eee\", borderRadius: 4 }}>\n                        {g.group}\n                      </span>\n                    ))}\n                  </div>\n                </td>\n                <td style={{ padding: 10, borderBottom: \"1px solid #f1f1f1\", textAlign: \"right\" }}>\n                  <button onClick={() => onEdit(p)} style={{ padding: \"6px 10px\", marginRight: 8, border: \"1px solid #ccc\", background: \"white\", borderRadius: 4 }}>Edit</button>\n                  <button onClick={() => onDelete(p.id)} style={{ padding: \"6px 10px\", border: 0, background: \"#e5484d\", color: \"white\", borderRadius: 4 }}>Delete</button>\n                </td>\n              </tr>\n            ))}\n            {products.length === 0 && !loading ? (\n              <tr>\n                <td colSpan={6} style={{ padding: 20, textAlign: \"center\", color: \"#666\" }}>No products yet.</td>\n              </tr>\n            ) : null}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/productsStore.test.js",
      "content": "const test = require('node:test');\nconst assert = require('assert');\nconst store = require('../lib/productsStore');\n\n// Basic smoke tests for the in-memory product store\n\ntest('list returns seeded items', () => {\n  store.reset();\n  const items = store.list();\n  assert.ok(Array.isArray(items));\n  assert.ok(items.length >= 1);\n});\n\ntest('create -> update -> remove lifecycle', () => {\n  store.reset();\n  const created = store.create({ name: 'Test Item', sku: 'TST-001', price: 1234, attributes: [], variants: [] });\n  assert.ok(created.id);\n  const updated = store.update(created.id, { name: 'Updated Name' });\n  assert.equal(updated.name, 'Updated Name');\n  const removed = store.remove(created.id);\n  assert.equal(removed, true);\n});\n"
    }
  ]
}