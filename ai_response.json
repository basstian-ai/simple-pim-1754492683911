{
  "files": [
    {
      "path": "pages/admin/flat-attributes.js",
      "content": "import React from 'react';\n\nexport default function FlatAttributesAdminPage({ attributes = [], count = 0 }) {\n  return (\n    <div style={container}>\n      <h1 style={title}>Flat Attributes</h1>\n      <p style={muted}>A flattened view of all attributes across groups. Useful for auditing and quick lookup.</p>\n      <div style={summary}>Total attributes: <strong>{count}</strong></div>\n\n      {attributes.length === 0 ? (\n        <p style={muted}>No attributes found.</p>\n      ) : (\n        <div style={{ overflowX: 'auto', marginTop: 12 }}>\n          <table style={table}>\n            <thead>\n              <tr>\n                <th style={th}>Code</th>\n                <th style={th}>Name</th>\n                <th style={th}>Type</th>\n                <th style={th}>Group</th>\n              </tr>\n            </thead>\n            <tbody>\n              {attributes.map((a) => (\n                <tr key={`${a.groupId}:${a.code}`}>\n                  <td style={td}><code style={codeBadge}>{a.code}</code></td>\n                  <td style={td}>{a.label || a.name || a.code}</td>\n                  <td style={td}><span style={pill}>{a.type}</span></td>\n                  <td style={td} title={String(a.groupId)}>{a.groupName}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport async function getStaticProps() {\n  try {\n    const groups = require('../../data/attribute-groups.json');\n    const attributes = [];\n    if (Array.isArray(groups)) {\n      for (const g of groups) {\n        const list = Array.isArray(g.attributes) ? g.attributes : [];\n        for (const attr of list) {\n          attributes.push({ ...attr, groupId: g.id, groupName: g.name });\n        }\n      }\n    }\n\n    // Sort by group then code for stable UI\n    attributes.sort((a, b) => {\n      const gn = String(a.groupName || '').localeCompare(String(b.groupName || ''));\n      if (gn !== 0) return gn;\n      return String(a.code || '').localeCompare(String(b.code || ''));\n    });\n\n    return { props: { attributes, count: attributes.length } };\n  } catch (err) {\n    console.error('flat-attributes getStaticProps error', err);\n    return { props: { attributes: [], count: 0 } };\n  }\n}\n\nconst container = { padding: 20, maxWidth: 1000, margin: '0 auto' };\nconst title = { fontSize: 28, margin: '8px 0 6px' };\nconst summary = { marginTop: 4, color: '#111827' };\nconst muted = { color: '#6b7280' };\nconst table = { width: '100%', borderCollapse: 'collapse', background: '#fff', border: '1px solid #e5e7eb', borderRadius: 8 };\nconst th = { textAlign: 'left', padding: '10px 12px', borderBottom: '1px solid #e5e7eb', background: '#f9fafb', fontWeight: 600, fontSize: 14 };\nconst td = { padding: '10px 12px', borderBottom: '1px solid #f3f4f6', fontSize: 14 };\nconst pill = { background: '#eef2ff', color: '#3730a3', padding: '2px 6px', borderRadius: 999, fontSize: 12 };\nconst codeBadge = { background: '#f3f4f6', color: '#111827', padding: '2px 6px', borderRadius: 4, fontFamily: 'monospace', fontSize: 12 };\n"
    },
    {
      "path": "tests/admin-flat-attributes-page.test.js",
      "content": "const React = require('react');\nconst { render, screen } = require('@testing-library/react');\nconst mod = require('../pages/admin/flat-attributes');\nconst Page = mod.default || mod;\n\ndescribe('Admin Flat Attributes Page', () => {\n  test('renders heading and flattened rows', () => {\n    const attrs = [\n      { code: 'material', name: 'Material', type: 'text', groupId: 'grp-seo', groupName: 'SEO' },\n      { code: 'weight', name: 'Weight', type: 'number', groupId: 'grp-shipping', groupName: 'Shipping' },\n    ];\n    render(React.createElement(Page, { attributes: attrs, count: attrs.length }));\n\n    expect(screen.getByText(/Flat Attributes/i)).toBeInTheDocument();\n    expect(screen.getByText('material')).toBeInTheDocument();\n    expect(screen.getByText('Shipping')).toBeInTheDocument();\n  });\n});\n"
    }
  ]
}