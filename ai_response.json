{
  "files": [
    {
      "path": "lib/attributeGroups.js",
      "content": "/* Simple helpers for Attribute Groups domain */\n\n// Generate a reasonably unique id without external deps\nfunction generateId(prefix = 'ag_') {\n  return (\n    prefix +\n    Date.now().toString(36) +\n    Math.random().toString(36).slice(2, 8)\n  );\n}\n\n// Parse a user-entered string of attributes into a clean array\n// Supports comma and newline separators\nfunction parseAttributesString(input) {\n  if (!input) return [];\n  const raw = Array.isArray(input) ? input.join(',') : String(input);\n  const items = raw\n    .split(/[,\\n]/g)\n    .map((s) => s.trim())\n    .filter(Boolean);\n  // de-duplicate preserving order\n  const seen = new Set();\n  const result = [];\n  for (const a of items) {\n    const key = a.toLowerCase();\n    if (!seen.has(key)) {\n      seen.add(key);\n      result.push(a);\n    }\n  }\n  return result;\n}\n\nfunction normalizeGroup(input) {\n  const id = input && input.id ? String(input.id) : generateId();\n  const name = input && input.name ? String(input.name).trim() : '';\n  let attributes = [];\n  if (input && Array.isArray(input.attributes)) {\n    attributes = parseAttributesString(input.attributes);\n  } else if (input && typeof input.attributes === 'string') {\n    attributes = parseAttributesString(input.attributes);\n  }\n  return { id, name, attributes };\n}\n\nfunction validateGroup(group) {\n  const errors = [];\n  if (!group || typeof group !== 'object') {\n    return { valid: false, errors: ['Group is required'] };\n  }\n  const name = (group.name || '').trim();\n  if (!name) {\n    errors.push('Name is required');\n  } else if (name.length < 2) {\n    errors.push('Name must be at least 2 characters');\n  }\n  if (!Array.isArray(group.attributes)) {\n    errors.push('Attributes must be an array');\n  } else {\n    const cleaned = group.attributes.map((a) => String(a).trim()).filter(Boolean);\n    if (cleaned.length === 0) {\n      errors.push('At least one attribute is required');\n    }\n  }\n  return { valid: errors.length === 0, errors };\n}\n\nmodule.exports = {\n  normalizeGroup,\n  validateGroup,\n  parseAttributesString,\n};\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "import { normalizeGroup, validateGroup } from '../../lib/attributeGroups';\n\n// In-memory store (ephemeral across deployments/instances). Suitable for demo.\nlet groups = [];\n\nexport default function handler(req, res) {\n  const { method } = req;\n\n  if (method === 'GET') {\n    res.status(200).json({ groups });\n    return;\n  }\n\n  if (method === 'POST') {\n    const normalized = normalizeGroup(req.body || {});\n    const { valid, errors } = validateGroup(normalized);\n    if (!valid) {\n      res.status(400).json({ error: 'Validation failed', errors });\n      return;\n    }\n    groups.push(normalized);\n    res.status(201).json({ group: normalized });\n    return;\n  }\n\n  if (method === 'DELETE') {\n    const { id } = req.query || {};\n    if (!id) {\n      res.status(400).json({ error: 'Missing id' });\n      return;\n    }\n    const before = groups.length;\n    groups = groups.filter((g) => g.id !== id);\n    if (groups.length === before) {\n      res.status(404).json({ error: 'Not found' });\n      return;\n    }\n    res.status(204).end();\n    return;\n  }\n\n  res.setHeader('Allow', ['GET', 'POST', 'DELETE']);\n  res.status(405).end('Method Not Allowed');\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import { useEffect, useMemo, useState } from 'react';\n\nexport default function AttributeGroupsAdminPage() {\n  const [groups, setGroups] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [name, setName] = useState('');\n  const [attributes, setAttributes] = useState('');\n  const [submitting, setSubmitting] = useState(false);\n\n  const canSubmit = useMemo(() => {\n    return name.trim().length >= 2 && attributes.trim().length > 0 && !submitting;\n  }, [name, attributes, submitting]);\n\n  useEffect(() => {\n    let mounted = true;\n    async function load() {\n      try {\n        setLoading(true);\n        const res = await fetch('/api/attribute-groups');\n        if (!res.ok) throw new Error('Failed to load attribute groups');\n        const data = await res.json();\n        if (mounted) setGroups(data.groups || []);\n      } catch (e) {\n        if (mounted) setError(e.message || 'Failed to load');\n      } finally {\n        if (mounted) setLoading(false);\n      }\n    }\n    load();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  async function addGroup(e) {\n    e.preventDefault();\n    if (!canSubmit) return;\n    setSubmitting(true);\n    setError('');\n    try {\n      const res = await fetch('/api/attribute-groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name, attributes }),\n      });\n      const data = await res.json().catch(() => ({}));\n      if (!res.ok) {\n        const msg = data && data.errors ? data.errors.join(', ') : (data.error || 'Failed to create');\n        throw new Error(msg);\n      }\n      setGroups((prev) => [data.group, ...prev]);\n      setName('');\n      setAttributes('');\n    } catch (e) {\n      setError(e.message || 'Failed to create');\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  async function deleteGroup(id) {\n    if (!id) return;\n    const confirm = window.confirm('Delete this attribute group?');\n    if (!confirm) return;\n    try {\n      const res = await fetch('/api/attribute-groups?id=' + encodeURIComponent(id), {\n        method: 'DELETE',\n      });\n      if (res.status === 204) {\n        setGroups((prev) => prev.filter((g) => g.id !== id));\n      } else {\n        const data = await res.json().catch(() => ({}));\n        throw new Error((data && data.error) || 'Failed to delete');\n      }\n    } catch (e) {\n      setError(e.message || 'Failed to delete');\n    }\n  }\n\n  return (\n    <div style={{ maxWidth: 900, margin: '40px auto', padding: '0 16px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1 style={{ marginBottom: 8 }}>Attribute Groups</h1>\n      <p style={{ color: '#555', marginTop: 0 }}>Define and manage reusable product attribute groups (e.g., Dimensions, Materials).</p>\n\n      <section style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: 16, marginBottom: 24 }}>\n        <h2 style={{ marginTop: 0, fontSize: 18 }}>Create New Group</h2>\n        <form onSubmit={addGroup}>\n          <div style={{ display: 'flex', gap: 12, flexWrap: 'wrap' }}>\n            <label style={{ flex: '1 1 240px' }}>\n              <div style={{ fontSize: 12, color: '#555' }}>Name</div>\n              <input\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                placeholder=\"e.g., Dimensions\"\n                style={{ width: '100%', padding: 8, border: '1px solid #d1d5db', borderRadius: 6 }}\n              />\n            </label>\n            <label style={{ flex: '2 1 360px' }}>\n              <div style={{ fontSize: 12, color: '#555' }}>Attributes (comma or newline separated)</div>\n              <textarea\n                value={attributes}\n                onChange={(e) => setAttributes(e.target.value)}\n                placeholder={'e.g.\\nWidth\\nHeight\\nDepth'}\n                rows={3}\n                style={{ width: '100%', padding: 8, border: '1px solid #d1d5db', borderRadius: 6, resize: 'vertical' }}\n              />\n            </label>\n          </div>\n          <div style={{ marginTop: 12, display: 'flex', gap: 8, alignItems: 'center' }}>\n            <button\n              type=\"submit\"\n              disabled={!canSubmit}\n              style={{\n                background: canSubmit ? '#111827' : '#9ca3af',\n                color: 'white',\n                padding: '8px 14px',\n                borderRadius: 6,\n                border: 'none',\n                cursor: canSubmit ? 'pointer' : 'not-allowed',\n              }}\n            >\n              {submitting ? 'Adding…' : 'Add Group'}\n            </button>\n            {error ? <span style={{ color: '#b91c1c' }}>{error}</span> : null}\n          </div>\n        </form>\n      </section>\n\n      <section>\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <h2 style={{ margin: 0, fontSize: 18 }}>Existing Groups</h2>\n          {loading ? <span style={{ color: '#6b7280' }}>Loading…</span> : null}\n        </div>\n        {(!groups || groups.length === 0) && !loading ? (\n          <div style={{ padding: 16, color: '#6b7280' }}>No attribute groups yet. Create one above.</div>\n        ) : (\n          <ul style={{ listStyle: 'none', padding: 0, marginTop: 12 }}>\n            {groups.map((g) => (\n              <li key={g.id} style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: 12, marginBottom: 10 }}>\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: 8 }}>\n                  <div>\n                    <div style={{ fontWeight: 600 }}>{g.name}</div>\n                    <div style={{ color: '#6b7280', fontSize: 13 }}>{g.attributes && g.attributes.length ? g.attributes.join(', ') : '—'}</div>\n                  </div>\n                  <div style={{ display: 'flex', gap: 8 }}>\n                    <button\n                      onClick={() => deleteGroup(g.id)}\n                      style={{ background: '#ef4444', color: 'white', border: 'none', padding: '6px 10px', borderRadius: 6, cursor: 'pointer' }}\n                      aria-label={`Delete ${g.name}`}\n                    >\n                      Delete\n                    </button>\n                  </div>\n                </div>\n                <div style={{ color: '#9ca3af', fontSize: 12, marginTop: 6 }}>ID: {g.id}</div>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n    </div>\n  );\n}\n"
    },
    {
      "path": "__tests__/attributeGroups.test.js",
      "content": "const { normalizeGroup, validateGroup, parseAttributesString } = require('../lib/attributeGroups');\n\ndescribe('attributeGroups helpers', () => {\n  test('parseAttributesString supports commas and newlines and dedupes', () => {\n    const input = 'Width, Height\\nDepth\\nWidth';\n    const out = parseAttributesString(input);\n    expect(out).toEqual(['Width', 'Height', 'Depth']);\n  });\n\n  test('normalizeGroup fills id and cleans attributes', () => {\n    const g = normalizeGroup({ name: 'Dimensions', attributes: 'Width, Height\\nDepth' });\n    expect(g.name).toBe('Dimensions');\n    expect(Array.isArray(g.attributes)).toBe(true);\n    expect(g.attributes).toEqual(['Width', 'Height', 'Depth']);\n    expect(typeof g.id).toBe('string');\n    expect(g.id.length).toBeGreaterThan(3);\n  });\n\n  test('validateGroup catches empty values', () => {\n    let { valid, errors } = validateGroup({ name: '', attributes: [] });\n    expect(valid).toBe(false);\n    expect(errors.join(' ')).toMatch(/Name is required/);\n    ({ valid, errors } = validateGroup({ name: 'A', attributes: [] }));\n    expect(valid).toBe(false);\n    expect(errors.join(' ')).toMatch(/at least 2/);\n    ({ valid, errors } = validateGroup({ name: 'Valid', attributes: ['A'] }));\n    expect(valid).toBe(true);\n  });\n});\n"
    },
    {
      "path": ".commit_message",
      "content": "feat(attribute-groups): add admin UI and API to manage Attribute Groups with validation and basic tests"
    }
  ]
}