{
  "files": [
    {
      "path": "lib/attributes.js",
      "content": "'use strict';\n\n// Lightweight attributes/groups utilities and safe client storage\n\nconst ALLOWED_TYPES = ['text', 'number', 'select'];\n\nfunction isBrowser() {\n  return typeof window !== 'undefined' && typeof window.localStorage !== 'undefined';\n}\n\nfunction createId(prefix = 'id') {\n  return `${prefix}_${Math.random().toString(36).slice(2, 8)}_${Date.now().toString(36)}`;\n}\n\nfunction slugify(input) {\n  return String(input || '')\n    .toLowerCase()\n    .normalize('NFKD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/^-+|-+$/g, '')\n    .slice(0, 64);\n}\n\nfunction createAttribute(nameOrCode, type = 'text', nameOverride) {\n  const name = nameOverride || String(nameOrCode || '').trim();\n  const codeSeed = typeof nameOrCode === 'string' ? nameOrCode : name;\n  const code = slugify(codeSeed || name);\n  const attr = {\n    id: createId('attr'),\n    code: code || createId('code'),\n    name: name || code || 'Attribute',\n    type: ALLOWED_TYPES.includes(type) ? type : 'text'\n  };\n  return attr;\n}\n\nfunction createGroup(name) {\n  const code = slugify(name) || createId('grp');\n  return {\n    id: createId('grp'),\n    code,\n    name: String(name || 'Group'),\n    attributes: []\n  };\n}\n\nfunction validateGroup(group) {\n  if (!group || typeof group !== 'object') return false;\n  if (typeof group.id !== 'string') return false;\n  if (typeof group.name !== 'string') return false;\n  if (typeof group.code !== 'string') return false;\n  if (!Array.isArray(group.attributes)) return false;\n  for (const a of group.attributes) {\n    if (!a || typeof a !== 'object') return false;\n    if (typeof a.id !== 'string') return false;\n    if (typeof a.code !== 'string') return false;\n    if (typeof a.name !== 'string') return false;\n    if (!ALLOWED_TYPES.includes(a.type)) return false;\n  }\n  return true;\n}\n\nconst DEFAULT_GROUPS = [\n  (() => {\n    const g = createGroup('Basic');\n    g.attributes.push(createAttribute('name', 'text', 'Name'));\n    g.attributes.push(createAttribute('sku', 'text', 'SKU'));\n    g.attributes.push(createAttribute('price', 'number', 'Price'));\n    return g;\n  })(),\n  (() => {\n    const g = createGroup('Variant');\n    g.attributes.push(createAttribute('color', 'text', 'Color'));\n    g.attributes.push(createAttribute('size', 'text', 'Size'));\n    return g;\n  })()\n];\n\nconst STORAGE_KEY = 'pim.attributeGroups.v1';\nlet memoryStore = null; // SSR/in-memory fallback so UI can still work per session\n\nfunction loadGroups() {\n  try {\n    if (isBrowser()) {\n      const raw = window.localStorage.getItem(STORAGE_KEY);\n      if (!raw) return DEFAULT_GROUPS.map(clone);\n      const parsed = JSON.parse(raw);\n      if (Array.isArray(parsed) && parsed.every(validateGroup)) return parsed;\n    } else if (Array.isArray(memoryStore)) {\n      return memoryStore.map(clone);\n    }\n  } catch (_) {}\n  return DEFAULT_GROUPS.map(clone);\n}\n\nfunction saveGroups(groups) {\n  const safe = Array.isArray(groups) ? groups.filter(validateGroup) : [];\n  try {\n    if (isBrowser()) {\n      window.localStorage.setItem(STORAGE_KEY, JSON.stringify(safe));\n    } else {\n      memoryStore = safe.map(clone);\n    }\n  } catch (_) {\n    // ignore\n  }\n}\n\nfunction clone(v) {\n  return JSON.parse(JSON.stringify(v));\n}\n\nfunction upsertGroup(groups, group) {\n  const list = Array.isArray(groups) ? clone(groups) : [];\n  const idx = list.findIndex(g => g.id === group.id);\n  if (idx >= 0) list[idx] = clone(group); else list.push(clone(group));\n  return list;\n}\n\nfunction removeGroup(groups, groupId) {\n  return (Array.isArray(groups) ? groups : []).filter(g => g.id !== groupId);\n}\n\nfunction addAttributeToGroup(groups, groupId, attribute) {\n  const list = clone(groups);\n  const g = list.find(x => x.id === groupId);\n  if (!g) return list;\n  g.attributes = g.attributes.concat([clone(attribute)]);\n  return list;\n}\n\nfunction removeAttributeFromGroup(groups, groupId, attrId) {\n  const list = clone(groups);\n  const g = list.find(x => x.id === groupId);\n  if (!g) return list;\n  g.attributes = g.attributes.filter(a => a.id !== attrId);\n  return list;\n}\n\nmodule.exports = {\n  ALLOWED_TYPES,\n  createId,\n  slugify,\n  createAttribute,\n  createGroup,\n  validateGroup,\n  DEFAULT_GROUPS,\n  loadGroups,\n  saveGroups,\n  upsertGroup,\n  removeGroup,\n  addAttributeToGroup,\n  removeAttributeFromGroup\n};\n"
    },
    {
      "path": "components/AttributeGroupsEditor.js",
      "content": "'use client';\n\nconst React = require('react');\nconst {\n  ALLOWED_TYPES,\n  createAttribute,\n  createGroup,\n  loadGroups,\n  saveGroups,\n  upsertGroup,\n  removeGroup,\n  addAttributeToGroup,\n  removeAttributeFromGroup\n} = require('../lib/attributes');\n\nfunction AttributeGroupsEditor() {\n  const [groups, setGroups] = React.useState([]);\n  const [newGroupName, setNewGroupName] = React.useState('');\n\n  React.useEffect(() => {\n    // Load once on client\n    setGroups(loadGroups());\n  }, []);\n\n  React.useEffect(() => {\n    // Persist on change\n    saveGroups(groups);\n  }, [groups]);\n\n  function onAddGroup(e) {\n    e.preventDefault();\n    const name = newGroupName.trim();\n    if (!name) return;\n    const g = createGroup(name);\n    setGroups(prev => upsertGroup(prev, g));\n    setNewGroupName('');\n  }\n\n  function onRenameGroup(id, name) {\n    setGroups(prev => {\n      const next = JSON.parse(JSON.stringify(prev));\n      const g = next.find(x => x.id === id);\n      if (g) g.name = name;\n      return next;\n    });\n  }\n\n  function onDeleteGroup(id) {\n    if (!confirm('Delete this attribute group?')) return;\n    setGroups(prev => removeGroup(prev, id));\n  }\n\n  function onAddAttribute(groupId, draft, resetDraft) {\n    const name = (draft.name || '').trim();\n    const code = (draft.code || name).trim();\n    const type = draft.type || 'text';\n    if (!name && !code) return;\n    const attr = createAttribute(code || name, type, name || code);\n    setGroups(prev => addAttributeToGroup(prev, groupId, attr));\n    resetDraft();\n  }\n\n  function onDeleteAttribute(groupId, attrId) {\n    setGroups(prev => removeAttributeFromGroup(prev, groupId, attrId));\n  }\n\n  return (\n    React.createElement('div', { style: containerStyle },\n      React.createElement('h1', { style: h1Style }, 'Attribute Groups'),\n      React.createElement('form', { onSubmit: onAddGroup, style: addBarStyle },\n        React.createElement('input', {\n          type: 'text',\n          placeholder: 'New group name (e.g., SEO, Shipping)',\n          value: newGroupName,\n          onChange: e => setNewGroupName(e.target.value),\n          style: inputStyle\n        }),\n        React.createElement('button', { type: 'submit', style: btnPrimary }, 'Add Group')\n      ),\n      groups.length === 0 && React.createElement('p', null, 'No groups yet.'),\n      React.createElement('div', { style: gridStyle },\n        groups.map(g => React.createElement(GroupCard, {\n          key: g.id,\n          group: g,\n          onRename: onRenameGroup,\n          onDelete: onDeleteGroup,\n          onAddAttribute,\n          onDeleteAttribute\n        }))\n      )\n    )\n  );\n}\n\nfunction GroupCard({ group, onRename, onDelete, onAddAttribute, onDeleteAttribute }) {\n  const [draft, setDraft] = React.useState({ name: '', code: '', type: 'text' });\n\n  function resetDraft() {\n    setDraft({ name: '', code: '', type: 'text' });\n  }\n\n  return (\n    React.createElement('div', { style: cardStyle },\n      React.createElement('div', { style: cardHeader },\n        React.createElement('input', {\n          type: 'text',\n          value: group.name,\n          onChange: e => onRename(group.id, e.target.value),\n          style: { ...inputStyle, margin: 0, fontWeight: 600 }\n        }),\n        React.createElement('button', { onClick: () => onDelete(group.id), style: btnDanger }, 'Delete')\n      ),\n      React.createElement('div', { style: { marginTop: 8 } },\n        group.attributes.length === 0 ? (\n          React.createElement('p', { style: { color: '#666', margin: '8px 0' } }, 'No attributes in this group yet.')\n        ) : (\n          React.createElement('ul', { style: listStyle },\n            group.attributes.map(a => (\n              React.createElement('li', { key: a.id, style: listItemStyle },\n                React.createElement('code', { style: codeBadge }, a.code),\n                React.createElement('span', { style: { flex: 1, marginLeft: 8 } }, a.name),\n                React.createElement('span', { style: typePill }, a.type),\n                React.createElement('button', { onClick: () => onDeleteAttribute(group.id, a.id), style: btnSmall }, 'Remove')\n              )\n            ))\n          )\n        )\n      ),\n      React.createElement('div', { style: addAttrRow },\n        React.createElement('input', {\n          type: 'text',\n          placeholder: 'Attribute name',\n          value: draft.name,\n          onChange: e => setDraft(d => ({ ...d, name: e.target.value })),\n          style: inputStyle\n        }),\n        React.createElement('input', {\n          type: 'text',\n          placeholder: 'code (optional)',\n          value: draft.code,\n          onChange: e => setDraft(d => ({ ...d, code: e.target.value })),\n          style: inputStyle\n        }),\n        React.createElement('select', {\n          value: draft.type,\n          onChange: e => setDraft(d => ({ ...d, type: e.target.value })),\n          style: inputStyle\n        },\n          ALLOWED_TYPES.map(t => React.createElement('option', { key: t, value: t }, t))\n        ),\n        React.createElement('button', {\n          onClick: () => onAddAttribute(group.id, draft, resetDraft),\n          style: btnPrimary\n        }, 'Add Attribute')\n      )\n    )\n  );\n}\n\n// Styles\nconst containerStyle = { padding: 20, maxWidth: 960, margin: '0 auto' };\nconst h1Style = { fontSize: 28, margin: '8px 0 16px' };\nconst addBarStyle = { display: 'flex', gap: 8, alignItems: 'center', marginBottom: 16 };\nconst gridStyle = { display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', gap: 12 };\nconst cardStyle = { border: '1px solid #e5e7eb', borderRadius: 8, padding: 12, background: '#fff' };\nconst cardHeader = { display: 'flex', alignItems: 'center', gap: 8, justifyContent: 'space-between' };\nconst listStyle = { listStyle: 'none', padding: 0, margin: 0, display: 'flex', flexDirection: 'column', gap: 6 };\nconst listItemStyle = { display: 'flex', alignItems: 'center', gap: 8, padding: '6px 8px', border: '1px solid #eee', borderRadius: 6 };\nconst inputStyle = { flex: 1, padding: '8px 10px', border: '1px solid #d1d5db', borderRadius: 6, outline: 'none' };\nconst btnPrimary = { padding: '8px 12px', background: '#111827', color: '#fff', border: 'none', borderRadius: 6, cursor: 'pointer' };\nconst btnDanger = { padding: '6px 10px', background: '#dc2626', color: '#fff', border: 'none', borderRadius: 6, cursor: 'pointer' };\nconst btnSmall = { padding: '4px 8px', background: '#f3f4f6', color: '#111827', border: '1px solid #e5e7eb', borderRadius: 6, cursor: 'pointer' };\nconst addAttrRow = { display: 'flex', gap: 8, alignItems: 'center', marginTop: 12 };\nconst codeBadge = { background: '#eef2ff', color: '#3730a3', padding: '2px 6px', borderRadius: 4, fontFamily: 'monospace', fontSize: 12 };\nconst typePill = { background: '#f1f5f9', color: '#0f172a', padding: '2px 6px', borderRadius: 999, fontSize: 12 };\n\nmodule.exports = AttributeGroupsEditor;\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import React from 'react';\nimport dynamic from 'next/dynamic';\n\n// Dynamically import the editor to ensure client-only features like localStorage are safe\nconst AttributeGroupsEditor = dynamic(() => import('../../components/AttributeGroupsEditor'), { ssr: false });\n\nexport default function AttributeGroupsPage() {\n  return (\n    <div style={{ minHeight: '100vh', background: '#fafafa' }}>\n      <header style={{ borderBottom: '1px solid #e5e7eb', background: '#fff' }}>\n        <div style={{ maxWidth: 960, margin: '0 auto', padding: '12px 20px', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <a href=\"/\" style={{ textDecoration: 'none', color: '#111827', fontWeight: 700 }}>Simple PIM</a>\n          <nav style={{ display: 'flex', gap: 12 }}>\n            <a href=\"/admin/attribute-groups\" style={{ color: '#2563eb' }}>Attribute Groups</a>\n          </nav>\n        </div>\n      </header>\n      <main>\n        <AttributeGroupsEditor />\n      </main>\n    </div>\n  );\n}\n"
    },
    {
      "path": "__tests__/attributes.test.js",
      "content": "const assert = require('assert');\nconst { slugify, createGroup, validateGroup, createAttribute } = require('../lib/attributes');\n\n// Simple smoke tests for core utilities\n(function testSlugify() {\n  assert.strictEqual(slugify('Color Shade'), 'color-shade');\n  assert.strictEqual(slugify('  Fancy  SKU 123  '), 'fancy-sku-123');\n  assert.strictEqual(slugify('ÄÖÜß'), 'aouss');\n})();\n\n(function testCreateAndValidateGroup() {\n  const g = createGroup('SEO');\n  assert.ok(validateGroup(g), 'Newly created group should be valid');\n  assert.ok(typeof g.id === 'string' && g.id.length > 0);\n  assert.strictEqual(g.name, 'SEO');\n  assert.ok(Array.isArray(g.attributes));\n})();\n\n(function testAttributeBasics() {\n  const a = createAttribute('Title', 'text');\n  assert.ok(a.id && a.code && a.name);\n  assert.strictEqual(a.type, 'text');\n})();\n\nconsole.log('attributes.test.js passed');\n"
    }
  ]
}