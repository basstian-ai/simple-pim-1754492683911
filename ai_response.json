{
  "commit_message": "feat(ui): add \"Clear filters\" button to homepage and test\n\n- Show a single \"Clear filters\" action when any of the main filters (search, tags or in-stock) are active\n- Clicking it clears search, selected tags and in-stock filter\n- Add unit test verifying the control appears and clears the search input\n\nThis is a small, safe UX improvement to make filter state easier to reset. Includes a focused test that mocks fetch and next/router.",
  "files": [
    {
      "path": "pages/index.js",
      "content": "import React, { useEffect, useRef, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport ProductList from '../components/ProductList';\nimport ExportCsvLink from '../components/ExportCsvLink';\nimport StockFilterToggle from '../components/StockFilterToggle';\nimport { addTimestampsToProducts } from '../lib/ensureTimestamps';\nimport { addImagesToProducts } from '../lib/ensureProductImages';\n\nconst Home = () => {\n  const router = useRouter();\n  const [products, setProducts] = useState([]);\n  const [query, setQuery] = useState('');\n  const [allTags, setAllTags] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n  const [inStockOnly, setInStockOnly] = useState(false);\n\n  // ref for the search input so we can focus it via keyboard shortcut\n  const searchInputRef = useRef(null);\n\n  const initializedFromUrl = useRef(false);\n\n  // Initialize filter state from URL on first render\n  useEffect(() => {\n    if (initializedFromUrl.current) return;\n    const q = router?.query || {};\n    if (typeof q.search === 'string') setQuery(q.search);\n    if (typeof q.tags === 'string' && q.tags.trim()) {\n      setSelectedTags(q.tags.split(',').map((t) => decodeURIComponent(t)));\n    }\n    if (q.inStock === '1' || q.inStock === 'true') setInStockOnly(true);\n    initializedFromUrl.current = true;\n  }, [router?.query]);\n\n  // Keep URL in sync with filters (for shareable links and CSV export)\n  useEffect(() => {\n    // Avoid pushing identical queries repeatedly\n    const nextQuery = {};\n    if (query) nextQuery.search = query;\n    if (selectedTags.length) nextQuery.tags = selectedTags.join(',');\n    if (inStockOnly) nextQuery.inStock = '1';\n\n    const current = router?.query || {};\n    const same =\n      current.search === nextQuery.search &&\n      (current.tags || '') === (nextQuery.tags || '') &&\n      (current.inStock || '') === (nextQuery.inStock || '');\n\n    if (!same) {\n      router.replace({ pathname: router.pathname, query: nextQuery }, undefined, { shallow: true });\n    }\n  }, [query, selectedTags, inStockOnly]);\n\n  useEffect(() => {\n    let cancelled = false;\n    const loadTags = async () => {\n      try {\n        const res = await fetch('/api/tags');\n        const data = await res.json();\n        if (!cancelled) setAllTags(Array.isArray(data) ? data : []);\n      } catch (e) {\n        if (!cancelled) setAllTags([]);\n      }\n    };\n    loadTags();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  useEffect(() => {\n    let active = true;\n    const controller = new AbortController();\n\n    const fetchProducts = async () => {\n      const params = [];\n      if (query) params.push(`search=${encodeURIComponent(query)}`);\n      if (selectedTags.length > 0) params.push(`tags=${selectedTags.map(encodeURIComponent).join(',')}`);\n      if (inStockOnly) params.push('inStock=1');\n      const qs = params.length ? `?${params.join('&')}` : '';\n      const res = await fetch(`/api/products${qs}`, { signal: controller.signal });\n      const data = await res.json();\n      // augment products with deterministic timestamps for richer UI and export\n      const augmented = addTimestampsToProducts(Array.isArray(data) ? data : []);\n      // also ensure each product has a deterministic placeholder image\n      const withImages = addImagesToProducts(augmented);\n      if (active) setProducts(withImages);\n    };\n\n    const t = setTimeout(fetchProducts, 250);\n\n    return () => {\n      active = false;\n      controller.abort();\n      clearTimeout(t);\n    };\n  }, [query, selectedTags, inStockOnly]);\n\n  // Keyboard shortcut: press '/' to focus the search input\n  useEffect(() => {\n    const handler = (e) => {\n      // only trigger on the '/' key, ignore when focus is already in an input/textarea\n      if (e.key === '/') {\n        const active = document.activeElement;\n        const tag = active && active.tagName && active.tagName.toLowerCase();\n        if (tag !== 'input' && tag !== 'textarea') {\n          e.preventDefault();\n          if (searchInputRef.current) searchInputRef.current.focus();\n        }\n      }\n    };\n    window.addEventListener('keydown', handler);\n    return () => window.removeEventListener('keydown', handler);\n  }, []);\n\n  const toggleTag = (tag) => {\n    setSelectedTags((prev) => {\n      if (prev.includes(tag)) return prev.filter((t) => t !== tag);\n      return [...prev, tag];\n    });\n  };\n\n  const clearAllFilters = () => {\n    setQuery('');\n    setSelectedTags([]);\n    setInStockOnly(false);\n  };\n\n  const anyFilterActive = query || selectedTags.length > 0 || inStockOnly;\n\n  return (\n    <div style={{ maxWidth: 900, margin: '0 auto', padding: '1rem' }}>\n      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem', flexWrap: 'wrap' }}>\n        <input\n          ref={searchInputRef}\n          type=\"search\"\n          placeholder=\"Search products by name, SKU or description...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          style={{ flex: 1, minWidth: 260, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n          aria-label=\"Search products\"\n        />\n        <StockFilterToggle checked={inStockOnly} onChange={setInStockOnly} />\n        <span style={{ color: '#666', fontSize: 12 }}>\n          {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n        </span>\n        <ExportCsvLink style={{ fontSize: 12 }} />\n\n        {/* Render a compact clear-all action when any of the main filters are active */}\n        {anyFilterActive && (\n          <button\n            onClick={clearAllFilters}\n            aria-label=\"Clear filters\"\n            style={{ padding: '0.25rem 0.5rem', borderRadius: 6, border: '1px solid #ddd', background: '#fafafa', cursor: 'pointer', fontSize: 12 }}\n          >\n            Clear filters\n          </button>\n        )}\n      </div>\n\n      {allTags.length > 0 && (\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem', marginBottom: '1rem' }}>\n          {allTags.map((tag) => {\n            const active = selectedTags.includes(tag);\n            return (\n              <button\n                key={tag}\n                onClick={() => toggleTag(tag)}\n                aria-pressed={active}\n                style={{\n                  padding: '0.25rem 0.5rem',\n                  borderRadius: 999,\n                  border: '1px solid ' + (active ? '#0b64d8' : '#ddd'),\n                  background: active ? '#e7f1ff' : 'white',\n                  color: active ? '#0b64d8' : '#333',\n                  cursor: 'pointer',\n                  fontSize: 12,\n                }}\n              >\n                {tag}\n              </button>\n            );\n          })}\n          {selectedTags.length > 0 && (\n            <button\n              onClick={() => setSelectedTags([])}\n              style={{\n                marginLeft: 'auto',\n                padding: '0.25rem 0.5rem',\n                borderRadius: 6,\n                border: '1px solid #ddd',\n                background: '#fafafa',\n                cursor: 'pointer',\n                fontSize: 12,\n              }}\n              aria-label=\"Clear selected tags\"\n            >\n              Clear tags\n            </button>\n          )}\n        </div>\n      )}\n\n      <ProductList products={products} />\n    </div>\n  );\n};\n\nexport default Home;\n"
    },
    {
      "path": "tests/index.clearFilters.test.js",
      "content": "import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport '@testing-library/jest-dom/extend-expect';\n\n// Mock next/router used by the page\njest.mock('next/router', () => ({\n  useRouter: () => ({ pathname: '/', query: {}, replace: jest.fn() }),\n}));\n\n// Ensure fetch is available and predictable for the component effects\nbeforeEach(() => {\n  global.fetch = jest.fn((url) => {\n    if (typeof url === 'string' && url.startsWith('/api/tags')) {\n      return Promise.resolve({ json: () => Promise.resolve([]) });\n    }\n    if (typeof url === 'string' && url.startsWith('/api/products')) {\n      return Promise.resolve({ json: () => Promise.resolve([]) });\n    }\n    return Promise.resolve({ json: () => Promise.resolve([]) });\n  });\n});\n\nafterEach(() => {\n  jest.resetAllMocks();\n});\n\ntest('shows Clear filters button when search/in-stock/tags active and clears them', async () => {\n  const Home = require('../pages/index').default;\n\n  render(<Home />);\n\n  const input = screen.getByPlaceholderText('Search products by name, SKU or description...');\n  expect(input).toBeInTheDocument();\n\n  // Type into the search input to activate filters\n  fireEvent.change(input, { target: { value: 'apple' } });\n  expect(input.value).toBe('apple');\n\n  // The Clear filters button should appear\n  const clearBtn = await screen.findByRole('button', { name: /clear filters/i });\n  expect(clearBtn).toBeInTheDocument();\n\n  // Click it and assert the input is cleared\n  fireEvent.click(clearBtn);\n  await waitFor(() => expect(input.value).toBe(''));\n});\n"
    }
  ]
}