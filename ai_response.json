{
  "files": [
    {
      "path": "lib/store/attributeGroups.js",
      "content": "/*\n In-memory store for Attribute Groups.\n This is ephemeral (resets on server cold start), suitable for demo/dev.\n*/\n\nconst groups = [];\nlet seq = 0;\n\nfunction seedOnce() {\n  if (groups.length > 0) return;\n  groups.push({\n    id: genId(),\n    code: 'basic',\n    name: 'Basic Attributes',\n    attributes: [\n      { code: 'name', label: 'Name', type: 'text' },\n      { code: 'sku', label: 'SKU', type: 'text' }\n    ],\n    createdAt: new Date().toISOString()\n  });\n}\n\nfunction genId() {\n  seq += 1;\n  return `grp_${Date.now().toString(36)}_${seq}`;\n}\n\nfunction listGroups() {\n  seedOnce();\n  // return a shallow copy to avoid accidental external mutation\n  return groups.map((g) => ({ ...g, attributes: g.attributes.map((a) => ({ ...a })) }));\n}\n\nfunction createGroup(input) {\n  seedOnce();\n  const { code, name, attributes } = input || {};\n  if (!code || typeof code !== 'string') {\n    const err = new Error('code is required');\n    err.statusCode = 400;\n    throw err;\n  }\n  if (!name || typeof name !== 'string') {\n    const err = new Error('name is required');\n    err.statusCode = 400;\n    throw err;\n  }\n  const exists = groups.find((g) => g.code.toLowerCase() === code.toLowerCase());\n  if (exists) {\n    const err = new Error(`attribute group with code \"${code}\" already exists`);\n    err.statusCode = 409;\n    throw err;\n  }\n  const group = {\n    id: genId(),\n    code,\n    name,\n    attributes: Array.isArray(attributes) ? attributes.map((a) => ({ ...a })) : [],\n    createdAt: new Date().toISOString()\n  };\n  groups.push(group);\n  return { ...group, attributes: group.attributes.map((a) => ({ ...a })) };\n}\n\nmodule.exports = {\n  listGroups,\n  createGroup\n};\n"
    },
    {
      "path": "lib/api/attributeGroupsHandler.js",
      "content": "const { listGroups, createGroup } = require('../store/attributeGroups');\n\nasync function handler(req, res) {\n  try {\n    if (req.method === 'GET') {\n      const data = listGroups();\n      res.setHeader && res.setHeader('Content-Type', 'application/json');\n      return res.status(200).json({ ok: true, data });\n    }\n\n    if (req.method === 'POST') {\n      const body = req.body || {};\n      const created = createGroup({\n        code: body.code,\n        name: body.name,\n        attributes: Array.isArray(body.attributes) ? body.attributes : []\n      });\n      res.setHeader && res.setHeader('Content-Type', 'application/json');\n      return res.status(201).json({ ok: true, data: created });\n    }\n\n    res.setHeader && res.setHeader('Allow', 'GET, POST');\n    return res.status(405).json({ ok: false, error: 'Method Not Allowed' });\n  } catch (err) {\n    const status = err.statusCode || 500;\n    return res.status(status).json({ ok: false, error: err.message || 'Unexpected error' });\n  }\n}\n\nmodule.exports = { handler };\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "module.exports = require('../../lib/api/attributeGroupsHandler').handler;\n"
    },
    {
      "path": "pages/attribute-groups.js",
      "content": "import { useEffect, useState } from 'react';\n\nexport default function AttributeGroupsPage() {\n  const [groups, setGroups] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [form, setForm] = useState({ code: '', name: '' });\n  const [submitting, setSubmitting] = useState(false);\n\n  useEffect(() => {\n    let mounted = true;\n    async function load() {\n      try {\n        const res = await fetch('/api/attribute-groups');\n        const json = await res.json();\n        if (!mounted) return;\n        if (json.ok) {\n          setGroups(json.data);\n        } else {\n          setError(json.error || 'Failed to load');\n        }\n      } catch (e) {\n        if (mounted) setError(e.message || 'Failed to load');\n      } finally {\n        if (mounted) setLoading(false);\n      }\n    }\n    load();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    setError('');\n    if (!form.code || !form.name) {\n      setError('Please provide both code and name');\n      return;\n    }\n    setSubmitting(true);\n    try {\n      const res = await fetch('/api/attribute-groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ code: form.code.trim(), name: form.name.trim() })\n      });\n      const json = await res.json();\n      if (json.ok) {\n        setGroups((prev) => [json.data, ...prev]);\n        setForm({ code: '', name: '' });\n      } else {\n        setError(json.error || 'Failed to create');\n      }\n    } catch (e) {\n      setError(e.message || 'Failed to create');\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <div style={{ maxWidth: 800, margin: '0 auto', padding: '24px' }}>\n      <h1>Attribute Groups</h1>\n      <p style={{ color: '#666', marginTop: 0 }}>Organize product attributes into reusable groups.</p>\n\n      <section style={{ margin: '16px 0', padding: '16px', border: '1px solid #eaeaea', borderRadius: 8 }}>\n        <h2 style={{ marginTop: 0, fontSize: 18 }}>Create New Group</h2>\n        <form onSubmit={handleSubmit} style={{ display: 'flex', gap: 12, flexWrap: 'wrap', alignItems: 'flex-end' }}>\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <label htmlFor=\"code\" style={{ fontSize: 12, color: '#555' }}>Code</label>\n            <input\n              id=\"code\"\n              value={form.code}\n              onChange={(e) => setForm((f) => ({ ...f, code: e.target.value }))}\n              placeholder=\"e.g., marketing\"\n              style={{ padding: '8px 10px', minWidth: 200 }}\n            />\n          </div>\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <label htmlFor=\"name\" style={{ fontSize: 12, color: '#555' }}>Name</label>\n            <input\n              id=\"name\"\n              value={form.name}\n              onChange={(e) => setForm((f) => ({ ...f, name: e.target.value }))}\n              placeholder=\"e.g., Marketing Attributes\"\n              style={{ padding: '8px 10px', minWidth: 260 }}\n            />\n          </div>\n          <button\n            type=\"submit\"\n            disabled={submitting}\n            style={{ padding: '10px 14px', background: '#111', color: 'white', borderRadius: 6, border: 'none', cursor: 'pointer' }}\n          >\n            {submitting ? 'Creating…' : 'Add Group'}\n          </button>\n        </form>\n        {error ? <p style={{ color: 'crimson', marginTop: 8 }}>{error}</p> : null}\n      </section>\n\n      <section style={{ marginTop: 24 }}>\n        <h2 style={{ marginTop: 0, fontSize: 18 }}>Groups</h2>\n        {loading ? (\n          <p>Loading…</p>\n        ) : groups.length === 0 ? (\n          <p>No attribute groups yet.</p>\n        ) : (\n          <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n            {groups.map((g) => (\n              <li key={g.id} style={{ border: '1px solid #eaeaea', borderRadius: 8, padding: 12, marginBottom: 10 }}>\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                  <div>\n                    <strong>{g.name}</strong>\n                    <span style={{ color: '#888' }}> — {g.code}</span>\n                  </div>\n                  <span style={{ fontSize: 12, color: '#666' }}>{(g.attributes || []).length} attributes</span>\n                </div>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/api/attribute-groups.test.js",
      "content": "/*\n Minimal test for Attribute Groups API handler.\n Run with: node tests/api/attribute-groups.test.js\n*/\n\nconst assert = require('assert');\nconst { handler } = require('../../lib/api/attributeGroupsHandler');\n\nfunction createRes() {\n  return {\n    statusCode: 200,\n    headers: {},\n    body: null,\n    setHeader(k, v) { this.headers[k] = v; },\n    status(code) { this.statusCode = code; return this; },\n    json(payload) { this.body = payload; this.ended = true; return this; },\n    end() { this.ended = true; }\n  };\n}\n\nasync function call(method, body) {\n  const req = { method, body };\n  const res = createRes();\n  await handler(req, res);\n  return res;\n}\n\n(async function run() {\n  // initial list\n  let res = await call('GET');\n  assert.strictEqual(res.statusCode, 200);\n  assert.ok(res.body.ok);\n  assert.ok(Array.isArray(res.body.data));\n  const initialLen = res.body.data.length;\n  assert.ok(res.body.data.some((g) => g.code === 'basic'));\n\n  // create new\n  res = await call('POST', { code: 'marketing', name: 'Marketing Attributes' });\n  assert.strictEqual(res.statusCode, 201);\n  assert.ok(res.body.ok);\n  assert.strictEqual(res.body.data.code, 'marketing');\n\n  // list again should include new one\n  res = await call('GET');\n  assert.strictEqual(res.statusCode, 200);\n  const codes = res.body.data.map((g) => g.code);\n  assert.ok(codes.includes('marketing'));\n  assert.strictEqual(res.body.data.length, initialLen + 1);\n\n  console.log('OK - attribute groups API basic flow');\n})().catch((e) => {\n  console.error('Test failed:', e);\n  process.exit(1);\n});\n"
    },
    {
      "path": "commit_message.txt",
      "content": "FEATURE: Add Attribute Groups API (GET/POST), simple UI page to list/create groups, and a minimal Node test for API handler"
    }
  ]
}