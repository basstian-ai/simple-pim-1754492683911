{
  "files": [
    {
      "path": "pages/api/products/variants/generate.js",
      "content": "const variantsLib = require('../../../../lib/variants');\n\nasync function handler(req, res) {\n  res.setHeader('Content-Type', 'application/json');\n  if (req.method !== 'POST') {\n    res.setHeader('Allow', 'POST');\n    return res.status(405).json({ error: 'Method Not Allowed' });\n  }\n\n  try {\n    const body = req.body || {};\n    const axes = Array.isArray(body.axes) ? body.axes : [];\n    const baseSku = typeof body.baseSku === 'string' ? body.baseSku : '';\n    const baseName = typeof body.baseName === 'string' ? body.baseName : '';\n\n    // Basic validation\n    if (!Array.isArray(axes) || axes.length === 0) {\n      return res.status(400).json({ error: 'axes must be a non-empty array' });\n    }\n    for (const a of axes) {\n      if (!a || typeof a.code !== 'string' || !Array.isArray(a.options) || a.options.length === 0) {\n        return res.status(400).json({ error: 'each axis requires code and non-empty options array' });\n      }\n    }\n\n    const result = variantsLib.generateVariants(axes, { baseSku, baseName });\n    return res.status(200).json(result);\n  } catch (err) {\n    return res.status(500).json({ error: 'Internal Server Error', message: err && err.message });\n  }\n}\n\nmodule.exports = handler;\nexports.default = handler;\n"
    },
    {
      "path": "tests/api-products-variants-generate.test.js",
      "content": "const handler = require('../pages/api/products/variants/generate.js');\n\nfunction createMockRes() {\n  return {\n    statusCode: 200,\n    headers: {},\n    body: undefined,\n    setHeader(name, value) {\n      this.headers[name] = value;\n    },\n    status(code) {\n      this.statusCode = code;\n      return this;\n    },\n    json(payload) {\n      this.body = payload;\n      return this;\n    },\n    end() { return this; },\n  };\n}\n\ndescribe('POST /api/products/variants/generate', () => {\n  test('generates variants from axes', async () => {\n    const req = {\n      method: 'POST',\n      body: {\n        axes: [\n          { code: 'color', label: 'Color', options: ['Red', 'Blue'] },\n          { code: 'size', label: 'Size', options: ['S', 'M', 'L'] },\n        ],\n        baseSku: 'TS',\n        baseName: 'Tee',\n      },\n    };\n    const res = createMockRes();\n    await handler(req, res);\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toBeDefined();\n    expect(res.body.count).toBe(6);\n    expect(Array.isArray(res.body.variants)).toBe(true);\n    expect(res.body.variants.length).toBe(6);\n    const sample = res.body.variants[0];\n    expect(sample.sku.startsWith('TS')).toBe(true);\n    expect(sample).toHaveProperty('options');\n    expect(Object.keys(sample.options)).toEqual(expect.arrayContaining(['color', 'size']));\n  });\n\n  test('rejects non-POST methods', async () => {\n    const req = { method: 'GET' };\n    const res = createMockRes();\n    await handler(req, res);\n    expect(res.statusCode).toBe(405);\n    expect(res.headers['Allow']).toBe('POST');\n    expect(res.body).toHaveProperty('error');\n  });\n});\n"
    },
    {
      "path": "commit_message",
      "content": "feat(api): add /api/products/variants/generate endpoint for server-side variant generation with validation and tests"
    }
  ]
}