{
  "files": [
    {
      "path": "lib/products.js",
      "content": "'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst productsFilePath = path.join(process.cwd(), 'data', 'products.json');\n\nfunction readProductsFile() {\n  try {\n    const raw = fs.readFileSync(productsFilePath, 'utf-8');\n    const json = JSON.parse(raw);\n    return Array.isArray(json) ? json : [];\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction normalize(v) {\n  return (v || '').toString().toLowerCase();\n}\n\nfunction filterProducts(items, search) {\n  if (!search || !search.trim()) return items.slice();\n  const q = normalize(search.trim());\n  return items.filter((p) => {\n    const haystack = [p.name, p.sku, p.description, p.category, p.brand]\n      .filter(Boolean)\n      .map(normalize)\n      .join(' ');\n    return haystack.includes(q);\n  });\n}\n\nasync function getProducts(options = {}) {\n  let search;\n  if (typeof options === 'string') {\n    search = options;\n  } else {\n    search = options.search;\n  }\n  const items = readProductsFile();\n  if (search) {\n    return filterProducts(items, search);\n  }\n  return items;\n}\n\nmodule.exports = {\n  getProducts,\n  filterProducts,\n  readProductsFile,\n};\n"
    },
    {
      "path": "pages/api/products.js",
      "content": "import { getProducts } from '../../lib/products';\n\nexport default async function handler(req, res) {\n  const { search } = req.query || {};\n  const products = await getProducts({ search });\n  res.status(200).json(products);\n}\n"
    },
    {
      "path": "pages/api/products/index.js",
      "content": "import { getProducts } from '../../../lib/products';\n\nexport default async function handler(req, res) {\n  const { search } = req.query || {};\n  const products = await getProducts({ search });\n  res.status(200).json(products);\n}\n"
    },
    {
      "path": "pages/index.js",
      "content": "import React, { useEffect, useState } from 'react';\nimport ProductList from '../components/ProductList';\n\nconst Home = () => {\n  const [products, setProducts] = useState([]);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    let active = true;\n    const controller = new AbortController();\n\n    const fetchProducts = async () => {\n      const qs = query ? `?search=${encodeURIComponent(query)}` : '';\n      const res = await fetch(`/api/products${qs}`, { signal: controller.signal });\n      const data = await res.json();\n      if (active) setProducts(data);\n    };\n\n    const t = setTimeout(fetchProducts, 250);\n\n    return () => {\n      active = false;\n      controller.abort();\n      clearTimeout(t);\n    };\n  }, [query]);\n\n  return (\n    <div style={{ maxWidth: 900, margin: '0 auto', padding: '1rem' }}>\n      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem' }}>\n        <input\n          type=\"search\"\n          placeholder=\"Search products by name, SKU or description...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          style={{ flex: 1, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n          aria-label=\"Search products\"\n        />\n        <span style={{ color: '#666', fontSize: 12 }}>\n          {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n        </span>\n      </div>\n      <ProductList products={products} />\n    </div>\n  );\n};\n\nexport default Home;\n"
    },
    {
      "path": "tests/filterProducts.test.js",
      "content": "const { filterProducts } = require('../lib/products');\n\ndescribe('filterProducts', () => {\n  const dataset = [\n    { name: 'Red Shoe', sku: 'RS-1', description: 'Comfortable everyday shoe' },\n    { name: 'Blue Hat', sku: 'BH-2', description: 'Stylish and modern' },\n    { name: 'Green Jacket', sku: 'GJ-3', description: 'Warm winter jacket' },\n  ];\n\n  test('returns all items when search is empty', () => {\n    const result = filterProducts(dataset, '');\n    expect(result).toHaveLength(dataset.length);\n  });\n\n  test('case-insensitive search matches name', () => {\n    const result = filterProducts(dataset, 'red');\n    expect(result).toHaveLength(1);\n    expect(result[0].name).toBe('Red Shoe');\n  });\n\n  test('search can match description', () => {\n    const result = filterProducts(dataset, 'winter');\n    expect(result).toHaveLength(1);\n    expect(result[0].sku).toBe('GJ-3');\n  });\n\n  test('non-matching search returns empty array', () => {\n    const result = filterProducts(dataset, 'zzzznotfound');\n    expect(result).toHaveLength(0);\n  });\n});\n"
    }
  ]
}