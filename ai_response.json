{
  "files": [
    {
      "path": "pages/api/products/[sku]/attributes/flat.js",
      "content": "import slugify from '../../../../../lib/slugify';\nimport sampleProducts from '../../../../../lib/sampleProducts';\n\nexport default function handler(req, res) {\n  res.setHeader('Content-Type', 'application/json');\n\n  if (req.method !== 'GET') {\n    res.setHeader('Allow', 'GET');\n    return res.status(405).json({ error: 'Method Not Allowed' });\n  }\n\n  const { sku } = req.query || {};\n  if (!sku || typeof sku !== 'string') {\n    return res.status(400).json({ error: 'Missing or invalid sku parameter' });\n  }\n\n  try {\n    const products = Array.isArray(sampleProducts) ? sampleProducts : [];\n    const product = products.find((p) => p && p.sku === sku);\n\n    if (!product) {\n      return res.status(404).json({ error: 'Product not found', sku });\n    }\n\n    const attributeGroups = Array.isArray(product.attributeGroups) ? product.attributeGroups : [];\n\n    const attributes = [];\n    for (const g of attributeGroups) {\n      const groupName = g?.name || g?.id || 'General';\n      const groupId = g?.id || slugify(groupName);\n      const attrs = Array.isArray(g?.attributes) ? g.attributes : [];\n      for (const a of attrs) {\n        const name = a?.name || a?.label || a?.code || '';\n        const code = a?.code || (name ? slugify(name) : undefined) || '';\n        const type = a?.type || 'text';\n        const entry = {\n          groupId,\n          groupName,\n          code,\n          name,\n          type,\n        };\n        if (typeof a?.required !== 'undefined') entry.required = Boolean(a.required);\n        if (a?.unit) entry.unit = a.unit;\n        if (Array.isArray(a?.options) && a.options.length) entry.options = a.options;\n        attributes.push(entry);\n      }\n    }\n\n    res.setHeader('Cache-Control', 's-maxage=60, stale-while-revalidate=300');\n    return res.status(200).json({ sku: product.sku, count: attributes.length, attributes });\n  } catch (err) {\n    return res.status(500).json({ error: 'Internal Server Error' });\n  }\n}\n"
    },
    {
      "path": "tests/api-product-attributes-flat.test.js",
      "content": "import handler from '../pages/api/products/[sku]/attributes/flat';\nconst sampleProducts = require('../lib/sampleProducts');\n\nfunction createMockRes() {\n  return {\n    statusCode: 200,\n    headers: {},\n    body: undefined,\n    setHeader(name, value) {\n      this.headers[name] = value;\n    },\n    status(code) {\n      this.statusCode = code;\n      return this;\n    },\n    json(payload) {\n      this.body = payload;\n      return this;\n    },\n  };\n}\n\ndescribe('GET /api/products/[sku]/attributes/flat', () => {\n  it('returns flattened attributes for an existing product', async () => {\n    const first = sampleProducts[0];\n    expect(first).toBeDefined();\n    const req = { method: 'GET', query: { sku: first.sku } };\n    const res = createMockRes();\n\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toBeDefined();\n    expect(res.body.sku).toBe(first.sku);\n    expect(Array.isArray(res.body.attributes)).toBe(true);\n    expect(res.body.count).toBe(res.body.attributes.length);\n    if (res.body.attributes.length > 0) {\n      const entry = res.body.attributes[0];\n      expect(entry).toHaveProperty('groupName');\n      expect(entry).toHaveProperty('code');\n    }\n  });\n\n  it('returns 404 for unknown sku', async () => {\n    const req = { method: 'GET', query: { sku: 'UNKNOWN-SKU-XYZ' } };\n    const res = createMockRes();\n\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(404);\n    expect(res.body).toHaveProperty('error');\n  });\n});\n"
    },
    {
      "path": "README.md",
      "content": "# Simple PIM (Next.js)\n\nThis is a lightweight Product Information Management (PIM) demo built with Next.js and deployed on Vercel. It includes sample data, APIs for products, tags, attributes, attribute groups, and a minimal admin UI.\n\n## Quick start\n\n- Install dependencies: `npm install`\n- Dev server: `npm run dev`\n- Run tests: `npm test`\n\n## Notable features\n\n- Product search, tag filtering, and CSV export on the storefront (home page)\n- Admin dashboard with product stats and tools\n- Attributes and Attribute Groups management and exports\n- Tag stats and bulk tag tools\n- Variant generation helpers\n\n## New: Admin Products filters and CSV export\n\nThe Admin Products page now mirrors the storefront filtering experience:\n\n- Search by name, SKU, or description\n- Filter by tags and in-stock only\n- CSV export link that always reflects the current filters\n- All filters are synced to the URL for easy sharing and reproducible exports\n\nYou can find it at `/admin/products`.\n\n## API\n\nExplore the API routes under `/pages/api/*`. Common ones include:\n\n- `/api/products`, `/api/products/[sku]`, `/api/products/search`, `/api/products/export`\n- `/api/products/[sku]/attributes/flat` (flatten a product's Attribute Groups for easy export/inspection)\n- `/api/tags`, `/api/tags/stats`, `/api/tags/export`\n- `/api/attributes`, `/api/attributes/suggest`\n- `/api/attribute-groups`, `/api/attribute-groups/flat`, `/api/attribute-groups/export`\n\n## Testing\n\nThis project uses Jest and Testing Library. When adding features, ensure you:\n\n- Cover new behavior with tests\n- Keep the main branch green (tests and build passing)\n\nRun tests with `npm test`.\n"
    }
  ]
}