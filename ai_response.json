{
  "files": [
    {
      "path": "lib/data/attributesStore.js",
      "content": "const state = {\n  groups: [\n    {\n      id: 'gen',\n      name: 'General',\n      attributes: [\n        { id: 'brand', name: 'Brand', type: 'text' },\n        { id: 'color', name: 'Color', type: 'text' },\n        { id: 'material', name: 'Material', type: 'text' }\n      ]\n    },\n    {\n      id: 'dims',\n      name: 'Dimensions',\n      attributes: [\n        { id: 'width', name: 'Width', type: 'number', unit: 'cm' },\n        { id: 'height', name: 'Height', type: 'number', unit: 'cm' },\n        { id: 'depth', name: 'Depth', type: 'number', unit: 'cm' }\n      ]\n    }\n  ],\n  updatedAt: Date.now()\n};\n\nfunction uid(prefix = 'id') {\n  const rand = Math.random().toString(36).slice(2, 8);\n  const t = Date.now().toString(36);\n  return `${prefix}_${rand}${t}`;\n}\n\nfunction touch() {\n  state.updatedAt = Date.now();\n}\n\nfunction deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nfunction getSnapshot() {\n  return deepClone(state);\n}\n\nfunction findGroupIndex(id) {\n  return state.groups.findIndex((g) => g.id === id);\n}\n\nfunction listGroups() {\n  return deepClone(state.groups);\n}\n\nfunction addGroup(name) {\n  if (!name || typeof name !== 'string') throw new Error('Invalid name');\n  const g = { id: uid('grp'), name: name.trim(), attributes: [] };\n  state.groups.push(g);\n  touch();\n  return deepClone(g);\n}\n\nfunction renameGroup(id, name) {\n  const i = findGroupIndex(id);\n  if (i === -1) throw new Error('Group not found');\n  state.groups[i].name = String(name || '').trim();\n  touch();\n  return deepClone(state.groups[i]);\n}\n\nfunction deleteGroup(id) {\n  const i = findGroupIndex(id);\n  if (i === -1) throw new Error('Group not found');\n  const [removed] = state.groups.splice(i, 1);\n  touch();\n  return deepClone(removed);\n}\n\nfunction addAttribute(groupId, attribute) {\n  const i = findGroupIndex(groupId);\n  if (i === -1) throw new Error('Group not found');\n  const attr = Object.assign({ id: uid('attr'), type: 'text' }, attribute || {});\n  if (!attr.name) throw new Error('Attribute name required');\n  state.groups[i].attributes.push(attr);\n  touch();\n  return deepClone(attr);\n}\n\nfunction updateAttribute(groupId, attrId, patch) {\n  const i = findGroupIndex(groupId);\n  if (i === -1) throw new Error('Group not found');\n  const j = state.groups[i].attributes.findIndex((a) => a.id === attrId);\n  if (j === -1) throw new Error('Attribute not found');\n  Object.assign(state.groups[i].attributes[j], patch || {});\n  touch();\n  return deepClone(state.groups[i].attributes[j]);\n}\n\nfunction deleteAttribute(groupId, attrId) {\n  const i = findGroupIndex(groupId);\n  if (i === -1) throw new Error('Group not found');\n  const j = state.groups[i].attributes.findIndex((a) => a.id === attrId);\n  if (j === -1) throw new Error('Attribute not found');\n  const [removed] = state.groups[i].attributes.splice(j, 1);\n  touch();\n  return deepClone(removed);\n}\n\nmodule.exports = {\n  getSnapshot,\n  listGroups,\n  addGroup,\n  renameGroup,\n  deleteGroup,\n  addAttribute,\n  updateAttribute,\n  deleteAttribute\n};\n"
    },
    {
      "path": "pages/api/attributes.js",
      "content": "const store = require('../../lib/data/attributesStore');\n\nexport default async function handler(req, res) {\n  try {\n    if (req.method === 'GET') {\n      const snap = store.getSnapshot();\n      return res.status(200).json({ ok: true, data: { groups: snap.groups, updatedAt: snap.updatedAt } });\n    }\n\n    const body = req.body || {};\n    const op = body.op;\n\n    if (!op) {\n      return res.status(400).json({ ok: false, error: 'Missing op' });\n    }\n\n    switch (req.method) {\n      case 'POST': {\n        let result = null;\n        if (op === 'addGroup') {\n          result = store.addGroup(body.name);\n        } else if (op === 'addAttribute') {\n          result = store.addAttribute(body.groupId, body.attribute);\n        } else {\n          return res.status(400).json({ ok: false, error: 'Unsupported op for POST' });\n        }\n        const snap = store.getSnapshot();\n        return res.status(200).json({ ok: true, result, data: { groups: snap.groups, updatedAt: snap.updatedAt } });\n      }\n      case 'PUT': {\n        let result = null;\n        if (op === 'renameGroup') {\n          result = store.renameGroup(body.id, body.name);\n        } else if (op === 'updateAttribute') {\n          result = store.updateAttribute(body.groupId, body.attrId, body.patch);\n        } else {\n          return res.status(400).json({ ok: false, error: 'Unsupported op for PUT' });\n        }\n        const snap = store.getSnapshot();\n        return res.status(200).json({ ok: true, result, data: { groups: snap.groups, updatedAt: snap.updatedAt } });\n      }\n      case 'DELETE': {\n        let result = null;\n        if (op === 'deleteGroup') {\n          result = store.deleteGroup(body.id);\n        } else if (op === 'deleteAttribute') {\n          result = store.deleteAttribute(body.groupId, body.attrId);\n        } else {\n          return res.status(400).json({ ok: false, error: 'Unsupported op for DELETE' });\n        }\n        const snap = store.getSnapshot();\n        return res.status(200).json({ ok: true, result, data: { groups: snap.groups, updatedAt: snap.updatedAt } });\n      }\n      default:\n        return res.status(405).json({ ok: false, error: 'Method not allowed' });\n    }\n  } catch (err) {\n    console.error('API /attributes error', err);\n    return res.status(500).json({ ok: false, error: err.message || 'Internal error' });\n  }\n}\n"
    },
    {
      "path": "pages/admin/attributes.js",
      "content": "import React, { useEffect, useMemo, useState } from 'react';\n\nfunction Field({ label, children }) {\n  return (\n    <label style={{ display: 'block', marginBottom: 8 }}>\n      <div style={{ fontSize: 12, color: '#555' }}>{label}</div>\n      {children}\n    </label>\n  );\n}\n\nfunction Section({ title, children, actions }) {\n  return (\n    <section style={{ border: '1px solid #eee', borderRadius: 8, padding: 16, marginBottom: 16 }}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n        <h3 style={{ margin: 0 }}>{title}</h3>\n        <div>{actions}</div>\n      </div>\n      {children}\n    </section>\n  );\n}\n\nexport default function AttributesAdminPage() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [groups, setGroups] = useState([]);\n  const [selectedGroupId, setSelectedGroupId] = useState('');\n\n  const selectedGroup = useMemo(() => groups.find((g) => g.id === selectedGroupId) || groups[0], [groups, selectedGroupId]);\n\n  async function refresh() {\n    setLoading(true);\n    setError('');\n    try {\n      const r = await fetch('/api/attributes');\n      const json = await r.json();\n      if (!json.ok) throw new Error(json.error || 'Failed');\n      setGroups(json.data.groups || []);\n      if (!selectedGroupId && (json.data.groups || []).length > 0) {\n        setSelectedGroupId(json.data.groups[0].id);\n      }\n    } catch (e) {\n      setError(e.message || 'Error');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    refresh();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  async function call(op, payload = {}, method = 'POST') {\n    setLoading(true);\n    setError('');\n    try {\n      const r = await fetch('/api/attributes', {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ op, ...payload })\n      });\n      const json = await r.json();\n      if (!json.ok) throw new Error(json.error || 'Request failed');\n      setGroups(json.data.groups || []);\n      return json;\n    } catch (e) {\n      setError(e.message || 'Error');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function handleAddGroup(e) {\n    e.preventDefault();\n    const fd = new FormData(e.currentTarget);\n    const name = (fd.get('name') || '').toString().trim();\n    if (!name) return;\n    const res = await call('addGroup', { name }, 'POST');\n    if (res && res.result && res.result.id) {\n      setSelectedGroupId(res.result.id);\n      e.currentTarget.reset();\n    }\n  }\n\n  async function handleRenameGroup(id, name) {\n    if (!name || !id) return;\n    await call('renameGroup', { id, name }, 'PUT');\n  }\n\n  async function handleDeleteGroup(id) {\n    if (!id) return;\n    const ok = window.confirm('Delete this group and all its attributes?');\n    if (!ok) return;\n    await call('deleteGroup', { id }, 'DELETE');\n    setSelectedGroupId('');\n  }\n\n  async function handleAddAttribute(e) {\n    e.preventDefault();\n    if (!selectedGroup) return;\n    const fd = new FormData(e.currentTarget);\n    const name = (fd.get('name') || '').toString().trim();\n    const type = (fd.get('type') || 'text').toString();\n    const unit = (fd.get('unit') || '').toString().trim();\n    if (!name) return;\n    await call('addAttribute', { groupId: selectedGroup.id, attribute: { name, type, unit: unit || undefined } }, 'POST');\n    e.currentTarget.reset();\n  }\n\n  async function handleDeleteAttr(attrId) {\n    if (!selectedGroup) return;\n    await call('deleteAttribute', { groupId: selectedGroup.id, attrId }, 'DELETE');\n  }\n\n  function GroupSelector() {\n    return (\n      <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n        <select\n          value={selectedGroup ? selectedGroup.id : ''}\n          onChange={(e) => setSelectedGroupId(e.target.value)}\n          style={{ padding: 8 }}\n        >\n          {groups.map((g) => (\n            <option key={g.id} value={g.id}>\n              {g.name}\n            </option>\n          ))}\n        </select>\n        {selectedGroup && (\n          <button onClick={() => handleDeleteGroup(selectedGroup.id)} style={{ padding: '6px 10px', background: '#fff2f0', border: '1px solid #ffccc7', color: '#cf1322' }}>\n            Delete Group\n          </button>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ maxWidth: 900, margin: '24px auto', padding: '0 16px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1>Attribute Groups</h1>\n      {error && (\n        <div style={{ background: '#fff1f0', border: '1px solid #ffa39e', color: '#a8071a', padding: 12, borderRadius: 6, marginBottom: 12 }}>{error}</div>\n      )}\n      {loading && <div style={{ marginBottom: 12 }}>Loading…</div>}\n\n      <Section\n        title=\"Groups\"\n        actions={<GroupSelector />}\n      >\n        <form onSubmit={handleAddGroup} style={{ display: 'flex', gap: 8, alignItems: 'flex-end', flexWrap: 'wrap' }}>\n          <Field label=\"New group name\">\n            <input name=\"name\" placeholder=\"e.g. SEO\" required style={{ padding: 8, minWidth: 240 }} />\n          </Field>\n          <button type=\"submit\" style={{ padding: '8px 12px' }}>Add Group</button>\n        </form>\n        {selectedGroup && (\n          <div style={{ marginTop: 16 }}>\n            <Field label=\"Rename selected group\">\n              <input\n                defaultValue={selectedGroup.name}\n                onBlur={(e) => handleRenameGroup(selectedGroup.id, e.target.value)}\n                style={{ padding: 8, minWidth: 240 }}\n              />\n            </Field>\n          </div>\n        )}\n      </Section>\n\n      {selectedGroup && (\n        <Section title={`Attributes in \"+${selectedGroup.name}+\"`}>\n          <form onSubmit={handleAddAttribute} style={{ display: 'flex', gap: 8, alignItems: 'flex-end', flexWrap: 'wrap' }}>\n            <Field label=\"Name\">\n              <input name=\"name\" placeholder=\"e.g. SKU\" required style={{ padding: 8, minWidth: 200 }} />\n            </Field>\n            <Field label=\"Type\">\n              <select name=\"type\" defaultValue=\"text\" style={{ padding: 8 }}>\n                <option value=\"text\">Text</option>\n                <option value=\"number\">Number</option>\n                <option value=\"boolean\">Boolean</option>\n                <option value=\"select\">Select</option>\n              </select>\n            </Field>\n            <Field label=\"Unit (optional)\">\n              <input name=\"unit\" placeholder=\"e.g. cm\" style={{ padding: 8, width: 120 }} />\n            </Field>\n            <button type=\"submit\" style={{ padding: '8px 12px' }}>Add Attribute</button>\n          </form>\n\n          <div style={{ marginTop: 16 }}>\n            {selectedGroup.attributes.length === 0 ? (\n              <div style={{ color: '#888' }}>No attributes yet.</div>\n            ) : (\n              <div style={{ overflowX: 'auto' }}>\n                <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n                  <thead>\n                    <tr>\n                      <th style={{ textAlign: 'left', padding: 8, borderBottom: '1px solid #eee' }}>Name</th>\n                      <th style={{ textAlign: 'left', padding: 8, borderBottom: '1px solid #eee' }}>Type</th>\n                      <th style={{ textAlign: 'left', padding: 8, borderBottom: '1px solid #eee' }}>Unit</th>\n                      <th style={{ textAlign: 'right', padding: 8, borderBottom: '1px solid #eee' }}>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {selectedGroup.attributes.map((a) => (\n                      <tr key={a.id}>\n                        <td style={{ padding: 8 }}>\n                          <input\n                            defaultValue={a.name}\n                            onBlur={(e) => call('updateAttribute', { groupId: selectedGroup.id, attrId: a.id, patch: { name: e.target.value } }, 'PUT')}\n                            style={{ padding: 6, width: '100%' }}\n                          />\n                        </td>\n                        <td style={{ padding: 8 }}>\n                          <select\n                            defaultValue={a.type}\n                            onChange={(e) => call('updateAttribute', { groupId: selectedGroup.id, attrId: a.id, patch: { type: e.target.value } }, 'PUT')}\n                            style={{ padding: 6 }}\n                          >\n                            <option value=\"text\">Text</option>\n                            <option value=\"number\">Number</option>\n                            <option value=\"boolean\">Boolean</option>\n                            <option value=\"select\">Select</option>\n                          </select>\n                        </td>\n                        <td style={{ padding: 8 }}>\n                          <input\n                            defaultValue={a.unit || ''}\n                            onBlur={(e) => call('updateAttribute', { groupId: selectedGroup.id, attrId: a.id, patch: { unit: e.target.value || undefined } }, 'PUT')}\n                            placeholder=\"-\"\n                            style={{ padding: 6, width: 120 }}\n                          />\n                        </td>\n                        <td style={{ padding: 8, textAlign: 'right' }}>\n                          <button onClick={() => handleDeleteAttr(a.id)} style={{ padding: '6px 10px', background: '#fff2f0', border: '1px solid #ffccc7', color: '#cf1322' }}>Delete</button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n        </Section>\n      )}\n\n      <div style={{ marginTop: 24, color: '#888', fontSize: 12 }}>\n        Tip: This demo stores attributes in memory on the server. Deploying on serverless may reset data between cold starts.\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "__tests__/attributesStore.test.js",
      "content": "const assert = require('assert');\nconst store = require('../lib/data/attributesStore');\n\n// Minimal smoke tests for the in-memory attribute store\n(function run() {\n  const before = store.getSnapshot();\n  const g = store.addGroup('Test Group');\n  assert.ok(g.id && g.name === 'Test Group');\n\n  const attr = store.addAttribute(g.id, { name: 'Rating', type: 'number' });\n  assert.ok(attr.id && attr.type === 'number');\n\n  const updated = store.updateAttribute(g.id, attr.id, { unit: 'stars' });\n  assert.strictEqual(updated.unit, 'stars');\n\n  const renamed = store.renameGroup(g.id, 'Renamed Group');\n  assert.strictEqual(renamed.name, 'Renamed Group');\n\n  const delAttr = store.deleteAttribute(g.id, attr.id);\n  assert.strictEqual(delAttr.id, attr.id);\n\n  const delGroup = store.deleteGroup(g.id);\n  assert.strictEqual(delGroup.id, g.id);\n\n  const after = store.getSnapshot();\n  assert.ok(Array.isArray(after.groups));\n\n  // Ensure initial groups are still present\n  assert.ok(before.groups[0] && after.groups[0]);\n})();\n"
    }
  ]
}