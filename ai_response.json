{
  "files": [
    {
      "path": "lib/attributeGroupsCore.js",
      "content": "const DEFAULT_ATTRIBUTE_TYPES = [\"text\", \"number\", \"boolean\"];\n\nfunction generateId() {\n  return (\n    \"ag_\" + Date.now().toString(36) + \"_\" + Math.random().toString(36).slice(2, 8)\n  );\n}\n\nfunction clone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nfunction normalizeName(name) {\n  return (name || \"\").trim();\n}\n\nfunction ensureGroupExists(state, groupId) {\n  const idx = state.findIndex((g) => g.id === groupId);\n  if (idx === -1) {\n    throw new Error(\"Group not found: \" + groupId);\n  }\n  return idx;\n}\n\nfunction createGroup(state, { name }) {\n  const n = normalizeName(name);\n  if (!n) throw new Error(\"Group name is required\");\n  const next = clone(state);\n  next.push({ id: generateId(), name: n, attributes: [] });\n  return next;\n}\n\nfunction updateGroup(state, groupId, updates) {\n  const next = clone(state);\n  const idx = ensureGroupExists(next, groupId);\n  const g = next[idx];\n  const u = { ...updates };\n  if (u.name != null) {\n    const n = normalizeName(u.name);\n    if (!n) throw new Error(\"Group name is required\");\n    g.name = n;\n  }\n  return next;\n}\n\nfunction deleteGroup(state, groupId) {\n  const next = clone(state);\n  const idx = ensureGroupExists(next, groupId);\n  next.splice(idx, 1);\n  return next;\n}\n\nfunction _assertValidAttribute(attr) {\n  if (!attr || typeof attr !== \"object\") throw new Error(\"Attribute object required\");\n  const code = (attr.code || \"\").trim();\n  if (!code) throw new Error(\"Attribute code is required\");\n  const type = (attr.type || \"text\").trim();\n  if (!DEFAULT_ATTRIBUTE_TYPES.includes(type)) {\n    throw new Error(\"Invalid attribute type: \" + type);\n  }\n}\n\nfunction addAttribute(state, groupId, attr) {\n  _assertValidAttribute(attr);\n  const next = clone(state);\n  const idx = ensureGroupExists(next, groupId);\n  const g = next[idx];\n  const code = attr.code.trim();\n  if (g.attributes.some((a) => a.code === code)) {\n    throw new Error(\"Attribute code must be unique within a group: \" + code);\n  }\n  g.attributes.push({\n    code,\n    label: (attr.label || code).trim(),\n    type: (attr.type || \"text\").trim(),\n  });\n  return next;\n}\n\nfunction updateAttribute(state, groupId, code, updates) {\n  const next = clone(state);\n  const idx = ensureGroupExists(next, groupId);\n  const g = next[idx];\n  const aIdx = g.attributes.findIndex((a) => a.code === code);\n  if (aIdx === -1) throw new Error(\"Attribute not found: \" + code);\n  const a = g.attributes[aIdx];\n  if (updates.code != null) {\n    const newCode = (updates.code || \"\").trim();\n    if (!newCode) throw new Error(\"Attribute code is required\");\n    if (newCode !== code && g.attributes.some((x) => x.code === newCode)) {\n      throw new Error(\"Attribute code must be unique within a group: \" + newCode);\n    }\n    a.code = newCode;\n  }\n  if (updates.label != null) {\n    a.label = (updates.label || \"\").trim();\n  }\n  if (updates.type != null) {\n    const t = (updates.type || \"\").trim();\n    if (!DEFAULT_ATTRIBUTE_TYPES.includes(t)) {\n      throw new Error(\"Invalid attribute type: \" + t);\n    }\n    a.type = t;\n  }\n  return next;\n}\n\nfunction deleteAttribute(state, groupId, code) {\n  const next = clone(state);\n  const idx = ensureGroupExists(next, groupId);\n  const g = next[idx];\n  const aIdx = g.attributes.findIndex((a) => a.code === code);\n  if (aIdx === -1) throw new Error(\"Attribute not found: \" + code);\n  g.attributes.splice(aIdx, 1);\n  return next;\n}\n\nfunction validateGroup(group) {\n  const errors = [];\n  const name = normalizeName(group && group.name);\n  if (!name) errors.push(\"Name is required\");\n  const seen = new Set();\n  (group.attributes || []).forEach((a, i) => {\n    const code = (a.code || \"\").trim();\n    if (!code) errors.push(`Attribute #${i + 1}: code is required`);\n    if (seen.has(code)) errors.push(`Attribute #${i + 1}: duplicate code '${code}'`);\n    seen.add(code);\n    const type = (a.type || \"\").trim();\n    if (!DEFAULT_ATTRIBUTE_TYPES.includes(type)) {\n      errors.push(`Attribute #${i + 1}: invalid type '${type}'`);\n    }\n  });\n  return { valid: errors.length === 0, errors };\n}\n\nmodule.exports = {\n  DEFAULT_ATTRIBUTE_TYPES,\n  generateId,\n  createGroup,\n  updateGroup,\n  deleteGroup,\n  addAttribute,\n  updateAttribute,\n  deleteAttribute,\n  validateGroup,\n};\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import React, { useEffect, useMemo, useState } from \"react\";\nconst core = require(\"../../lib/attributeGroupsCore\");\n\nfunction useLocalStorageState(key, defaultValue) {\n  const [state, setState] = useState(defaultValue);\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    try {\n      const raw = window.localStorage.getItem(key);\n      if (raw) setState(JSON.parse(raw));\n    } catch {}\n  }, [key]);\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    try {\n      window.localStorage.setItem(key, JSON.stringify(state));\n    } catch {}\n  }, [key, state]);\n  return [state, setState];\n}\n\nfunction Input({ label, value, onChange, placeholder, style }) {\n  return (\n    <label style={{ display: \"block\", marginBottom: 8, ...style }}>\n      <span style={{ display: \"block\", fontSize: 12, color: \"#555\" }}>{label}</span>\n      <input\n        value={value}\n        placeholder={placeholder}\n        onChange={(e) => onChange(e.target.value)}\n        style={{ padding: 8, width: \"100%\", boxSizing: \"border-box\" }}\n      />\n    </label>\n  );\n}\n\nfunction Select({ label, value, onChange, options }) {\n  return (\n    <label style={{ display: \"block\", marginBottom: 8 }}>\n      <span style={{ display: \"block\", fontSize: 12, color: \"#555\" }}>{label}</span>\n      <select value={value} onChange={(e) => onChange(e.target.value)} style={{ padding: 8, width: \"100%\" }}>\n        {options.map((o) => (\n          <option key={o} value={o}>\n            {o}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n}\n\nexport default function AdminAttributeGroupsPage() {\n  const [groups, setGroups] = useLocalStorageState(\"attributeGroups\", []);\n  const [newGroupName, setNewGroupName] = useState(\"\");\n  const types = core.DEFAULT_ATTRIBUTE_TYPES;\n\n  const addGroup = () => {\n    try {\n      const next = core.createGroup(groups, { name: newGroupName });\n      setGroups(next);\n      setNewGroupName(\"\");\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const updateGroupName = (id, name) => {\n    try {\n      setGroups(core.updateGroup(groups, id, { name }));\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const removeGroup = (id) => {\n    if (!confirm(\"Delete this attribute group?\")) return;\n    try {\n      setGroups(core.deleteGroup(groups, id));\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const addAttr = (groupId, draft) => {\n    try {\n      setGroups(core.addAttribute(groups, groupId, draft));\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const updateAttr = (groupId, code, updates) => {\n    try {\n      setGroups(core.updateAttribute(groups, groupId, code, updates));\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  const removeAttr = (groupId, code) => {\n    if (!confirm(\"Delete this attribute?\")) return;\n    try {\n      setGroups(core.deleteAttribute(groups, groupId, code));\n    } catch (e) {\n      alert(e.message);\n    }\n  };\n\n  // Seed with an example group if empty (client-only)\n  useEffect(() => {\n    if (!groups || groups.length === 0) {\n      try {\n        const seeded = core.createGroup([], { name: \"Basics\" });\n        const withAttr = core.addAttribute(seeded, seeded[0].id, {\n          code: \"sku\",\n          label: \"SKU\",\n          type: \"text\",\n        });\n        setGroups(withAttr);\n      } catch {}\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div style={{ maxWidth: 960, margin: \"20px auto\", padding: 20, fontFamily: \"-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif\" }}>\n      <h1 style={{ marginBottom: 8 }}>Attribute Groups</h1>\n      <p style={{ color: \"#666\", marginTop: 0 }}>\n        Manage attribute groups and fields for your product information. Data is saved in your browser's localStorage.\n      </p>\n\n      <div style={{ border: \"1px solid #eee\", padding: 16, borderRadius: 8, marginBottom: 24 }}>\n        <h3 style={{ marginTop: 0 }}>Create Group</h3>\n        <div style={{ display: \"flex\", gap: 8 }}>\n          <input\n            value={newGroupName}\n            placeholder=\"Group name (e.g., Specifications)\"\n            onChange={(e) => setNewGroupName(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") addGroup();\n            }}\n            style={{ flex: 1, padding: 8 }}\n          />\n          <button onClick={addGroup} style={{ padding: \"8px 12px\" }}>\n            Add\n          </button>\n        </div>\n      </div>\n\n      {groups.map((g) => (\n        <GroupCard\n          key={g.id}\n          group={g}\n          types={types}\n          onRename={(name) => updateGroupName(g.id, name)}\n          onDelete={() => removeGroup(g.id)}\n          onAddAttr={(draft) => addAttr(g.id, draft)}\n          onUpdateAttr={(code, updates) => updateAttr(g.id, code, updates)}\n          onDeleteAttr={(code) => removeAttr(g.id, code)}\n        />\n      ))}\n\n      {groups.length === 0 && (\n        <div style={{ color: \"#777\" }}>No attribute groups yet. Create your first group above.</div>\n      )}\n    </div>\n  );\n}\n\nfunction GroupCard({ group, types, onRename, onDelete, onAddAttr, onUpdateAttr, onDeleteAttr }) {\n  const [name, setName] = useState(group.name);\n  useEffect(() => setName(group.name), [group.name]);\n\n  const [draftAttr, setDraftAttr] = useState({ code: \"\", label: \"\", type: types[0] });\n\n  const valid = useMemo(() => core.validateGroup(group), [group]);\n\n  return (\n    <div style={{ border: \"1px solid #ddd\", padding: 16, borderRadius: 8, marginBottom: 16 }}>\n      <div style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n        <input\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          style={{ flex: 1, padding: 8, fontWeight: 600 }}\n        />\n        <button onClick={() => onRename(name)} style={{ padding: \"8px 12px\" }}>Save</button>\n        <button onClick={onDelete} style={{ padding: \"8px 12px\", color: \"#a00\" }}>Delete</button>\n      </div>\n      {!valid.valid && (\n        <ul style={{ color: \"#a00\", marginTop: 8 }}>\n          {valid.errors.map((e, i) => (\n            <li key={i}>{e}</li>\n          ))}\n        </ul>\n      )}\n\n      <div style={{ marginTop: 16 }}>\n        <h4 style={{ margin: \"8px 0\" }}>Attributes</h4>\n        <table style={{ width: \"100%\", borderCollapse: \"collapse\" }}>\n          <thead>\n            <tr style={{ textAlign: \"left\", borderBottom: \"1px solid #eee\" }}>\n              <th style={{ padding: 8 }}>Code</th>\n              <th style={{ padding: 8 }}>Label</th>\n              <th style={{ padding: 8 }}>Type</th>\n              <th style={{ padding: 8, width: 120 }}>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {group.attributes.map((a) => (\n              <AttributeRow key={a.code} a={a} types={types} onUpdate={(u) => onUpdateAttr(a.code, u)} onDelete={() => onDeleteAttr(a.code)} />\n            ))}\n            {group.attributes.length === 0 && (\n              <tr>\n                <td colSpan={4} style={{ padding: 8, color: \"#777\" }}>\n                  No attributes yet.\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n\n        <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr 160px 120px\", gap: 8, marginTop: 12 }}>\n          <input\n            value={draftAttr.code}\n            placeholder=\"code\"\n            onChange={(e) => setDraftAttr({ ...draftAttr, code: e.target.value })}\n            style={{ padding: 8 }}\n          />\n          <input\n            value={draftAttr.label}\n            placeholder=\"label\"\n            onChange={(e) => setDraftAttr({ ...draftAttr, label: e.target.value })}\n            style={{ padding: 8 }}\n          />\n          <select\n            value={draftAttr.type}\n            onChange={(e) => setDraftAttr({ ...draftAttr, type: e.target.value })}\n            style={{ padding: 8 }}\n          >\n            {types.map((t) => (\n              <option key={t} value={t}>\n                {t}\n              </option>\n            ))}\n          </select>\n          <button\n            onClick={() => {\n              onAddAttr(draftAttr);\n              setDraftAttr({ code: \"\", label: \"\", type: types[0] });\n            }}\n            style={{ padding: \"8px 12px\" }}\n          >\n            Add attribute\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction AttributeRow({ a, types, onUpdate, onDelete }) {\n  const [code, setCode] = useState(a.code);\n  const [label, setLabel] = useState(a.label);\n  const [type, setType] = useState(a.type);\n\n  useEffect(() => setCode(a.code), [a.code]);\n  useEffect(() => setLabel(a.label), [a.label]);\n  useEffect(() => setType(a.type), [a.type]);\n\n  return (\n    <tr style={{ borderBottom: \"1px solid #f0f0f0\" }}>\n      <td style={{ padding: 8 }}>\n        <input value={code} onChange={(e) => setCode(e.target.value)} style={{ width: \"100%\", padding: 6 }} />\n      </td>\n      <td style={{ padding: 8 }}>\n        <input value={label} onChange={(e) => setLabel(e.target.value)} style={{ width: \"100%\", padding: 6 }} />\n      </td>\n      <td style={{ padding: 8 }}>\n        <select value={type} onChange={(e) => setType(e.target.value)} style={{ width: \"100%\", padding: 6 }}>\n          {types.map((t) => (\n            <option key={t} value={t}>\n              {t}\n            </option>\n          ))}\n        </select>\n      </td>\n      <td style={{ padding: 8 }}>\n        <div style={{ display: \"flex\", gap: 6 }}>\n          <button onClick={() => onUpdate({ code, label, type })} style={{ padding: \"6px 10px\" }}>\n            Update\n          </button>\n          <button onClick={onDelete} style={{ padding: \"6px 10px\", color: \"#a00\" }}>\n            Delete\n          </button>\n        </div>\n      </td>\n    </tr>\n  );\n}\n"
    },
    {
      "path": "tests/attributeGroupsCore.test.js",
      "content": "const assert = require(\"assert\");\nconst core = require(\"../lib/attributeGroupsCore\");\n\n(function run() {\n  let state = [];\n\n  // Create group\n  state = core.createGroup(state, { name: \"Specifications\" });\n  assert.strictEqual(state.length, 1, \"should have one group\");\n  const gid = state[0].id;\n  assert.ok(gid.startsWith(\"ag_\"), \"group id generated\");\n\n  // Add attribute\n  state = core.addAttribute(state, gid, { code: \"weight\", label: \"Weight\", type: \"number\" });\n  assert.strictEqual(state[0].attributes.length, 1, \"added one attribute\");\n\n  // Unique code enforcement\n  let dupErr = null;\n  try {\n    state = core.addAttribute(state, gid, { code: \"weight\", label: \"Weight again\", type: \"number\" });\n  } catch (e) {\n    dupErr = e;\n  }\n  assert.ok(dupErr instanceof Error, \"duplicate attribute code should throw\");\n\n  // Update attribute\n  state = core.updateAttribute(state, gid, \"weight\", { label: \"Net Weight\", type: \"number\" });\n  assert.strictEqual(state[0].attributes[0].label, \"Net Weight\", \"label updated\");\n\n  // Delete attribute\n  state = core.deleteAttribute(state, gid, \"weight\");\n  assert.strictEqual(state[0].attributes.length, 0, \"attribute deleted\");\n\n  // Rename group\n  state = core.updateGroup(state, gid, { name: \"Specs\" });\n  assert.strictEqual(state[0].name, \"Specs\", \"group renamed\");\n\n  // Delete group\n  state = core.deleteGroup(state, gid);\n  assert.strictEqual(state.length, 0, \"group deleted\");\n\n  console.log(\"attributeGroupsCore tests passed\");\n})();\n"
    }
  ]
}