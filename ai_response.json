{
  "files": [
    {
      "path": "lib/attributeGroupsStore.js",
      "content": "\"use strict\";\n\n// In-memory store for Attribute Groups\n// This is ephemeral and resets on cold starts. Suitable for demos and tests.\nlet groups = [];\n\nfunction nowISO() {\n  return new Date().toISOString();\n}\n\nfunction slugify(input) {\n  return String(input || \"\")\n    .toLowerCase()\n    .trim()\n    .replace(/[^a-z0-9]+/g, \"-\")\n    .replace(/(^-|-$)+/g, \"\");\n}\n\nfunction randomId() {\n  return (\n    Date.now().toString(36) + Math.random().toString(36).slice(2, 8)\n  ).toLowerCase();\n}\n\nfunction generateId(name) {\n  const base = slugify(name) || \"group\";\n  return `${base}-${randomId()}`;\n}\n\nfunction initDefaults() {\n  groups = [\n    {\n      id: \"basic-attributes-\" + randomId(),\n      name: \"Basic Attributes\",\n      attributes: [\n        { code: \"title\", label: \"Title\", type: \"text\" },\n        { code: \"description\", label: \"Description\", type: \"text\" },\n      ],\n      createdAt: nowISO(),\n      updatedAt: nowISO(),\n    },\n  ];\n}\n\n// Ensure defaults on first load\nif (groups.length === 0) initDefaults();\n\nfunction listGroups() {\n  return groups.slice();\n}\n\nfunction getGroup(id) {\n  return groups.find((g) => g.id === id) || null;\n}\n\nfunction normalizeAttributes(attrs) {\n  if (!Array.isArray(attrs)) return [];\n  return attrs\n    .map((a) => ({\n      code: String(a && a.code ? a.code : \"\").trim(),\n      label: String(a && a.label ? a.label : (a && a.code) || \"\").trim() || \"Attribute\",\n      type: String(a && a.type ? a.type : \"text\").trim() || \"text\",\n    }))\n    .filter((a) => a.code.length > 0);\n}\n\nfunction createGroup(data) {\n  const name = String(data && data.name ? data.name : \"\").trim();\n  if (!name) {\n    const err = new Error(\"name is required\");\n    err.statusCode = 400;\n    throw err;\n  }\n  const attributes = normalizeAttributes((data && data.attributes) || []);\n  const timestamp = nowISO();\n  const group = {\n    id: generateId(name),\n    name,\n    attributes,\n    createdAt: timestamp,\n    updatedAt: timestamp,\n  };\n  groups.push(group);\n  return group;\n}\n\nfunction updateGroup(id, data) {\n  const idx = groups.findIndex((g) => g.id === id);\n  if (idx === -1) {\n    const err = new Error(\"group not found\");\n    err.statusCode = 404;\n    throw err;\n  }\n  const current = groups[idx];\n  const next = { ...current };\n  if (data && typeof data.name === \"string\") {\n    const name = data.name.trim();\n    if (!name) {\n      const err = new Error(\"name cannot be empty\");\n      err.statusCode = 400;\n      throw err;\n    }\n    next.name = name;\n  }\n  if (data && Object.prototype.hasOwnProperty.call(data, \"attributes\")) {\n    next.attributes = normalizeAttributes(data.attributes);\n  }\n  next.updatedAt = nowISO();\n  groups[idx] = next;\n  return next;\n}\n\nfunction deleteGroup(id) {\n  const idx = groups.findIndex((g) => g.id === id);\n  if (idx === -1) return false;\n  groups.splice(idx, 1);\n  return true;\n}\n\nfunction resetForTests() {\n  initDefaults();\n}\n\nmodule.exports = {\n  listGroups,\n  getGroup,\n  createGroup,\n  updateGroup,\n  deleteGroup,\n  __reset: resetForTests,\n};\n"
    },
    {
      "path": "pages/api/attribute-groups/index.js",
      "content": "\"use strict\";\n\nconst store = require(\"../../../lib/attributeGroupsStore\");\n\nmodule.exports = async function handler(req, res) {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Cache-Control\", \"no-store\");\n\n  const { method } = req;\n\n  try {\n    if (method === \"GET\") {\n      const groups = store.listGroups();\n      res.statusCode = 200;\n      res.end(JSON.stringify({ items: groups, count: groups.length }));\n      return;\n    }\n\n    if (method === \"POST\") {\n      const body = req.body || {};\n      const created = store.createGroup(body);\n      res.statusCode = 201;\n      res.end(JSON.stringify(created));\n      return;\n    }\n\n    res.setHeader(\"Allow\", \"GET, POST\");\n    res.statusCode = 405;\n    res.end(JSON.stringify({ error: `Method ${method} Not Allowed` }));\n  } catch (err) {\n    const status = err && err.statusCode ? err.statusCode : 500;\n    res.statusCode = status;\n    res.end(JSON.stringify({ error: err.message || \"Internal Server Error\" }));\n  }\n};\n"
    },
    {
      "path": "pages/api/attribute-groups/[id].js",
      "content": "\"use strict\";\n\nconst store = require(\"../../../lib/attributeGroupsStore\");\n\nmodule.exports = async function handler(req, res) {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Cache-Control\", \"no-store\");\n\n  const {\n    query: { id },\n    method,\n  } = req;\n\n  try {\n    if (method === \"GET\") {\n      const group = store.getGroup(id);\n      if (!group) {\n        res.statusCode = 404;\n        res.end(JSON.stringify({ error: \"Not Found\" }));\n        return;\n      }\n      res.statusCode = 200;\n      res.end(JSON.stringify(group));\n      return;\n    }\n\n    if (method === \"PUT\" || method === \"PATCH\") {\n      const body = req.body || {};\n      const updated = store.updateGroup(id, body);\n      res.statusCode = 200;\n      res.end(JSON.stringify(updated));\n      return;\n    }\n\n    if (method === \"DELETE\") {\n      const ok = store.deleteGroup(id);\n      if (!ok) {\n        res.statusCode = 404;\n        res.end(JSON.stringify({ error: \"Not Found\" }));\n        return;\n      }\n      res.statusCode = 204;\n      res.end(\"\");\n      return;\n    }\n\n    res.setHeader(\"Allow\", \"GET, PUT, PATCH, DELETE\");\n    res.statusCode = 405;\n    res.end(JSON.stringify({ error: `Method ${method} Not Allowed` }));\n  } catch (err) {\n    const status = err && err.statusCode ? err.statusCode : 500;\n    res.statusCode = status;\n    res.end(JSON.stringify({ error: err.message || \"Internal Server Error\" }));\n  }\n};\n"
    },
    {
      "path": "tests/attribute-groups.test.js",
      "content": "\"use strict\";\n\nconst assert = require(\"assert\");\nconst store = require(\"../lib/attributeGroupsStore\");\n\n(function run() {\n  // reset to known state\n  store.__reset();\n\n  const startCount = store.listGroups().length;\n  assert.ok(startCount >= 1, \"should have at least one default group\");\n\n  // create\n  const created = store.createGroup({\n    name: \"Sizes\",\n    attributes: [\n      { code: \"size\", label: \"Size\", type: \"text\" },\n      { code: \"waist\", label: \"Waist\", type: \"number\" },\n    ],\n  });\n\n  assert.ok(created && created.id, \"created group should have id\");\n  assert.strictEqual(created.name, \"Sizes\");\n  assert.ok(Array.isArray(created.attributes) && created.attributes.length === 2);\n\n  // update\n  const updated = store.updateGroup(created.id, { name: \"Size & Fit\" });\n  assert.strictEqual(updated.name, \"Size & Fit\");\n  assert.ok(updated.updatedAt !== updated.createdAt);\n\n  // get\n  const fetched = store.getGroup(created.id);\n  assert.ok(fetched && fetched.id === created.id);\n\n  // delete\n  const deleted = store.deleteGroup(created.id);\n  assert.strictEqual(deleted, true);\n\n  const deletedAgain = store.deleteGroup(created.id);\n  assert.strictEqual(deletedAgain, false);\n\n  console.log(\"attribute-groups tests: OK\");\n})();\n"
    }
  ]
}