{
  "files": [
    {
      "path": "pages/api/attribute-groups.js",
      "content": "const fs = require('fs');\nconst path = require('path');\n\nconst dataFile = path.join(process.cwd(), 'data', 'attribute-groups.json');\nlet groupsCache = null;\n\nfunction defaultGroups() {\n  return [\n    { id: 'basic', name: 'Basic Info', attributes: ['name', 'sku', 'price'] },\n    { id: 'dimensions', name: 'Dimensions', attributes: ['width', 'height', 'depth', 'weight'] },\n  ];\n}\n\nfunction loadGroups() {\n  if (Array.isArray(groupsCache)) return groupsCache;\n  try {\n    const raw = fs.readFileSync(dataFile, 'utf8');\n    const parsed = JSON.parse(raw);\n    groupsCache = Array.isArray(parsed.groups) ? parsed.groups : defaultGroups();\n  } catch (e) {\n    groupsCache = defaultGroups();\n  }\n  return groupsCache;\n}\n\nfunction saveGroups(groups) {\n  try {\n    const dir = path.dirname(dataFile);\n    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });\n    fs.writeFileSync(dataFile, JSON.stringify({ groups }, null, 2), 'utf8');\n  } catch (e) {\n    // Ignore write errors (e.g., serverless readonly FS). Data still available in-memory.\n  }\n}\n\nmodule.exports = async function handler(req, res) {\n  const method = req.method || 'GET';\n\n  if (method === 'GET') {\n    const groups = loadGroups();\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'application/json');\n    res.end(JSON.stringify({ groups }));\n    return;\n  }\n\n  if (method === 'POST') {\n    let body = req.body;\n    if (typeof body === 'string') {\n      try { body = JSON.parse(body); } catch (e) { body = {}; }\n    }\n\n    const name = body && body.name ? String(body.name).trim() : '';\n    let attributes = body && body.attributes;\n\n    if (typeof attributes === 'string') {\n      attributes = attributes.split(',').map((s) => s.trim()).filter(Boolean);\n    }\n    if (!Array.isArray(attributes)) attributes = [];\n\n    if (!name) {\n      res.statusCode = 400;\n      res.setHeader('Content-Type', 'application/json');\n      res.end(JSON.stringify({ error: 'name is required' }));\n      return;\n    }\n\n    const groups = loadGroups();\n    const id = (body && body.id && String(body.id).trim()) || (Date.now().toString(36) + Math.random().toString(36).slice(2, 8));\n    const group = { id, name, attributes };\n    groups.push(group);\n    groupsCache = groups;\n    saveGroups(groups);\n\n    res.statusCode = 201;\n    res.setHeader('Content-Type', 'application/json');\n    res.end(JSON.stringify({ group }));\n    return;\n  }\n\n  res.setHeader('Allow', 'GET, POST');\n  res.statusCode = 405;\n  res.end('Method Not Allowed');\n};\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import React, { useEffect, useState } from 'react';\n\nexport default function AttributeGroupsAdmin() {\n  const [groups, setGroups] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [name, setName] = useState('');\n  const [attributes, setAttributes] = useState('');\n\n  async function load() {\n    setLoading(true);\n    setError('');\n    try {\n      const res = await fetch('/api/attribute-groups');\n      if (!res.ok) throw new Error('Failed to load attribute groups');\n      const data = await res.json();\n      setGroups(Array.isArray(data.groups) ? data.groups : []);\n    } catch (e) {\n      setError(e.message || 'Error');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  async function onAdd(e) {\n    e.preventDefault();\n    setError('');\n    const payload = {\n      name: name.trim(),\n      attributes: attributes,\n    };\n    if (!payload.name) {\n      setError('Name is required');\n      return;\n    }\n    try {\n      const res = await fetch('/api/attribute-groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n      if (!res.ok) {\n        const err = await res.json().catch(() => ({}));\n        throw new Error(err.error || 'Failed to create group');\n      }\n      const { group } = await res.json();\n      setGroups((prev) => [...prev, group]);\n      setName('');\n      setAttributes('');\n    } catch (e) {\n      setError(e.message || 'Error');\n    }\n  }\n\n  return (\n    <div style={{ padding: '20px', maxWidth: 900, margin: '0 auto', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1>Attribute Groups</h1>\n\n      <div style={{ margin: '10px 0 20px 0' }}>\n        <button onClick={load} disabled={loading} style={{ padding: '6px 12px', cursor: 'pointer' }}>Refresh</button>\n      </div>\n\n      {error ? (\n        <div style={{ color: '#b00020', marginBottom: 12 }}>{error}</div>\n      ) : null}\n\n      <form onSubmit={onAdd} style={{ border: '1px solid #eee', padding: 12, borderRadius: 6, marginBottom: 24 }}>\n        <h2 style={{ marginTop: 0 }}>Add New Group</h2>\n        <div style={{ display: 'flex', gap: 12, flexWrap: 'wrap' }}>\n          <label style={{ flex: '1 1 240px' }}>\n            <div style={{ fontSize: 12, color: '#555' }}>Name</div>\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"e.g., SEO\"\n              style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}\n            />\n          </label>\n          <label style={{ flex: '2 1 320px' }}>\n            <div style={{ fontSize: 12, color: '#555' }}>Attributes (comma-separated)</div>\n            <input\n              type=\"text\"\n              value={attributes}\n              onChange={(e) => setAttributes(e.target.value)}\n              placeholder=\"e.g., meta_title, meta_description\"\n              style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}\n            />\n          </label>\n          <div style={{ alignSelf: 'flex-end' }}>\n            <button type=\"submit\" style={{ padding: '8px 14px', cursor: 'pointer' }}>Add</button>\n          </div>\n        </div>\n      </form>\n\n      <div style={{ overflowX: 'auto' }}>\n        <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n          <thead>\n            <tr>\n              <th style={{ textAlign: 'left', borderBottom: '1px solid #ddd', padding: '8px' }}>ID</th>\n              <th style={{ textAlign: 'left', borderBottom: '1px solid #ddd', padding: '8px' }}>Name</th>\n              <th style={{ textAlign: 'left', borderBottom: '1px solid #ddd', padding: '8px' }}>Attributes</th>\n              <th style={{ textAlign: 'right', borderBottom: '1px solid #ddd', padding: '8px' }}>Count</th>\n            </tr>\n          </thead>\n          <tbody>\n            {loading ? (\n              <tr><td colSpan={4} style={{ padding: 12 }}>Loadingâ€¦</td></tr>\n            ) : groups.length === 0 ? (\n              <tr><td colSpan={4} style={{ padding: 12 }}>No attribute groups yet.</td></tr>\n            ) : (\n              groups.map((g) => (\n                <tr key={g.id}>\n                  <td style={{ borderBottom: '1px solid #f0f0f0', padding: '8px' }}>{g.id}</td>\n                  <td style={{ borderBottom: '1px solid #f0f0f0', padding: '8px' }}>{g.name}</td>\n                  <td style={{ borderBottom: '1px solid #f0f0f0', padding: '8px', color: '#333' }}>\n                    {(g.attributes || []).join(', ')}\n                  </td>\n                  <td style={{ borderBottom: '1px solid #f0f0f0', padding: '8px', textAlign: 'right' }}>{(g.attributes || []).length}</td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      <p style={{ color: '#777', fontSize: 12, marginTop: 16 }}>\n        Tip: POSTs will be persisted to disk when possible during local development. On serverless, they may be kept in memory only.\n      </p>\n    </div>\n  );\n}\n"
    },
    {
      "path": "data/attribute-groups.json",
      "content": "{\n  \"groups\": [\n    { \"id\": \"basic\", \"name\": \"Basic Info\", \"attributes\": [\"name\", \"sku\", \"price\"] },\n    { \"id\": \"dimensions\", \"name\": \"Dimensions\", \"attributes\": [\"width\", \"height\", \"depth\", \"weight\"] }\n  ]\n}\n"
    },
    {
      "path": "tests/attribute-groups.test.js",
      "content": "const assert = require('assert');\nconst path = require('path');\n\nconst handler = require(path.join('..', 'pages', 'api', 'attribute-groups.js'));\n\nfunction runApi(method, body) {\n  return new Promise((resolve) => {\n    const req = { method, body };\n    const res = {\n      statusCode: 200,\n      headers: {},\n      setHeader(key, value) { this.headers[key] = value; },\n      end(payload) {\n        this.payload = payload;\n        resolve(this);\n      },\n    };\n    Promise.resolve(handler(req, res)).catch((e) => {\n      res.statusCode = 500;\n      res.payload = JSON.stringify({ error: e && e.message ? e.message : String(e) });\n      resolve(res);\n    });\n  }).then((res) => {\n    let json = null;\n    try { json = JSON.parse(res.payload); } catch (e) { json = null; }\n    return { statusCode: res.statusCode, json, headers: res.headers };\n  });\n}\n\n(async () => {\n  // Test GET returns an array of groups\n  const get1 = await runApi('GET');\n  assert.strictEqual(get1.statusCode, 200, 'GET should return 200');\n  assert.ok(get1.json && Array.isArray(get1.json.groups), 'GET should return { groups: [] }');\n\n  // Test POST creates a new group and subsequent GET includes it (in-memory)\n  const uniqueName = 'Test Group ' + Date.now();\n  const post = await runApi('POST', { name: uniqueName, attributes: 'a,b,c' });\n  assert.strictEqual(post.statusCode, 201, 'POST should return 201');\n  assert.ok(post.json && post.json.group && post.json.group.name === uniqueName, 'POST should return created group');\n\n  const get2 = await runApi('GET');\n  const names = (get2.json.groups || []).map((g) => g.name);\n  assert.ok(names.includes(uniqueName), 'GET after POST should include the new group');\n\n  // Basic output for manual runs\n  // eslint-disable-next-line no-console\n  console.log('attribute-groups.test.js OK');\n})().catch((e) => {\n  // eslint-disable-next-line no-console\n  console.error(e);\n  process.exit(1);\n});\n"
    }
  ]
}