{
  "files": [
    {
      "path": "lib/variants.js",
      "content": "const slugify = require('./slugify');\n\nfunction toOptionSlug(value) {\n  return slugify(String(value || '').trim());\n}\n\nfunction cartesian(axes) {\n  // axes: [{ code, label, options: [..] }]\n  if (!Array.isArray(axes) || axes.length === 0) return [[]];\n  const [first, ...rest] = axes;\n  const tail = cartesian(rest);\n  const combos = [];\n  for (const opt of first.options || []) {\n    for (const t of tail) {\n      combos.push([{ axis: first, value: opt }, ...t]);\n    }\n  }\n  return combos;\n}\n\nfunction generateVariants(axes, opts = {}) {\n  const baseSku = String(opts.baseSku || '').trim();\n  const baseName = String(opts.baseName || '').trim();\n  const safeAxes = (axes || []).filter(\n    (a) => a && a.code && Array.isArray(a.options) && a.options.length > 0\n  );\n  const rows = cartesian(safeAxes);\n  const variants = rows.map((row) => {\n    const optionsMap = {};\n    const parts = [];\n    const nameParts = [];\n    for (const { axis, value } of row) {\n      optionsMap[axis.code] = value;\n      parts.push(toOptionSlug(value).toUpperCase());\n      nameParts.push(String(value));\n    }\n    const sku = [baseSku, ...parts.filter(Boolean)].filter(Boolean).join('-');\n    const name = [baseName, nameParts.join(' / ').trim()].filter(Boolean).join(' - ');\n    return { sku, name, options: optionsMap };\n  });\n  return { count: variants.length, variants };\n}\n\nfunction summarizeOptions(optionsMap, axes = []) {\n  if (!optionsMap) return '';\n  const byCode = {};\n  for (const a of axes) byCode[a.code] = a;\n  const pairs = Object.keys(optionsMap).map((code) => {\n    const label = (byCode[code] && byCode[code].label) || code;\n    return `${label}: ${optionsMap[code]}`;\n  });\n  return pairs.join(' / ');\n}\n\nmodule.exports = { cartesian, generateVariants, summarizeOptions };\n"
    },
    {
      "path": "pages/admin/variant-generator.js",
      "content": "import React, { useEffect, useMemo, useState } from 'react';\nconst variantsLib = require('../../lib/variants');\n\nfunction useSelectAttributes() {\n  const [attributes, setAttributes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    let alive = true;\n    async function load() {\n      try {\n        setLoading(true);\n        setError('');\n        const res = await fetch('/api/attributes');\n        if (!res.ok) throw new Error('Failed to load attributes');\n        const data = await res.json();\n        const groups = Array.isArray(data.groups) ? data.groups : [];\n        const flat = [];\n        for (const g of groups) {\n          for (const a of g.attributes || []) {\n            if (a && a.type === 'select' && Array.isArray(a.options) && a.options.length > 0) {\n              flat.push({\n                code: a.code,\n                label: a.label || a.code,\n                options: a.options,\n                groupId: g.id,\n                groupName: g.name || g.id,\n              });\n            }\n          }\n        }\n        if (!alive) return;\n        setAttributes(flat);\n      } catch (e) {\n        if (!alive) return;\n        setError(e.message || 'Failed to load');\n      } finally {\n        if (alive) setLoading(false);\n      }\n    }\n    load();\n    return () => {\n      alive = false;\n    };\n  }, []);\n\n  return { attributes, loading, error };\n}\n\nexport default function VariantGeneratorPage() {\n  const { attributes, loading, error } = useSelectAttributes();\n  const [selectedCodes, setSelectedCodes] = useState([]);\n  const [baseSku, setBaseSku] = useState('SKU-BASE');\n  const [baseName, setBaseName] = useState('Sample Product');\n\n  const axes = useMemo(() => {\n    const byCode = {};\n    for (const a of attributes) byCode[a.code] = a;\n    return selectedCodes.map((c) => byCode[c]).filter(Boolean);\n  }, [attributes, selectedCodes]);\n\n  const { variants, count } = useMemo(() => {\n    return variantsLib.generateVariants(axes, { baseSku, baseName });\n  }, [axes, baseSku, baseName]);\n\n  function toggle(code) {\n    setSelectedCodes((prev) =>\n      prev.includes(code) ? prev.filter((c) => c !== code) : [...prev, code]\n    );\n  }\n\n  return (\n    <div style={{ maxWidth: 1200, margin: '0 auto', padding: 24, fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1 style={{ margin: 0, fontSize: 26 }}>Variant Generator</h1>\n      <p style={{ color: '#555' }}>Create variant combinations from select attributes.</p>\n\n      <div style={{ display: 'grid', gap: 12, marginTop: 12 }}>\n        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>\n          <div>\n            <label style={{ display: 'block', fontWeight: 600, marginBottom: 6 }}>Base SKU</label>\n            <input value={baseSku} onChange={(e) => setBaseSku(e.target.value)} style={{ width: '100%', padding: 8, border: '1px solid #d1d5db', borderRadius: 6 }} />\n          </div>\n          <div>\n            <label style={{ display: 'block', fontWeight: 600, marginBottom: 6 }}>Base Name</label>\n            <input value={baseName} onChange={(e) => setBaseName(e.target.value)} style={{ width: '100%', padding: 8, border: '1px solid #d1d5db', borderRadius: 6 }} />\n          </div>\n        </div>\n\n        <div>\n          <div style={{ fontWeight: 600, marginBottom: 6 }}>Select Axes</div>\n          {loading && <div>Loading attributes…</div>}\n          {error && <div style={{ color: '#b91c1c' }}>{error}</div>}\n          {!loading && attributes.length === 0 && <div>No selectable attributes found.</div>}\n          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(260px, 1fr))', gap: 8 }}>\n            {attributes.map((a) => (\n              <label key={a.code} style={{ display: 'flex', alignItems: 'center', gap: 8, padding: 8, border: '1px solid #e5e7eb', borderRadius: 8 }}>\n                <input type=\"checkbox\" checked={selectedCodes.includes(a.code)} onChange={() => toggle(a.code)} />\n                <div>\n                  <div style={{ fontWeight: 600 }}>{a.label}</div>\n                  <div style={{ color: '#6b7280', fontSize: 12 }}>{a.groupName} • {a.options.length} options</div>\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n\n        <div style={{ marginTop: 12 }}>\n          <div style={{ fontWeight: 600 }}>Preview ({count} variants)</div>\n          <div style={{ overflowX: 'auto', marginTop: 8 }}>\n            <table style={{ borderCollapse: 'collapse', width: '100%' }}>\n              <thead>\n                <tr>\n                  <th style={{ textAlign: 'left', borderBottom: '1px solid #e5e7eb', padding: '8px 6px' }}>SKU</th>\n                  <th style={{ textAlign: 'left', borderBottom: '1px solid #e5e7eb', padding: '8px 6px' }}>Name</th>\n                  <th style={{ textAlign: 'left', borderBottom: '1px solid #e5e7eb', padding: '8px 6px' }}>Options</th>\n                </tr>\n              </thead>\n              <tbody>\n                {variants.slice(0, 20).map((v, i) => (\n                  <tr key={i}>\n                    <td style={{ borderBottom: '1px solid #f3f4f6', padding: '8px 6px', whiteSpace: 'nowrap' }}>{v.sku}</td>\n                    <td style={{ borderBottom: '1px solid #f3f4f6', padding: '8px 6px' }}>{v.name}</td>\n                    <td style={{ borderBottom: '1px solid #f3f4f6', padding: '8px 6px', color: '#374151' }}>{variantsLib.summarizeOptions(v.options, axes)}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          {count > 20 && (\n            <div style={{ marginTop: 6, color: '#6b7280' }}>Showing first 20 of {count} variants…</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/variants.test.js",
      "content": "const { cartesian, generateVariants } = require('../lib/variants');\n\ndescribe('variants generation', () => {\n  test('cartesian with empty axes yields one empty combination', () => {\n    const combos = cartesian([]);\n    expect(Array.isArray(combos)).toBe(true);\n    expect(combos.length).toBe(1);\n    expect(combos[0]).toEqual([]);\n  });\n\n  test('generateVariants from two axes', () => {\n    const axes = [\n      { code: 'color', label: 'Color', options: ['Red', 'Blue'] },\n      { code: 'size', label: 'Size', options: ['S', 'M', 'L'] },\n    ];\n    const { count, variants } = generateVariants(axes, { baseSku: 'TSHIRT', baseName: 'T-Shirt' });\n    expect(count).toBe(6);\n    expect(variants.length).toBe(6);\n\n    const sample = variants[0];\n    expect(sample).toHaveProperty('sku');\n    expect(sample).toHaveProperty('name');\n    expect(sample).toHaveProperty('options');\n\n    // SKU contains base and option slugs\n    expect(sample.sku.startsWith('TSHIRT')).toBe(true);\n\n    // Options map has codes\n    expect(Object.keys(sample.options)).toEqual(expect.arrayContaining(['color', 'size']));\n  });\n});\n"
    },
    {
      "path": "commit_message",
      "content": "feat(variants): add variant generator utility and admin tool page with preview; include unit test for cartesian and variant generation"
    }
  ]
}