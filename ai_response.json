{
  "commit_message": "feat: add sample products generator and tests for realistic sample product data",
  "files": [
    {
      "path": "lib/sampleProductsGenerator.js",
      "content": "/*\n * Generate realistic-looking sample products for admin / demo use.\n * This module is intentionally standalone to avoid touching existing sample-data\n * files and to provide a lightweight, testable generator used by admin UIs.\n */\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction randomChoice(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nfunction slugifyName(name) {\n  return (\n    name\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, '-')\n      .replace(/^-+|-+$/g, '') ||\n    Math.random().toString(36).slice(2, 8)\n  ).toUpperCase();\n}\n\nfunction generateBaseName() {\n  const adjectives = [\n    'Classic',\n    'Modern',\n    'Portable',\n    'Premium',\n    'Compact',\n    'Deluxe',\n    'Eco',\n    'Smart',\n    'Elite',\n  ];\n  const nouns = [\n    'Speaker',\n    'Mug',\n    'Backpack',\n    'Chair',\n    'Headphones',\n    'Lamp',\n    'Watch',\n    'Bottle',\n    'Camera',\n  ];\n  return `${randomChoice(adjectives)} ${randomChoice(nouns)}`;\n}\n\nfunction formatPrice(cents) {\n  return Number((cents / 100).toFixed(2));\n}\n\nfunction generateSkuFromName(name, idx) {\n  const base = slugifyName(name).slice(0, 10);\n  const suffix = String(idx + 1).padStart(3, '0');\n  // Add a short random part for better uniqueness across runs\n  const rand = Math.random().toString(36).slice(2, 5).toUpperCase();\n  return `${base}-${suffix}-${rand}`;\n}\n\nfunction sampleTags() {\n  const pool = ['new', 'sale', 'popular', 'eco', 'limited', 'home', 'office', 'outdoor'];\n  const count = randomInt(0, 3);\n  const selected = new Set();\n  while (selected.size < count) selected.add(randomChoice(pool));\n  return Array.from(selected);\n}\n\nfunction sampleAttributes() {\n  const colors = ['Red', 'Blue', 'Green', 'Black', 'White', 'Yellow'];\n  const sizes = ['S', 'M', 'L', 'XL'];\n  return {\n    color: randomChoice(colors),\n    size: randomChoice(sizes),\n  };\n}\n\nfunction generateSampleProducts(count = 10) {\n  if (typeof count !== 'number' || count < 1) count = 10;\n  const products = [];\n\n  for (let i = 0; i < count; i++) {\n    const name = generateBaseName();\n    const sku = generateSkuFromName(name, i);\n    const priceCents = randomInt(999, 19999); // $9.99 - $199.99\n\n    const product = {\n      sku,\n      name,\n      description: `${name} — a well-crafted product suitable for everyday use.`,\n      price: formatPrice(priceCents),\n      currency: 'USD',\n      tags: sampleTags(),\n      inStock: Math.random() > 0.15,\n      images: [\n        // Use picsum.photos with a stable seed based on sku so same run gets same image\n        `https://picsum.photos/seed/${encodeURIComponent(sku)}/640/480`,\n      ],\n      attributes: sampleAttributes(),\n      variants: [],\n    };\n\n    // Add 0-3 variants based on attributes (size/color combos)\n    const variantsCount = randomInt(0, 3);\n    for (let v = 0; v < variantsCount; v++) {\n      const variantSku = `${sku}-V${String(v + 1).padStart(2, '0')}`;\n      product.variants.push({\n        sku: variantSku,\n        name: `${name} — Variant ${v + 1}`,\n        price: formatPrice(priceCents + randomInt(-200, 1500)),\n        attributes: {\n          color: randomChoice(['Red', 'Blue', 'Black', 'White']),\n          size: randomChoice(['S', 'M', 'L', 'XL']),\n        },\n        inStock: Math.random() > 0.25,\n      });\n    }\n\n    products.push(product);\n  }\n\n  return products;\n}\n\nmodule.exports = { generateSampleProducts };\n"
    },
    {
      "path": "tests/sampleProductsGenerator.test.js",
      "content": "const { generateSampleProducts } = require('../lib/sampleProductsGenerator');\n\ndescribe('generateSampleProducts', () => {\n  test('generates requested number of products with expected structure', () => {\n    const products = generateSampleProducts(5);\n    expect(Array.isArray(products)).toBe(true);\n    expect(products).toHaveLength(5);\n\n    const skus = new Set();\n    products.forEach((p) => {\n      expect(p).toHaveProperty('sku');\n      expect(typeof p.sku).toBe('string');\n      expect(p.sku.length).toBeGreaterThan(0);\n\n      expect(p).toHaveProperty('name');\n      expect(typeof p.name).toBe('string');\n\n      expect(p).toHaveProperty('price');\n      expect(typeof p.price).toBe('number');\n      expect(p.price).toBeGreaterThan(0);\n\n      expect(p).toHaveProperty('inStock');\n      expect(typeof p.inStock).toBe('boolean');\n\n      expect(p).toHaveProperty('images');\n      expect(Array.isArray(p.images)).toBe(true);\n      if (p.images.length > 0) {\n        expect(typeof p.images[0]).toBe('string');\n        expect(p.images[0]).toMatch(/^https?:\\/\\//);\n      }\n\n      expect(p).toHaveProperty('attributes');\n      expect(typeof p.attributes).toBe('object');\n\n      // skus should be unique\n      expect(skus.has(p.sku)).toBe(false);\n      skus.add(p.sku);\n\n      // Validate variant structure when present\n      if (p.variants && p.variants.length > 0) {\n        p.variants.forEach((v) => {\n          expect(v).toHaveProperty('sku');\n          expect(v).toHaveProperty('price');\n          expect(typeof v.price).toBe('number');\n        });\n      }\n    });\n  });\n\n  test('defaults to 10 products when given invalid count', () => {\n    const products = generateSampleProducts('invalid');\n    expect(Array.isArray(products)).toBe(true);\n    expect(products).toHaveLength(10);\n  });\n});\n"
    }
  ]
}