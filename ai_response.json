{
  "files": [
    {
      "path": "data/attributes.json",
      "content": "{\n  \"attributes\": [\n    {\n      \"code\": \"color\",\n      \"label\": \"Color\",\n      \"type\": \"select\",\n      \"group\": \"Basics\",\n      \"options\": [\"Red\", \"Blue\", \"Green\"]\n    },\n    {\n      \"code\": \"size\",\n      \"label\": \"Size\",\n      \"type\": \"text\",\n      \"group\": \"Basics\"\n    },\n    {\n      \"code\": \"material\",\n      \"label\": \"Material\",\n      \"type\": \"text\",\n      \"group\": \"Details\"\n    }\n  ]\n}\n"
    },
    {
      "path": "lib/attributes.js",
      "content": "const fs = require('fs');\nconst path = require('path');\n\nfunction getDataPath() {\n  return path.join(process.cwd(), 'data', 'attributes.json');\n}\n\nfunction loadAttributes() {\n  const p = getDataPath();\n  const jsonStr = fs.readFileSync(p, 'utf8');\n  const data = JSON.parse(jsonStr);\n  return data.attributes || [];\n}\n\nfunction groupByGroupName(attrs) {\n  return (attrs || []).reduce((acc, a) => {\n    const g = a.group || 'Ungrouped';\n    if (!acc[g]) acc[g] = [];\n    acc[g].push(a);\n    return acc;\n  }, {});\n}\n\nmodule.exports = { loadAttributes, groupByGroupName };\n"
    },
    {
      "path": "pages/api/attributes.js",
      "content": "const { loadAttributes } = require('../../lib/attributes');\n\nexport default function handler(req, res) {\n  if (req.method !== 'GET') {\n    res.setHeader('Allow', ['GET']);\n    return res.status(405).json({ error: 'Method Not Allowed' });\n  }\n  try {\n    const attrs = loadAttributes();\n    return res.status(200).json({ attributes: attrs });\n  } catch (e) {\n    return res.status(500).json({ error: 'Failed to load attributes' });\n  }\n}\n"
    },
    {
      "path": "pages/admin/attributes.js",
      "content": "import React, { useEffect, useMemo, useState } from 'react';\n\nfunction groupBy(arr, keyFn) {\n  return (arr || []).reduce((acc, item) => {\n    const k = keyFn(item);\n    if (!acc[k]) acc[k] = [];\n    acc[k].push(item);\n    return acc;\n  }, {});\n}\n\nexport default function AdminAttributes() {\n  const [attributes, setAttributes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const [draft, setDraft] = useState({ code: '', label: '', type: 'text', group: '' });\n\n  useEffect(() => {\n    let cancelled = false;\n    async function load() {\n      setLoading(true);\n      setError(null);\n      try {\n        const res = await fetch('/api/attributes');\n        if (!res.ok) throw new Error('Failed to load attributes');\n        const data = await res.json();\n        if (!cancelled) setAttributes(Array.isArray(data.attributes) ? data.attributes : []);\n      } catch (e) {\n        if (!cancelled) setError(e.message || 'Error loading attributes');\n      } finally {\n        if (!cancelled) setLoading(false);\n      }\n    }\n    load();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  const grouped = useMemo(() => groupBy(attributes, a => a.group || 'Ungrouped'), [attributes]);\n\n  function onDraftChange(e) {\n    const { name, value } = e.target;\n    setDraft(prev => ({ ...prev, [name]: value }));\n  }\n\n  function addDraftAttribute(e) {\n    e.preventDefault();\n    // client-side only; not persisted on server\n    if (!draft.code || !draft.label) return;\n    const exists = attributes.some(a => a.code === draft.code);\n    if (exists) {\n      alert('Attribute code must be unique');\n      return;\n    }\n    setAttributes(prev => [...prev, { ...draft }]);\n    setDraft({ code: '', label: '', type: 'text', group: '' });\n  }\n\n  return (\n    <div style={{ padding: '24px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1 style={{ marginBottom: 0 }}>Attribute Manager</h1>\n      <p style={{ color: '#666', marginTop: 4 }}>Manage basic product attributes and groups. Changes made here are not persisted (demo).</p>\n\n      <section style={{ margin: '16px 0', padding: 12, border: '1px solid #eee', borderRadius: 6 }}>\n        <h2 style={{ fontSize: 18, marginTop: 0 }}>Add Attribute (local only)</h2>\n        <form onSubmit={addDraftAttribute} style={{ display: 'grid', gridTemplateColumns: 'repeat(4, minmax(160px, 1fr))', gap: 12 }}>\n          <label style={{ display: 'grid', gap: 6 }}>\n            <span style={{ fontSize: 12, color: '#555' }}>Code</span>\n            <input name=\"code\" value={draft.code} onChange={onDraftChange} placeholder=\"e.g. sku\" required style={{ padding: 8, border: '1px solid #ddd', borderRadius: 4 }} />\n          </label>\n          <label style={{ display: 'grid', gap: 6 }}>\n            <span style={{ fontSize: 12, color: '#555' }}>Label</span>\n            <input name=\"label\" value={draft.label} onChange={onDraftChange} placeholder=\"e.g. SKU\" required style={{ padding: 8, border: '1px solid #ddd', borderRadius: 4 }} />\n          </label>\n          <label style={{ display: 'grid', gap: 6 }}>\n            <span style={{ fontSize: 12, color: '#555' }}>Type</span>\n            <select name=\"type\" value={draft.type} onChange={onDraftChange} style={{ padding: 8, border: '1px solid #ddd', borderRadius: 4 }}>\n              <option value=\"text\">Text</option>\n              <option value=\"select\">Select</option>\n              <option value=\"number\">Number</option>\n              <option value=\"boolean\">Boolean</option>\n            </select>\n          </label>\n          <label style={{ display: 'grid', gap: 6 }}>\n            <span style={{ fontSize: 12, color: '#555' }}>Group</span>\n            <input name=\"group\" value={draft.group} onChange={onDraftChange} placeholder=\"e.g. Basics\" style={{ padding: 8, border: '1px solid #ddd', borderRadius: 4 }} />\n          </label>\n          <div style={{ gridColumn: '1 / -1', display: 'flex', alignItems: 'center', gap: 12 }}>\n            <button type=\"submit\" style={{ padding: '8px 12px', background: '#111827', color: 'white', border: 0, borderRadius: 4, cursor: 'pointer' }}>Add</button>\n            <span style={{ fontSize: 12, color: '#888' }}>Note: demo only. This does not save to the server.</span>\n          </div>\n        </form>\n      </section>\n\n      <section>\n        <h2 style={{ fontSize: 18, marginTop: 0 }}>Attributes</h2>\n        {loading && <p>Loading…</p>}\n        {error && <p style={{ color: 'crimson' }}>{error}</p>}\n        {!loading && !error && Object.keys(grouped).length === 0 && <p>No attributes found.</p>}\n        {!loading && !error && Object.entries(grouped).map(([group, items]) => (\n          <div key={group} style={{ marginBottom: 16 }}>\n            <h3 style={{ fontSize: 16, marginBottom: 8 }}>{group} <span style={{ color: '#888', fontWeight: 400 }}>({items.length})</span></h3>\n            <div style={{ border: '1px solid #eee', borderRadius: 6 }}>\n              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 1fr', padding: '8px 12px', background: '#fafafa', color: '#555', fontSize: 12 }}>\n                <div>Code</div>\n                <div>Label</div>\n                <div>Type</div>\n                <div>Options</div>\n              </div>\n              {items.map(attr => (\n                <div key={attr.code} style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 1fr', padding: '10px 12px', borderTop: '1px solid #f0f0f0' }}>\n                  <div style={{ fontFamily: 'ui-monospace, SFMono-Regular, Menlo, monospace' }}>{attr.code}</div>\n                  <div>{attr.label}</div>\n                  <div>{attr.type}</div>\n                  <div style={{ color: '#666' }}>{Array.isArray(attr.options) ? attr.options.join(', ') : '—'}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </section>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/attributes.test.js",
      "content": "const assert = require('assert');\nconst { groupByGroupName } = require('../lib/attributes');\n\n// Small unit test for attribute grouping utility\nconst sample = [\n  { code: 'a', group: 'G1' },\n  { code: 'b', group: 'G1' },\n  { code: 'c', group: 'G2' },\n  { code: 'd' }\n];\n\nconst grouped = groupByGroupName(sample);\n\nassert.strictEqual(Object.keys(grouped).length, 3, 'should create three groups including Ungrouped');\nassert.strictEqual(grouped['G1'].length, 2, 'G1 should have two items');\nassert.strictEqual(grouped['G2'].length, 1, 'G2 should have one item');\nassert.strictEqual(grouped['Ungrouped'].length, 1, 'Ungrouped should have one item');\n\nconsole.log('attributes.test.js OK');\n"
    }
  ]
}