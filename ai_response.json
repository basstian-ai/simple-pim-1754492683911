{
  "commit_message": "Feature: Add AI Product Name Suggestion API and UI page with tests",
  "diff": "--- a/pages/api/ai/name-suggest.js\n+++ b/pages/api/ai/name-suggest.js\n@@\n+// AI Name Suggest API\n+// Supports GET (?q or ?input, ?n or ?count) and POST ({ input/q, count/n })\n+export default async function handler(req, res) {\n+  try {\n+    let input = '';\n+    let count = 5;\n+\n+    if (req.method === 'POST') {\n+      const body = req.body || {};\n+      input = (body.input || body.q || '').toString();\n+      if (body.count != null) count = Number(body.count);\n+      else if (body.n != null) count = Number(body.n);\n+    } else {\n+      const q = req.query || {};\n+      input = (q.input || q.q || '').toString();\n+      if (q.count != null) count = Number(q.count);\n+      else if (q.n != null) count = Number(q.n);\n+    }\n+\n+    if (!Number.isFinite(count) || count <= 0) count = 5;\n+    count = Math.min(Math.max(1, Math.floor(count)), 20);\n+\n+    const mod = require('../../../lib/generateNameSuggestions');\n+    const generate = typeof mod === 'function' ? mod : (mod && (mod.default || mod.generateNameSuggestions));\n+    const suggestions = generate ? generate(input || '', { count }) : [];\n+\n+    res.status(200).json(Array.isArray(suggestions) ? suggestions.slice(0, count) : []);\n+  } catch (err) {\n+    res.status(500).json({ error: 'name_suggest_failed' });\n+  }\n+}\n+\n",
  "files": [
    {
      "path": "pages/tools/name-suggest.js",
      "content": "import React, { useState } from 'react';\n\nconst NameSuggestTool = () => {\n  const [keywords, setKeywords] = useState('');\n  const [count, setCount] = useState(5);\n  const [loading, setLoading] = useState(false);\n  const [suggestions, setSuggestions] = useState([]);\n  const [error, setError] = useState('');\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    setSuggestions([]);\n    try {\n      const res = await fetch('/api/ai/name-suggest', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ input: keywords, count })\n      });\n      if (!res.ok) throw new Error('Request failed');\n      const data = await res.json();\n      setSuggestions(Array.isArray(data) ? data : []);\n    } catch (err) {\n      setError('Failed to generate suggestions.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const copyAll = async () => {\n    try {\n      await navigator.clipboard.writeText(suggestions.join('\\n'));\n      alert('Copied to clipboard');\n    } catch (_) {}\n  };\n\n  return (\n    <div style={{ maxWidth: 720, margin: '0 auto', padding: '1rem' }}>\n      <h1 style={{ marginBottom: '0.5rem' }}>AI Product Name Suggestor</h1>\n      <p style={{ color: '#666', marginTop: 0 }}>Generate catchy product names from keywords.</p>\n      <form onSubmit={onSubmit} style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center', marginBottom: '1rem' }}>\n        <input\n          aria-label=\"Keywords\"\n          placeholder=\"Enter keywords (e.g., eco bamboo toothbrush)\"\n          value={keywords}\n          onChange={(e) => setKeywords(e.target.value)}\n          style={{ flex: 1, minWidth: 260, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n        />\n        <input\n          aria-label=\"Count\"\n          type=\"number\"\n          min={1}\n          max={20}\n          value={count}\n          onChange={(e) => setCount(Math.max(1, Math.min(20, Number(e.target.value) || 1)))}\n          style={{ width: 90, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n        />\n        <button type=\"submit\" disabled={loading || !keywords.trim()} style={{ padding: '0.5rem 0.75rem', borderRadius: 6, border: '1px solid #0b64d8', background: '#0b64d8', color: 'white', cursor: 'pointer' }}>\n          {loading ? 'Generatingâ€¦' : 'Generate'}\n        </button>\n      </form>\n\n      {error && <div role=\"alert\" style={{ color: '#b00020', marginBottom: '0.75rem' }}>{error}</div>}\n\n      {suggestions.length > 0 && (\n        <div>\n          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '0.5rem' }}>\n            <strong>{suggestions.length} suggestion{suggestions.length === 1 ? '' : 's'}</strong>\n            <button type=\"button\" onClick={copyAll} style={{ marginLeft: 'auto', padding: '0.25rem 0.5rem', borderRadius: 6, border: '1px solid #ddd', background: '#fafafa', cursor: 'pointer', fontSize: 12 }}>Copy all</button>\n          </div>\n          <ol style={{ paddingLeft: '1.25rem' }}>\n            {suggestions.map((s, i) => (\n              <li key={i} style={{ marginBottom: '0.25rem' }}>{s}</li>\n            ))}\n          </ol>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NameSuggestTool;\n"
    },
    {
      "path": "tests/api-ai-name-suggest.test.js",
      "content": "import handler from '../pages/api/ai/name-suggest';\n\nfunction createRes() {\n  return {\n    _status: 0,\n    _json: undefined,\n    status(code) { this._status = code; return this; },\n    json(data) { this._json = data; return this; }\n  };\n}\n\ndescribe('API /api/ai/name-suggest', () => {\n  it('returns suggestions array (GET)', async () => {\n    const req = { method: 'GET', query: { q: 'eco bamboo toothbrush', n: '3' } };\n    const res = createRes();\n    await handler(req, res);\n    expect(res._status).toBe(200);\n    expect(Array.isArray(res._json)).toBe(true);\n    expect(res._json.length).toBeGreaterThan(0);\n  });\n\n  it('respects count limit (POST)', async () => {\n    const req = { method: 'POST', body: { input: 'steel water bottle', count: 2 } };\n    const res = createRes();\n    await handler(req, res);\n    expect(res._status).toBe(200);\n    expect(Array.isArray(res._json)).toBe(true);\n    expect(res._json.length).toBeLessThanOrEqual(2);\n  });\n});\n"
    },
    {
      "path": "tests/nameSuggestPage.test.js",
      "content": "import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport NameSuggestTool from '../pages/tools/name-suggest';\n\ndescribe('NameSuggest tool page', () => {\n  afterEach(() => {\n    global.fetch && delete global.fetch;\n  });\n\n  it('submits keywords and shows suggestions', async () => {\n    global.fetch = jest.fn().mockResolvedValue({ ok: true, json: async () => ['Alpha', 'Beta', 'Gamma'] });\n\n    render(<NameSuggestTool />);\n\n    const input = screen.getByPlaceholderText(/Enter keywords/i);\n    fireEvent.change(input, { target: { value: 'eco bottle' } });\n\n    const btn = screen.getByRole('button', { name: /Generate/i });\n    fireEvent.click(btn);\n\n    await waitFor(() => expect(global.fetch).toHaveBeenCalled());\n\n    expect(await screen.findByText('Alpha')).toBeInTheDocument();\n    expect(screen.getByText('Beta')).toBeInTheDocument();\n    expect(screen.getByText('Gamma')).toBeInTheDocument();\n  });\n});\n"
    }
  ]
}