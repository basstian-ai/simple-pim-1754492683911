{
  "commit_message": "Feature: Add tag-based product filtering (API + UI) with unit test",
  "patch": "--- a/pages/api/products.js\n+++ b/pages/api/products.js\n@@ -1,8 +1,36 @@\n import { getProducts } from '../../lib/products';\n+import { filterByTags } from '../../lib/filterProducts';\n \n export default async function handler(req, res) {\n-  const { search } = req.query || {};\n-  const products = await getProducts({ search });\n-  res.status(200).json(products);\n+  const { search } = req.query || {};\n+\n+  // Parse tags from query: supports ?tags=a,b or ?tags=a&tags=b\n+  let { tags } = req.query || {};\n+  if (typeof tags === 'string') {\n+    tags = tags\n+      .split(',')\n+      .map((s) => s.trim())\n+      .filter(Boolean)\n+      .map((s) => decodeURIComponent(s));\n+  } else if (Array.isArray(tags)) {\n+    const out = [];\n+    for (const t of tags) {\n+      if (typeof t === 'string') {\n+        out.push(\n+          ...t\n+            .split(',')\n+            .map((s) => s.trim())\n+            .filter(Boolean)\n+            .map((s) => decodeURIComponent(s))\n+        );\n+      }\n+    }\n+    tags = out;\n+  } else {\n+    tags = [];\n+  }\n+\n+  const products = await getProducts({ search });\n+  const filtered = filterByTags(products, tags);\n+  res.status(200).json(filtered);\n }\n",
  "files": [
    {
      "path": "lib/filterProducts.js",
      "content": "export function filterByTags(products, tags) {\n  if (!Array.isArray(products)) return [];\n  const tagList = Array.isArray(tags) ? tags.filter(Boolean) : [];\n  if (tagList.length === 0) return products;\n  return products.filter((p) => Array.isArray(p?.tags) && tagList.every((t) => p.tags.includes(t)));\n}\n"
    },
    {
      "path": "pages/index.js",
      "content": "import React, { useEffect, useState } from 'react';\nimport ProductList from '../components/ProductList';\nimport ExportCsvLink from '../components/ExportCsvLink';\n\nconst Home = () => {\n  const [products, setProducts] = useState([]);\n  const [query, setQuery] = useState('');\n  const [allTags, setAllTags] = useState([]);\n  const [selectedTags, setSelectedTags] = useState([]);\n\n  useEffect(() => {\n    let cancelled = false;\n    const loadTags = async () => {\n      try {\n        const res = await fetch('/api/tags');\n        const data = await res.json();\n        if (!cancelled) setAllTags(Array.isArray(data) ? data : []);\n      } catch (e) {\n        if (!cancelled) setAllTags([]);\n      }\n    };\n    loadTags();\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n\n  useEffect(() => {\n    let active = true;\n    const controller = new AbortController();\n\n    const fetchProducts = async () => {\n      const params = [];\n      if (query) params.push(`search=${encodeURIComponent(query)}`);\n      if (selectedTags.length > 0) params.push(`tags=${selectedTags.map(encodeURIComponent).join(',')}`);\n      const qs = params.length ? `?${params.join('&')}` : '';\n      const res = await fetch(`/api/products${qs}`, { signal: controller.signal });\n      const data = await res.json();\n      if (active) setProducts(data);\n    };\n\n    const t = setTimeout(fetchProducts, 250);\n\n    return () => {\n      active = false;\n      controller.abort();\n      clearTimeout(t);\n    };\n  }, [query, selectedTags]);\n\n  const toggleTag = (tag) => {\n    setSelectedTags((prev) => {\n      if (prev.includes(tag)) return prev.filter((t) => t !== tag);\n      return [...prev, tag];\n    });\n  };\n\n  return (\n    <div style={{ maxWidth: 900, margin: '0 auto', padding: '1rem' }}>\n      <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '1rem', flexWrap: 'wrap' }}>\n        <input\n          type=\"search\"\n          placeholder=\"Search products by name, SKU or description...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          style={{ flex: 1, minWidth: 260, padding: '0.5rem 0.75rem', border: '1px solid #ddd', borderRadius: 6 }}\n          aria-label=\"Search products\"\n        />\n        <span style={{ color: '#666', fontSize: 12 }}>\n          {products?.length || 0} result{(products?.length || 0) === 1 ? '' : 's'}\n        </span>\n        <ExportCsvLink style={{ fontSize: 12 }} />\n      </div>\n\n      {allTags.length > 0 && (\n        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem', marginBottom: '1rem' }}>\n          {allTags.map((tag) => {\n            const active = selectedTags.includes(tag);\n            return (\n              <button\n                key={tag}\n                onClick={() => toggleTag(tag)}\n                aria-pressed={active}\n                style={{\n                  padding: '0.25rem 0.5rem',\n                  borderRadius: 999,\n                  border: '1px solid ' + (active ? '#0b64d8' : '#ddd'),\n                  background: active ? '#e7f1ff' : 'white',\n                  color: active ? '#0b64d8' : '#333',\n                  cursor: 'pointer',\n                  fontSize: 12,\n                }}\n              >\n                {tag}\n              </button>\n            );\n          })}\n          {selectedTags.length > 0 && (\n            <button\n              onClick={() => setSelectedTags([])}\n              style={{\n                marginLeft: 'auto',\n                padding: '0.25rem 0.5rem',\n                borderRadius: 6,\n                border: '1px solid #ddd',\n                background: '#fafafa',\n                cursor: 'pointer',\n                fontSize: 12,\n              }}\n              aria-label=\"Clear selected tags\"\n            >\n              Clear tags\n            </button>\n          )}\n        </div>\n      )}\n\n      <ProductList products={products} />\n    </div>\n  );\n};\n\nexport default Home;\n"
    },
    {
      "path": "tests/filterByTags.test.js",
      "content": "const { filterByTags } = require('../lib/filterProducts');\n\ndescribe('filterByTags', () => {\n  const products = [\n    { id: '1', name: 'Red Shirt', tags: ['apparel', 'red'] },\n    { id: '2', name: 'Blue Shirt', tags: ['apparel', 'blue'] },\n    { id: '3', name: 'Green Mug', tags: ['kitchen', 'green'] },\n    { id: '4', name: 'Untagged' },\n  ];\n\n  it('returns all products when tags are empty/undefined', () => {\n    expect(filterByTags(products)).toHaveLength(4);\n    expect(filterByTags(products, [])).toHaveLength(4);\n  });\n\n  it('filters by a single tag', () => {\n    const out = filterByTags(products, ['apparel']);\n    expect(out.map((p) => p.name).sort()).toEqual(['Blue Shirt', 'Red Shirt']);\n  });\n\n  it('requires products to include all selected tags', () => {\n    const out = filterByTags(products, ['apparel', 'red']);\n    expect(out).toHaveLength(1);\n    expect(out[0].name).toBe('Red Shirt');\n  });\n\n  it('returns empty when no product has the tag', () => {\n    const out = filterByTags(products, ['__nonexistent__']);\n    expect(out).toHaveLength(0);\n  });\n});\n"
    }
  ]
}