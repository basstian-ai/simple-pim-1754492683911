{
  "files": [
    {
      "path": "lib/attributeGroups.js",
      "content": "const STORAGE_KEY = 'pim.attributeGroups';\n\nfunction isBrowser() {\n  return typeof window !== 'undefined' && typeof localStorage !== 'undefined';\n}\n\nfunction safeParse(json, fallback) {\n  try {\n    const v = JSON.parse(json);\n    return Array.isArray(v) ? v : fallback;\n  } catch (_) {\n    return fallback;\n  }\n}\n\nexport function slugify(str) {\n  if (!str) return '';\n  return String(str)\n    .normalize('NFKD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .toLowerCase()\n    .trim()\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/^-+|-+$/g, '')\n    .slice(0, 64);\n}\n\nfunction generateId() {\n  return 'ag_' + Date.now().toString(36) + Math.random().toString(36).slice(2, 8);\n}\n\nexport function loadGroups() {\n  if (!isBrowser()) return [];\n  const raw = localStorage.getItem(STORAGE_KEY);\n  return safeParse(raw, []);\n}\n\nexport function saveGroups(groups) {\n  if (!isBrowser()) return;\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(groups));\n}\n\nexport function clearAllGroups() {\n  if (!isBrowser()) return;\n  localStorage.removeItem(STORAGE_KEY);\n}\n\nexport function addGroupPure(groups, { id, name, code }) {\n  const gid = id || generateId();\n  const finalCode = code && String(code).trim() ? slugify(code) : slugify(name);\n  const newGroup = { id: gid, name: String(name || '').trim(), code: finalCode };\n  return [...groups, newGroup];\n}\n\nexport function updateGroupPure(groups, id, patch = {}) {\n  return groups.map((g) => {\n    if (g.id !== id) return g;\n    const next = { ...g, ...patch };\n    if (Object.prototype.hasOwnProperty.call(patch, 'code')) {\n      next.code = slugify(patch.code);\n    }\n    if (Object.prototype.hasOwnProperty.call(patch, 'name')) {\n      next.name = String(patch.name || '').trim();\n    }\n    return next;\n  });\n}\n\nexport function deleteGroupPure(groups, id) {\n  return groups.filter((g) => g.id !== id);\n}\n\nexport function moveGroupPure(groups, fromIndex, toIndex) {\n  const arr = groups.slice();\n  if (\n    fromIndex === toIndex ||\n    fromIndex < 0 ||\n    toIndex < 0 ||\n    fromIndex >= arr.length ||\n    toIndex >= arr.length\n  ) {\n    return arr;\n  }\n  const [item] = arr.splice(fromIndex, 1);\n  arr.splice(toIndex, 0, item);\n  return arr;\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import { useEffect, useState } from 'react';\nimport {\n  loadGroups,\n  saveGroups,\n  addGroupPure,\n  updateGroupPure,\n  deleteGroupPure,\n  moveGroupPure,\n  slugify,\n} from '../../lib/attributeGroups';\n\nexport default function AttributeGroupsAdmin() {\n  const [groups, setGroups] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n\n  const [name, setName] = useState('');\n  const [code, setCode] = useState('');\n\n  const [editingId, setEditingId] = useState(null);\n  const [editName, setEditName] = useState('');\n  const [editCode, setEditCode] = useState('');\n\n  useEffect(() => {\n    const initial = loadGroups();\n    setGroups(initial);\n    setLoaded(true);\n  }, []);\n\n  function handleAdd(e) {\n    e.preventDefault();\n    if (!name.trim()) return;\n    const next = addGroupPure(groups, { name: name.trim(), code: code.trim() });\n    setGroups(next);\n    saveGroups(next);\n    setName('');\n    setCode('');\n  }\n\n  function startEdit(group) {\n    setEditingId(group.id);\n    setEditName(group.name);\n    setEditCode(group.code);\n  }\n\n  function cancelEdit() {\n    setEditingId(null);\n    setEditName('');\n    setEditCode('');\n  }\n\n  function saveEdit(id) {\n    const next = updateGroupPure(groups, id, {\n      name: editName,\n      code: editCode,\n    });\n    setGroups(next);\n    saveGroups(next);\n    cancelEdit();\n  }\n\n  function handleDelete(id) {\n    // eslint-disable-next-line no-alert\n    if (!confirm('Delete this attribute group?')) return;\n    const next = deleteGroupPure(groups, id);\n    setGroups(next);\n    saveGroups(next);\n  }\n\n  function moveUp(index) {\n    const next = moveGroupPure(groups, index, index - 1);\n    setGroups(next);\n    saveGroups(next);\n  }\n\n  function moveDown(index) {\n    const next = moveGroupPure(groups, index, index + 1);\n    setGroups(next);\n    saveGroups(next);\n  }\n\n  function doExport() {\n    const data = JSON.stringify(groups, null, 2);\n    const blob = new Blob([data], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'attribute-groups.json';\n    document.body.appendChild(a);\n    a.click();\n    a.remove();\n    URL.revokeObjectURL(url);\n  }\n\n  function doImport(e) {\n    const file = e.target.files && e.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = () => {\n      try {\n        const parsed = JSON.parse(String(reader.result || '[]'));\n        if (Array.isArray(parsed)) {\n          const sanitized = parsed\n            .filter((g) => g && g.id && g.name)\n            .map((g) => ({ id: g.id, name: String(g.name), code: slugify(g.code || g.name) }));\n          setGroups(sanitized);\n          saveGroups(sanitized);\n        } else {\n          // eslint-disable-next-line no-alert\n          alert('Invalid file format');\n        }\n      } catch (err) {\n        // eslint-disable-next-line no-alert\n        alert('Failed to import JSON');\n      } finally {\n        e.target.value = '';\n      }\n    };\n    reader.readAsText(file);\n  }\n\n  return (\n    <div style={{ maxWidth: 840, margin: '32px auto', padding: '0 16px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1 style={{ marginBottom: 8 }}>Attribute Groups</h1>\n      <p style={{ color: '#555', marginTop: 0 }}>Create and manage attribute groups for your product information model. Data is saved locally in your browser.</p>\n\n      <section style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: 16, marginBottom: 24 }}>\n        <h2 style={{ marginTop: 0, fontSize: 18 }}>Create new group</h2>\n        <form onSubmit={handleAdd} style={{ display: 'flex', gap: 12, flexWrap: 'wrap', alignItems: 'flex-end' }}>\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <label htmlFor=\"name\" style={{ fontSize: 12, color: '#555' }}>Name</label>\n            <input\n              id=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"e.g. Basic Information\"\n              required\n              style={{ padding: '8px 10px', minWidth: 240, border: '1px solid #cbd5e1', borderRadius: 6 }}\n            />\n          </div>\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <label htmlFor=\"code\" style={{ fontSize: 12, color: '#555' }}>Code (optional)</label>\n            <input\n              id=\"code\"\n              value={code}\n              onChange={(e) => setCode(e.target.value)}\n              placeholder=\"auto-generated from name if empty\"\n              style={{ padding: '8px 10px', minWidth: 240, border: '1px solid #cbd5e1', borderRadius: 6 }}\n            />\n          </div>\n          <button type=\"submit\" style={{ background: '#111827', color: 'white', border: 0, padding: '10px 14px', borderRadius: 6, cursor: 'pointer' }}>Add group</button>\n        </form>\n      </section>\n\n      <section style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: 16 }}>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n          <h2 style={{ margin: 0, fontSize: 18 }}>Groups ({groups.length})</h2>\n          <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>\n            <button onClick={doExport} style={{ padding: '8px 12px', borderRadius: 6, border: '1px solid #cbd5e1', background: 'white', cursor: 'pointer' }}>Export JSON</button>\n            <label style={{ display: 'inline-block', padding: '8px 12px', borderRadius: 6, border: '1px solid #cbd5e1', background: 'white', cursor: 'pointer' }}>\n              Import JSON\n              <input type=\"file\" accept=\"application/json\" onChange={doImport} style={{ display: 'none' }} />\n            </label>\n          </div>\n        </div>\n        {!loaded ? (\n          <div style={{ color: '#6b7280' }}>Loading…</div>\n        ) : groups.length === 0 ? (\n          <div style={{ color: '#6b7280' }}>No attribute groups yet. Create your first one above.</div>\n        ) : (\n          <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n            {groups.map((g, idx) => (\n              <li key={g.id} style={{ borderTop: idx === 0 ? 'none' : '1px solid #f3f4f6', padding: '12px 0', display: 'flex', alignItems: 'center', gap: 12 }}>\n                <div style={{ width: 32, display: 'flex', flexDirection: 'column', gap: 4 }}>\n                  <button title=\"Move up\" onClick={() => moveUp(idx)} disabled={idx === 0} style={{ border: '1px solid #d1d5db', background: 'white', padding: 2, borderRadius: 4, cursor: idx === 0 ? 'not-allowed' : 'pointer' }}>▲</button>\n                  <button title=\"Move down\" onClick={() => moveDown(idx)} disabled={idx === groups.length - 1} style={{ border: '1px solid #d1d5db', background: 'white', padding: 2, borderRadius: 4, cursor: idx === groups.length - 1 ? 'not-allowed' : 'pointer' }}>▼</button>\n                </div>\n                {editingId === g.id ? (\n                  <div style={{ flex: 1, display: 'flex', gap: 8, alignItems: 'center', flexWrap: 'wrap' }}>\n                    <input value={editName} onChange={(e) => setEditName(e.target.value)} style={{ padding: '6px 8px', border: '1px solid #cbd5e1', borderRadius: 6, minWidth: 240 }} />\n                    <input value={editCode} onChange={(e) => setEditCode(e.target.value)} style={{ padding: '6px 8px', border: '1px solid #cbd5e1', borderRadius: 6, minWidth: 160 }} />\n                    <div style={{ marginLeft: 'auto', display: 'flex', gap: 8 }}>\n                      <button onClick={() => saveEdit(g.id)} style={{ background: '#111827', color: 'white', border: 0, padding: '8px 12px', borderRadius: 6, cursor: 'pointer' }}>Save</button>\n                      <button onClick={cancelEdit} style={{ background: 'white', color: '#111827', border: '1px solid #cbd5e1', padding: '8px 12px', borderRadius: 6, cursor: 'pointer' }}>Cancel</button>\n                    </div>\n                  </div>\n                ) : (\n                  <div style={{ flex: 1, display: 'flex', gap: 12, alignItems: 'center', flexWrap: 'wrap' }}>\n                    <div style={{ minWidth: 280 }}>\n                      <div style={{ fontWeight: 600 }}>{g.name}</div>\n                      <div style={{ fontSize: 12, color: '#6b7280' }}>Code: {g.code}</div>\n                    </div>\n                    <div style={{ marginLeft: 'auto', display: 'flex', gap: 8 }}>\n                      <button onClick={() => startEdit(g)} style={{ background: 'white', color: '#111827', border: '1px solid #cbd5e1', padding: '8px 12px', borderRadius: 6, cursor: 'pointer' }}>Edit</button>\n                      <button onClick={() => handleDelete(g.id)} style={{ background: '#b91c1c', color: 'white', border: 0, padding: '8px 12px', borderRadius: 6, cursor: 'pointer' }}>Delete</button>\n                    </div>\n                  </div>\n                )}\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <div style={{ marginTop: 24, color: '#6b7280', fontSize: 12 }}>\n        Tip: You can bookmark this page. Import/export lets you move groups between browsers or environments.\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "__tests__/attributeGroups.test.js",
      "content": "import { addGroupPure, updateGroupPure, deleteGroupPure, moveGroupPure, slugify } from '../lib/attributeGroups';\n\ndescribe('attributeGroups utils', () => {\n  test('slugify produces URL-safe codes', () => {\n    expect(slugify('Color Name')).toBe('color-name');\n    expect(slugify('  Size/Weight ')).toBe('size-weight');\n    expect(slugify('ÄÖÜ - ñ')).toBe('aou-n');\n  });\n\n  test('addGroupPure adds a group with generated code', () => {\n    const groups = [];\n    const next = addGroupPure(groups, { name: 'Basic Info' });\n    expect(next).toHaveLength(1);\n    expect(next[0].name).toBe('Basic Info');\n    expect(next[0].code).toBe('basic-info');\n    expect(next[0].id).toBeTruthy();\n  });\n\n  test('updateGroupPure updates fields and slugifies code', () => {\n    const initial = addGroupPure([], { name: 'Details', code: 'custom code' });\n    const id = initial[0].id;\n    const updated = updateGroupPure(initial, id, { name: 'More Details', code: 'New Code' });\n    expect(updated[0].name).toBe('More Details');\n    expect(updated[0].code).toBe('new-code');\n  });\n\n  test('deleteGroupPure removes by id', () => {\n    const a = addGroupPure([], { name: 'A' });\n    const b = addGroupPure(a, { name: 'B' });\n    const idToRemove = a[0].id;\n    const next = deleteGroupPure(b, idToRemove);\n    expect(next).toHaveLength(1);\n    expect(next[0].name).toBe('B');\n  });\n\n  test('moveGroupPure reorders items safely', () => {\n    const a = addGroupPure([], { name: 'A' });\n    const b = addGroupPure(a, { name: 'B' });\n    const c = addGroupPure(b, { name: 'C' });\n    const moved = moveGroupPure(c, 0, 2);\n    expect(moved.map((g) => g.name)).toEqual(['B', 'C', 'A']);\n    const noChange = moveGroupPure(moved, -1, 5);\n    expect(noChange.map((g) => g.name)).toEqual(['B', 'C', 'A']);\n  });\n});\n"
    },
    {
      "path": "commit_message",
      "content": "FEATURE: Add client-side Attribute Groups admin (create/edit/reorder/import/export) with localStorage persistence and utility unit tests."
    }
  ]
}