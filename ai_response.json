{
  "files": [
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import React, { useEffect, useMemo, useState } from 'react';\n\n// Client-side Attribute Groups admin UI with localStorage persistence.\n// Safe, standalone feature page: navigate to /admin/attribute-groups\n\nconst STORAGE_KEY = 'pim.attributeGroups.v1';\n\nfunction uid(prefix = 'id') {\n  return `${prefix}_${Math.random().toString(36).slice(2, 8)}${Date.now().toString(36).slice(-4)}`;\n}\n\nfunction slugify(str) {\n  return String(str || '')\n    .toLowerCase()\n    .trim()\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/^-+|-+$/g, '');\n}\n\nconst DEFAULT_GROUPS = [\n  {\n    id: 'grp-color',\n    name: 'Color',\n    code: 'color',\n    attributes: [\n      { id: 'attr-color', code: 'color', label: 'Color', type: 'text', required: false },\n      { id: 'attr-finish', code: 'finish', label: 'Finish', type: 'select', required: false, options: ['Matte', 'Glossy'] }\n    ]\n  },\n  {\n    id: 'grp-size',\n    name: 'Size & Weight',\n    code: 'size',\n    attributes: [\n      { id: 'attr-size', code: 'size', label: 'Size', type: 'text', required: false },\n      { id: 'attr-weight', code: 'weight', label: 'Weight (g)', type: 'number', required: false }\n    ]\n  }\n];\n\nfunction loadFromStorage() {\n  if (typeof window === 'undefined') return null;\n  try {\n    const raw = window.localStorage.getItem(STORAGE_KEY);\n    if (!raw) return null;\n    const parsed = JSON.parse(raw);\n    if (!Array.isArray(parsed)) return null;\n    return parsed;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction saveToStorage(groups) {\n  if (typeof window === 'undefined') return;\n  try {\n    window.localStorage.setItem(STORAGE_KEY, JSON.stringify(groups));\n  } catch (_) {\n    // ignore\n  }\n}\n\nfunction AttributeGroupsEditor() {\n  const [groups, setGroups] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [newGroupName, setNewGroupName] = useState('');\n  const [expanded, setExpanded] = useState({});\n\n  useEffect(() => {\n    const existing = loadFromStorage();\n    if (existing && existing.length) {\n      setGroups(existing);\n    } else {\n      setGroups(DEFAULT_GROUPS);\n      saveToStorage(DEFAULT_GROUPS);\n    }\n    setLoaded(true);\n  }, []);\n\n  useEffect(() => {\n    if (!loaded) return;\n    saveToStorage(groups);\n  }, [groups, loaded]);\n\n  const groupCount = groups.length;\n\n  const handleAddGroup = () => {\n    const name = newGroupName.trim();\n    if (!name) return;\n    const code = slugify(name);\n    const newGroup = { id: uid('grp'), name, code, attributes: [] };\n    setGroups((prev) => [...prev, newGroup]);\n    setNewGroupName('');\n    setExpanded((e) => ({ ...e, [newGroup.id]: true }));\n  };\n\n  const handleDeleteGroup = (id) => {\n    setGroups((prev) => prev.filter((g) => g.id !== id));\n  };\n\n  const handleRenameGroup = (id, name) => {\n    setGroups((prev) => prev.map((g) => (g.id === id ? { ...g, name, code: slugify(name) } : g)));\n  };\n\n  const handleToggleExpand = (id) => {\n    setExpanded((e) => ({ ...e, [id]: !e[id] }));\n  };\n\n  const handleAddAttribute = (groupId, attr) => {\n    setGroups((prev) =>\n      prev.map((g) =>\n        g.id === groupId ? { ...g, attributes: [...g.attributes, { ...attr, id: uid('attr') }] } : g\n      )\n    );\n  };\n\n  const handleDeleteAttribute = (groupId, attrId) => {\n    setGroups((prev) =>\n      prev.map((g) =>\n        g.id === groupId ? { ...g, attributes: g.attributes.filter((a) => a.id !== attrId) } : g\n      )\n    );\n  };\n\n  const handleUpdateAttribute = (groupId, attrId, patch) => {\n    setGroups((prev) =>\n      prev.map((g) =>\n        g.id === groupId\n          ? {\n              ...g,\n              attributes: g.attributes.map((a) => (a.id === attrId ? { ...a, ...patch } : a))\n            }\n          : g\n      )\n    );\n  };\n\n  return (\n    <div style={styles.container} data-testid=\"attribute-groups-page\">\n      <h1 style={styles.h1}>Attribute Groups</h1>\n      <p style={styles.muted}>Define attribute groups and fields used by your products. Data is stored locally in your browser.</p>\n\n      <section style={styles.card}>\n        <h2 style={styles.h2}>Create Group</h2>\n        <div style={styles.row}>\n          <input\n            data-testid=\"new-group-name\"\n            placeholder=\"Group name (e.g., Technical Specs)\"\n            value={newGroupName}\n            onChange={(e) => setNewGroupName(e.target.value)}\n            style={styles.input}\n          />\n          <button data-testid=\"add-group\" onClick={handleAddGroup} style={styles.buttonPrimary}>\n            Add Group\n          </button>\n        </div>\n      </section>\n\n      <section style={styles.card}>\n        <div style={styles.headerRow}>\n          <h2 style={styles.h2}>Groups ({groupCount})</h2>\n          <button style={styles.buttonGhost} onClick={() => { saveToStorage(DEFAULT_GROUPS); setGroups(DEFAULT_GROUPS); }}>\n            Reset to defaults\n          </button>\n        </div>\n        {groups.length === 0 && <div style={styles.empty}>No groups yet. Create your first group above.</div>}\n        <ul style={styles.list}>\n          {groups.map((g) => (\n            <li key={g.id} style={styles.listItem} data-testid={`group-${g.id}`}>\n              <div style={styles.groupHeader}>\n                <button\n                  aria-label={expanded[g.id] ? 'Collapse' : 'Expand'}\n                  onClick={() => handleToggleExpand(g.id)}\n                  style={styles.disclosure}\n                >\n                  {expanded[g.id] ? '▾' : '▸'}\n                </button>\n                <input\n                  style={styles.inputInline}\n                  value={g.name}\n                  onChange={(e) => handleRenameGroup(g.id, e.target.value)}\n                  aria-label=\"Group name\"\n                />\n                <span style={styles.badge}>{g.attributes.length} field{g.attributes.length === 1 ? '' : 's'}</span>\n                <button style={styles.buttonDanger} onClick={() => handleDeleteGroup(g.id)}>\n                  Delete\n                </button>\n              </div>\n              {expanded[g.id] && (\n                <GroupAttributes\n                  group={g}\n                  onAdd={(attr) => handleAddAttribute(g.id, attr)}\n                  onDelete={(attrId) => handleDeleteAttribute(g.id, attrId)}\n                  onUpdate={(attrId, patch) => handleUpdateAttribute(g.id, attrId, patch)}\n                />\n              )}\n            </li>\n          ))}\n        </ul>\n      </section>\n    </div>\n  );\n}\n\nfunction GroupAttributes({ group, onAdd, onDelete, onUpdate }) {\n  const [code, setCode] = useState('');\n  const [label, setLabel] = useState('');\n  const [type, setType] = useState('text');\n\n  const canAdd = useMemo(() => label.trim().length > 0, [label]);\n\n  const add = () => {\n    if (!canAdd) return;\n    const finalCode = slugify(code || label);\n    onAdd({ code: finalCode, label: label.trim(), type, required: false });\n    setCode('');\n    setLabel('');\n    setType('text');\n  };\n\n  return (\n    <div style={styles.attributesBox}>\n      {group.attributes.length === 0 && <div style={styles.empty}>No fields yet. Add one below.</div>}\n      {group.attributes.map((a) => (\n        <div key={a.id} style={styles.attrRow}>\n          <input\n            style={styles.inputSm}\n            value={a.label}\n            onChange={(e) => onUpdate(a.id, { label: e.target.value })}\n            placeholder=\"Label\"\n            aria-label=\"Attribute label\"\n          />\n          <input\n            style={styles.inputSm}\n            value={a.code}\n            onChange={(e) => onUpdate(a.id, { code: slugify(e.target.value) })}\n            placeholder=\"Code\"\n            aria-label=\"Attribute code\"\n          />\n          <select\n            style={styles.selectSm}\n            value={a.type}\n            onChange={(e) => onUpdate(a.id, { type: e.target.value })}\n            aria-label=\"Attribute type\"\n          >\n            <option value=\"text\">Text</option>\n            <option value=\"number\">Number</option>\n            <option value=\"select\">Select</option>\n            <option value=\"boolean\">Boolean</option>\n          </select>\n          <label style={styles.checkboxLabel}>\n            <input\n              type=\"checkbox\"\n              checked={!!a.required}\n              onChange={(e) => onUpdate(a.id, { required: !!e.target.checked })}\n            />\n            Required\n          </label>\n          <button style={styles.buttonDangerSm} onClick={() => onDelete(a.id)} aria-label=\"Delete attribute\">\n            Delete\n          </button>\n        </div>\n      ))}\n\n      <div style={{ ...styles.attrRow, borderTop: '1px solid #eee', paddingTop: 10, marginTop: 10 }}>\n        <input\n          data-testid={`new-attr-label-${group.id}`}\n          style={styles.inputSm}\n          value={label}\n          onChange={(e) => setLabel(e.target.value)}\n          placeholder=\"New field label (e.g., Material)\"\n        />\n        <input\n          style={styles.inputSm}\n          value={code}\n          onChange={(e) => setCode(e.target.value)}\n          placeholder=\"Code (auto from label)\"\n        />\n        <select style={styles.selectSm} value={type} onChange={(e) => setType(e.target.value)}>\n          <option value=\"text\">Text</option>\n          <option value=\"number\">Number</option>\n          <option value=\"select\">Select</option>\n          <option value=\"boolean\">Boolean</option>\n        </select>\n        <button data-testid={`add-attr-${group.id}`} style={styles.buttonPrimarySm} disabled={!canAdd} onClick={add}>\n          Add field\n        </button>\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  container: { maxWidth: 900, margin: '20px auto', padding: '0 16px', fontFamily: '-apple-system, Segoe UI, Roboto, sans-serif' },\n  h1: { fontSize: 28, margin: '16px 0' },\n  h2: { fontSize: 18, margin: '8px 0' },\n  muted: { color: '#666', marginBottom: 16 },\n  card: { background: '#fff', border: '1px solid #eee', borderRadius: 8, padding: 16, marginBottom: 16, boxShadow: '0 1px 2px rgba(0,0,0,0.03)' },\n  row: { display: 'flex', gap: 8 },\n  headerRow: { display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 },\n  input: { flex: 1, padding: '8px 10px', border: '1px solid #ddd', borderRadius: 6 },\n  inputInline: { flex: 1, padding: '6px 8px', border: '1px solid #ddd', borderRadius: 6, marginRight: 8, minWidth: 200 },\n  inputSm: { flex: 1, padding: '6px 8px', border: '1px solid #ddd', borderRadius: 6, minWidth: 120 },\n  selectSm: { padding: '6px 8px', border: '1px solid #ddd', borderRadius: 6 },\n  buttonPrimary: { background: '#111827', color: '#fff', border: '1px solid #111827', borderRadius: 6, padding: '8px 12px', cursor: 'pointer' },\n  buttonPrimarySm: { background: '#111827', color: '#fff', border: '1px solid #111827', borderRadius: 6, padding: '6px 10px', cursor: 'pointer' },\n  buttonDanger: { background: '#fff', color: '#b91c1c', border: '1px solid #b91c1c', borderRadius: 6, padding: '6px 10px', cursor: 'pointer' },\n  buttonDangerSm: { background: '#fff', color: '#b91c1c', border: '1px solid #b91c1c', borderRadius: 6, padding: '4px 8px', cursor: 'pointer' },\n  buttonGhost: { background: '#fff', color: '#111827', border: '1px solid #ddd', borderRadius: 6, padding: '6px 10px', cursor: 'pointer' },\n  list: { listStyle: 'none', padding: 0, margin: 0 },\n  listItem: { borderTop: '1px solid #eee', padding: '10px 0' },\n  groupHeader: { display: 'flex', alignItems: 'center', gap: 8 },\n  disclosure: { border: '1px solid #ddd', background: '#fff', borderRadius: 6, padding: '2px 6px', cursor: 'pointer' },\n  badge: { background: '#f3f4f6', color: '#111827', borderRadius: 999, padding: '2px 8px', fontSize: 12, marginLeft: 'auto', marginRight: 8 },\n  attributesBox: { background: '#fafafa', border: '1px dashed #e5e7eb', borderRadius: 8, padding: 12, marginTop: 10 },\n  attrRow: { display: 'flex', alignItems: 'center', gap: 8, marginBottom: 8 },\n  checkboxLabel: { display: 'flex', alignItems: 'center', gap: 6, color: '#374151', fontSize: 14 },\n  empty: { color: '#6b7280', fontStyle: 'italic', padding: '8px 0' }\n};\n\nexport default function AttributeGroupsPage() {\n  return <AttributeGroupsEditor />;\n}\n"
    },
    {
      "path": "__tests__/attribute-groups.test.js",
      "content": "/*\n  Minimal smoke test for the Attribute Groups admin page. This test is not wired\n  to any runner by default, but serves as a starting point if Jest/RTL is enabled.\n*/\nimport React from 'react';\n// Relative import from test file to page component\nimport Page from '../pages/admin/attribute-groups';\nimport { render, screen, fireEvent } from '@testing-library/react';\n\nfunction ensureLocalStorage() {\n  if (typeof window === 'undefined') return;\n  if (!window.localStorage) {\n    const store = {};\n    window.localStorage = {\n      getItem: (k) => (k in store ? store[k] : null),\n      setItem: (k, v) => { store[k] = String(v); },\n      removeItem: (k) => { delete store[k]; },\n      clear: () => { Object.keys(store).forEach((k) => delete store[k]); }\n    };\n  }\n}\n\ndescribe('Attribute Groups Page', () => {\n  it('renders and allows adding a group', () => {\n    ensureLocalStorage();\n    render(<Page />);\n    expect(screen.getByTestId('attribute-groups-page')).toBeInTheDocument();\n    const input = screen.getByPlaceholderText('Group name (e.g., Technical Specs)');\n    fireEvent.change(input, { target: { value: 'Materials' } });\n    fireEvent.click(screen.getByTestId('add-group'));\n    // New group should appear in list\n    expect(screen.getByDisplayValue('Materials')).toBeInTheDocument();\n  });\n});\n"
    }
  ],
  "commit_message": "feat(attribute-groups): add client-side Attribute Groups admin page at /admin/attribute-groups with localStorage persistence and basic list/editor; include a minimal smoke test"
}