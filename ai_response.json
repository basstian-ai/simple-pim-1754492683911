{
  "files": [
    {
      "path": "pages/api/attribute-groups/search.js",
      "content": "import fs from 'fs';\nimport path from 'path';\n\nfunction loadGroupsFromDisk() {\n  const file = path.join(process.cwd(), 'data', 'attribute-groups.json');\n  try {\n    const buf = fs.readFileSync(file, 'utf8');\n    return JSON.parse(buf);\n  } catch (_) {\n    try {\n      // Jest/Node fallback\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      return require('../../../data/attribute-groups.json');\n    } catch (e) {\n      throw new Error('Failed to load attribute groups data');\n    }\n  }\n}\n\nfunction toArrayGroups(src) {\n  if (Array.isArray(src)) return src;\n  if (src && Array.isArray(src.groups)) return src.groups;\n  return [];\n}\n\nfunction slugifyId(s) {\n  return String(s || '')\n    .toLowerCase()\n    .trim()\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/(^-|-$)+/g, '') || 'group';\n}\n\nfunction flattenAttributes(groups) {\n  const out = [];\n  for (const g of groups) {\n    const groupId = g.id || g.code || slugifyId(g.name);\n    const groupName = g.name || groupId;\n    const attrs = Array.isArray(g.attributes) ? g.attributes : [];\n    for (const a of attrs) {\n      if (!a) continue;\n      const code = a.code || a.id || null;\n      if (!code) continue;\n      out.push({\n        code,\n        label: a.label || a.name || code,\n        type: a.type || 'text',\n        required: Boolean(a.required),\n        unit: a.unit || null,\n        options: Array.isArray(a.options) ? a.options : [],\n        groupId,\n        groupName,\n      });\n    }\n  }\n  return out;\n}\n\nexport default function handler(req, res) {\n  try {\n    if (req.method !== 'GET') {\n      res.setHeader('Allow', 'GET');\n      return res.status(405).json({ error: 'Method Not Allowed' });\n    }\n\n    const src = loadGroupsFromDisk();\n    const groups = toArrayGroups(src);\n    const flat = flattenAttributes(groups);\n\n    const q = String(req.query.q || '').trim().toLowerCase();\n    const type = req.query.type ? String(req.query.type).trim().toLowerCase() : '';\n    const groupIdFilter = req.query.groupId ? String(req.query.groupId).trim() : '';\n    const requiredParam = req.query.required;\n    const hasRequiredFilter = typeof requiredParam !== 'undefined';\n    const requiredFilter = hasRequiredFilter ? ['1', 'true', 'yes'].includes(String(requiredParam).toLowerCase()) : null;\n\n    let results = flat;\n\n    if (q) {\n      results = results.filter((r) =>\n        r.code.toLowerCase().includes(q) ||\n        (r.label && String(r.label).toLowerCase().includes(q)) ||\n        (r.groupName && String(r.groupName).toLowerCase().includes(q))\n      );\n    }\n\n    if (type) {\n      results = results.filter((r) => String(r.type || '').toLowerCase() === type);\n    }\n\n    if (groupIdFilter) {\n      results = results.filter((r) => r.groupId === groupIdFilter);\n    }\n\n    if (hasRequiredFilter) {\n      results = results.filter((r) => r.required === requiredFilter);\n    }\n\n    const total = results.length;\n\n    // Simple pagination support\n    const limit = Math.max(1, Math.min(500, parseInt(String(req.query.limit || '100'), 10) || 100));\n    const offset = Math.max(0, parseInt(String(req.query.offset || '0'), 10) || 0);\n    const paged = results.slice(offset, offset + limit);\n\n    res.setHeader('Content-Type', 'application/json');\n    return res.status(200).json({\n      count: total,\n      attributes: paged,\n      query: {\n        q,\n        type: type || null,\n        groupId: groupIdFilter || null,\n        required: hasRequiredFilter ? requiredFilter : null,\n        limit,\n        offset,\n      },\n    });\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error('Error in /api/attribute-groups/search:', err);\n    return res.status(500).json({ error: 'Failed to search attribute groups' });\n  }\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups-search.js",
      "content": "import React from 'react';\n\nexport default function AttributeGroupsSearchPage() {\n  const [q, setQ] = React.useState('');\n  const [type, setType] = React.useState('');\n  const [required, setRequired] = React.useState('');\n  const [state, setState] = React.useState({ loading: false, error: null, data: { count: 0, attributes: [] } });\n\n  React.useEffect(() => {\n    let cancelled = false;\n    async function load() {\n      setState((s) => ({ ...s, loading: true, error: null }));\n      const params = new URLSearchParams();\n      if (q) params.set('q', q);\n      if (type) params.set('type', type);\n      if (required) params.set('required', required);\n      params.set('limit', '200');\n\n      try {\n        const res = await fetch(`/api/attribute-groups/search?${params.toString()}`);\n        if (!res.ok) throw new Error(`Failed to load: ${res.status}`);\n        const json = await res.json();\n        if (!cancelled) setState({ loading: false, error: null, data: json });\n      } catch (err) {\n        if (!cancelled) setState({ loading: false, error: err.message || 'Failed to load', data: { count: 0, attributes: [] } });\n      }\n    }\n\n    const t = setTimeout(load, 200);\n    return () => { cancelled = true; clearTimeout(t); };\n  }, [q, type, required]);\n\n  const { data } = state;\n\n  return (\n    <div style={container}>\n      <div style={headerRow}>\n        <h1 style={{ margin: 0 }}>Attribute Search</h1>\n        <div style={{ display: 'flex', gap: 8 }}>\n          <a href=\"/admin/attribute-groups\" style={btn}>Groups</a>\n          <a href=\"/admin/attribute-groups-flat\" style={btn}>Flat</a>\n          <a href=\"/admin/attribute-groups-grouped\" style={btn}>Grouped</a>\n          <a href=\"/admin/attribute-groups-duplicates\" style={btn}>Duplicates</a>\n        </div>\n      </div>\n\n      <p style={{ color: '#374151', marginTop: 4 }}>Quickly find attribute definitions across all groups. Filters support code, label, type, and required.</p>\n\n      <div style={filtersRow}>\n        <input\n          type=\"text\"\n          placeholder=\"Search by code, label, or group\"\n          value={q}\n          onChange={(e) => setQ(e.target.value)}\n          style={input}\n        />\n        <select value={type} onChange={(e) => setType(e.target.value)} style={select}>\n          <option value=\"\">Any type</option>\n          <option value=\"text\">text</option>\n          <option value=\"number\">number</option>\n          <option value=\"boolean\">boolean</option>\n          <option value=\"select\">select</option>\n        </select>\n        <select value={required} onChange={(e) => setRequired(e.target.value)} style={select}>\n          <option value=\"\">Required: any</option>\n          <option value=\"true\">Required only</option>\n          <option value=\"false\">Optional only</option>\n        </select>\n      </div>\n\n      {state.loading && <p>Loadingâ€¦</p>}\n      {state.error && <p style={{ color: '#b91c1c' }}>Error: {state.error}</p>}\n\n      {!state.loading && !state.error && (\n        <div>\n          <p style={{ color: '#374151' }}>Matches: <strong>{data.count}</strong></p>\n          {data.attributes.length === 0 ? (\n            <div style={emptyBox}>No attributes match the current filters.</div>\n          ) : (\n            <ul style={list}>\n              {data.attributes.map((a) => (\n                <li key={`${a.groupId}:${a.code}`} style={listItem}>\n                  <div style={rowWrap}>\n                    <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n                      <strong>{a.label}</strong>\n                      <code style={codeBadge}>{a.code}</code>\n                      <span style={pill}>{a.type}</span>\n                      {a.required ? <span style={requiredPill}>required</span> : <span style={optionalPill}>optional</span>}\n                    </div>\n                    <div style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center', gap: 8 }}>\n                      <a href={`/admin/attribute-group/${encodeURIComponent(a.groupId)}`} style={groupLink}>{a.groupName}</a>\n                      <code style={groupCode}>{a.groupId}</code>\n                    </div>\n                  </div>\n                  {Array.isArray(a.options) && a.options.length > 0 ? (\n                    <div style={{ marginTop: 6, color: '#374151' }}>Options: {a.options.join(', ')}</div>\n                  ) : null}\n                  {a.unit ? (\n                    <div style={{ marginTop: 6, color: '#374151' }}>Unit: {a.unit}</div>\n                  ) : null}\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst container = { padding: 20, maxWidth: 960, margin: '0 auto' };\nconst headerRow = { display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 8 };\nconst filtersRow = { display: 'flex', gap: 8, margin: '12px 0' };\nconst btn = { textDecoration: 'none', background: '#e5e7eb', color: '#111827', padding: '8px 12px', borderRadius: 6 };\nconst input = { flex: 1, padding: '8px 10px', border: '1px solid #e5e7eb', borderRadius: 6 };\nconst select = { padding: '8px 10px', border: '1px solid #e5e7eb', borderRadius: 6 };\nconst emptyBox = { background: '#f9fafb', border: '1px solid #e5e7eb', borderRadius: 8, padding: 12 };\nconst list = { listStyle: 'none', padding: 0, margin: 0, display: 'flex', flexDirection: 'column', gap: 12 };\nconst listItem = { border: '1px solid #e5e7eb', borderRadius: 8, padding: 12, background: '#fff' };\nconst rowWrap = { display: 'flex', alignItems: 'center', gap: 8, flexWrap: 'wrap' };\nconst codeBadge = { background: '#eef2ff', color: '#3730a3', padding: '2px 6px', borderRadius: 4, fontFamily: 'monospace', fontSize: 12 };\nconst pill = { background: '#f1f5f9', color: '#0f172a', padding: '2px 6px', borderRadius: 999, fontSize: 12 };\nconst requiredPill = { background: '#ecfdf5', color: '#065f46', padding: '2px 6px', borderRadius: 999, fontSize: 12 };\nconst optionalPill = { background: '#f3f4f6', color: '#374151', padding: '2px 6px', borderRadius: 999, fontSize: 12 };\nconst groupLink = { color: '#111827', textDecoration: 'none', fontWeight: 600 };\nconst groupCode = { background: '#f1f5f9', color: '#0f172a', padding: '2px 6px', borderRadius: 4, fontFamily: 'monospace', fontSize: 12 };\n"
    },
    {
      "path": "tests/api-attribute-groups-search.test.js",
      "content": "const path = require('path');\n\ndescribe('/api/attribute-groups/search', () => {\n  function createMockRes() {\n    const res = {\n      statusCode: 200,\n      headers: {},\n      body: undefined,\n      setHeader(name, value) { this.headers[name] = value; },\n      status(code) { this.statusCode = code; return this; },\n      json(payload) { this.body = payload; return this; },\n    };\n    return res;\n  }\n\n  it('returns flattened attributes with count', async () => {\n    const mod = require(path.join('..', 'pages', 'api', 'attribute-groups', 'search.js'));\n    const handler = mod.default || mod;\n\n    const req = { method: 'GET', query: {} };\n    const res = createMockRes();\n\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toBeDefined();\n    expect(typeof res.body.count).toBe('number');\n    expect(Array.isArray(res.body.attributes)).toBe(true);\n    if (res.body.attributes.length > 0) {\n      const a = res.body.attributes[0];\n      expect(a).toHaveProperty('code');\n      expect(a).toHaveProperty('label');\n      expect(a).toHaveProperty('groupId');\n      expect(a).toHaveProperty('groupName');\n    }\n  });\n\n  it('respects the q filter and returns empty for gibberish', async () => {\n    const mod = require(path.join('..', 'pages', 'api', 'attribute-groups', 'search.js'));\n    const handler = mod.default || mod;\n\n    const req = { method: 'GET', query: { q: 'this-term-should-not-exist-xyz123' } };\n    const res = createMockRes();\n\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toBeDefined();\n    expect(Array.isArray(res.body.attributes)).toBe(true);\n    expect(res.body.attributes.length).toBe(0);\n    expect(typeof res.body.count).toBe('number');\n  });\n});\n"
    },
    {
      "path": "README.md",
      "content": "# Simple PIM (Next.js)\n\nThis is a lightweight Product Information Management (PIM) demo built with Next.js and deployed on Vercel. It includes sample data, APIs for products, tags, attributes, attribute groups, and a minimal admin UI.\n\n## Quick start\n\n- Install dependencies: `npm install`\n- Dev server: `npm run dev`\n- Run tests: `npm test`\n\n## Notable features\n\n- Product search, tag filtering, and CSV export on the storefront (home page)\n- Admin dashboard with product stats and tools\n- Attributes and Attribute Groups management and exports\n- Flat Attribute Groups browser with CSV export at `/admin/attribute-groups-flat`\n- Grouped Attribute Groups browser with per-group counts at `/admin/attribute-groups-grouped`\n- Attribute Duplicates audit page to find conflicting attribute codes across groups at `/admin/attribute-groups-duplicates`\n- Attribute Search across all groups at `/admin/attribute-groups-search` (uses `/api/attribute-groups/search`)\n- Tag stats and bulk tag tools\n- Variant generation helpers\n- Per-product flat attributes viewer at `/admin/product/[sku]/attributes` (uses `/api/products/[sku]/attributes/flat`)\n\n## New: Admin Products filters and CSV export\n\nThe Admin Products page now mirrors the storefront filtering experience:\n\n- Search by name, SKU, or description\n- Filter by tags and in-stock only\n- CSV export link that always reflects the current filters\n- All filters are synced to the URL for easy sharing and reproducible exports\n\nYou can find it at `/admin/products`.\n\n## API\n\nExplore the API routes under `/pages/api/*`. Common ones include:\n\n- `/api/products`, `/api/products/[sku]`, `/api/products/search`, `/api/products/export`\n- `/api/products/[sku]/attributes/flat` (flatten a product's Attribute Groups for easy export/inspection)\n- `/api/tags`, `/api/tags/stats`, `/api/tags/export`\n- `/api/attributes`, `/api/attributes/suggest`\n- `/api/attribute-groups`, `/api/attribute-groups/flat`, `/api/attribute-groups/export`, `/api/attribute-groups/grouped`\n- `/api/attribute-groups/duplicates` returns attribute codes that appear in multiple groups, with group counts\n- New: `/api/attribute-groups/search` returns flattened attributes across all groups with filters (q, type, required, groupId)\n\n## Testing\n\nThis project uses Jest and Testing Library. When adding features, ensure you:\n\n- Cover new behavior with tests\n- Keep the main branch green (tests and build passing)\n\nRun tests with `npm test`.\n"
    }
  ]
}