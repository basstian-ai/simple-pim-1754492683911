{
  "files": [
    {
      "path": "data/attribute-groups.json",
      "content": "{\n  \"groups\": [\n    {\n      \"id\": \"basic\",\n      \"name\": \"Basic\",\n      \"attributes\": [\n        { \"code\": \"name\", \"label\": \"Name\", \"type\": \"text\" },\n        { \"code\": \"sku\", \"label\": \"SKU\", \"type\": \"text\" }\n      ]\n    },\n    {\n      \"id\": \"seo\",\n      \"name\": \"SEO\",\n      \"attributes\": [\n        { \"code\": \"meta_title\", \"label\": \"Meta Title\", \"type\": \"text\" },\n        { \"code\": \"meta_description\", \"label\": \"Meta Description\", \"type\": \"textarea\" }\n      ]\n    }\n  ]\n}\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "import fs from 'fs';\nimport path from 'path';\n\nexport default function handler(req, res) {\n  try {\n    const filePath = path.join(process.cwd(), 'data', 'attribute-groups.json');\n    const raw = fs.readFileSync(filePath, 'utf8');\n    const json = JSON.parse(raw);\n    res.status(200).json(json);\n  } catch (e) {\n    res.status(500).json({ error: 'Failed to load attribute groups' });\n  }\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import fs from 'fs';\nimport path from 'path';\n\nexport default function AdminAttributeGroups({ groups }) {\n  return (\n    <div style={{ padding: 24, fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif' }}>\n      <h1 style={{ marginBottom: 8 }}>Attribute Groups</h1>\n      <p style={{ marginTop: 0, color: '#555' }}>\n        Read-only list of attribute groups powering product information. Data served from data/attribute-groups.json.\n      </p>\n      <div style={{ margin: '16px 0' }}>\n        <a href=\"/api/attribute-groups\" style={{ color: '#0366d6' }}>View JSON API</a>\n      </div>\n      <div style={{ overflowX: 'auto' }}>\n        <table style={{ borderCollapse: 'collapse', width: '100%' }}>\n          <thead>\n            <tr>\n              <th style={thStyle}>ID</th>\n              <th style={thStyle}>Name</th>\n              <th style={thStyle}>Attributes</th>\n            </tr>\n          </thead>\n          <tbody>\n            {groups.map((g) => (\n              <tr key={g.id}>\n                <td style={tdStyleMono}>{g.id}</td>\n                <td style={tdStyle}>{g.name}</td>\n                <td style={tdStyle}>\n                  <div style={{ color: '#555' }}>{g.attributes.length} total</div>\n                  <div style={{ marginTop: 4 }}>\n                    {g.attributes.map((a) => (\n                      <span key={a.code} style={chipStyle} title={`${a.label} (${a.type})`}>\n                        {a.label}\n                      </span>\n                    ))}\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nconst thStyle = {\n  textAlign: 'left',\n  borderBottom: '1px solid #eaeaea',\n  padding: '8px 12px',\n  fontSize: 13,\n  color: '#666',\n  letterSpacing: 0.2,\n  textTransform: 'uppercase'\n};\n\nconst tdStyle = {\n  borderBottom: '1px solid #f0f0f0',\n  padding: '12px'\n};\n\nconst tdStyleMono = {\n  ...tdStyle,\n  fontFamily: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace',\n  fontSize: 13,\n  color: '#333'\n};\n\nconst chipStyle = {\n  display: 'inline-block',\n  padding: '2px 8px',\n  marginRight: 6,\n  marginBottom: 6,\n  borderRadius: 12,\n  background: '#f2f4f7',\n  color: '#333',\n  fontSize: 12\n};\n\nexport async function getStaticProps() {\n  const filePath = path.join(process.cwd(), 'data', 'attribute-groups.json');\n  const raw = fs.readFileSync(filePath, 'utf8');\n  const data = JSON.parse(raw);\n  return { props: { groups: data.groups || [] } };\n}\n"
    },
    {
      "path": "__tests__/attribute-groups.test.js",
      "content": "const fs = require('fs');\nconst path = require('path');\n\ndescribe('attribute-groups JSON', () => {\n  test('has groups with expected shape', () => {\n    const filePath = path.join(process.cwd(), 'data', 'attribute-groups.json');\n    const raw = fs.readFileSync(filePath, 'utf8');\n    const data = JSON.parse(raw);\n\n    expect(data).toHaveProperty('groups');\n    expect(Array.isArray(data.groups)).toBe(true);\n    expect(data.groups.length).toBeGreaterThan(0);\n\n    for (const g of data.groups) {\n      expect(typeof g.id).toBe('string');\n      expect(typeof g.name).toBe('string');\n      expect(Array.isArray(g.attributes)).toBe(true);\n      for (const a of g.attributes) {\n        expect(typeof a.code).toBe('string');\n        expect(typeof a.label).toBe('string');\n        expect(typeof a.type).toBe('string');\n      }\n    }\n  });\n});\n"
    }
  ]
}