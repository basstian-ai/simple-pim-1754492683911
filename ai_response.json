{
  "files": [
    {
      "path": "lib/generateNameSuggestions.js",
      "content": "function titleCase(str) {\n  return str\n    .toLowerCase()\n    .split(/\\s+/)\n    .filter(Boolean)\n    .map((w) => w.charAt(0).toUpperCase() + w.slice(1))\n    .join(\" \");\n}\n\nfunction tokenize(text) {\n  if (!text || typeof text !== \"string\") return [];\n  const tokens = text.toLowerCase().match(/[a-z0-9]+/gi) || [];\n  return tokens;\n}\n\nconst STOP_WORDS = new Set([\n  \"the\",\"a\",\"an\",\"and\",\"or\",\"for\",\"with\",\"of\",\"in\",\"on\",\"to\",\"by\",\"from\",\"at\",\"as\",\"is\",\"are\",\"it\",\"this\",\"that\",\"these\",\"those\",\"be\",\"made\",\"make\",\"using\",\"use\",\"you\",\"your\",\"our\",\"their\",\"his\",\"her\",\"its\",\"into\",\"over\",\"under\",\"up\",\"down\",\"out\",\"about\",\"but\",\"not\",\"just\",\"more\",\"most\",\"very\",\"can\",\"will\",\"may\",\"might\",\"should\",\"could\",\"would\",\"than\",\"then\",\"there\",\"here\",\"have\",\"has\",\"had\",\"was\",\"were\",\"am\",\"i\",\"we\",\"they\",\"he\",\"she\",\"them\",\"us\",\"me\",\"my\",\"mine\",\"ours\"\n]);\n\nfunction pickKeywords(description, limit = 6) {\n  const tokens = tokenize(description).filter((t) => !STOP_WORDS.has(t) && t.length >= 3);\n  if (tokens.length === 0) return [];\n  const freq = new Map();\n  for (const t of tokens) {\n    freq.set(t, (freq.get(t) || 0) + 1);\n  }\n  const sorted = Array.from(freq.entries())\n    .sort((a, b) => {\n      if (b[1] !== a[1]) return b[1] - a[1];\n      return b[0].length - a[0].length;\n    })\n    .map(([t]) => t);\n  return sorted.slice(0, limit).map(titleCase);\n}\n\nfunction unique(arr) {\n  const seen = new Set();\n  const out = [];\n  for (const item of arr) {\n    const key = item.trim();\n    if (!key) continue;\n    if (!seen.has(key.toLowerCase())) {\n      seen.add(key.toLowerCase());\n      out.push(key);\n    }\n  }\n  return out;\n}\n\nfunction generateNameSuggestions(description, opts = {}) {\n  const max = Math.max(3, Math.min(10, opts.max || 7));\n  const keywords = pickKeywords(description, 6);\n\n  if (keywords.length === 0) {\n    return unique([\n      \"New Product\",\n      \"Premium Product\",\n      \"Essential Product\",\n      \"Classic Collection\",\n    ]).slice(0, max);\n  }\n\n  const [k1, k2, k3] = keywords;\n  const combos = [];\n\n  // Core patterns\n  combos.push(`${k1} ${k2 || \"Product\"}`.trim());\n  combos.push(`Premium ${k1}`);\n  combos.push(`${k1} ${k2 ? k2 + \" \" : \"\"}Pro`.trim());\n  combos.push(`${k1} ${k2 ? k2 + \" \" : \"\"}Classic`.trim());\n  combos.push(`${k1} ${k2 ? k2 + \" \" : \"\"}Essentials`.trim());\n  combos.push(`${k1} ${k2 ? k2 + \" \" : \"\"}Plus`.trim());\n  combos.push(`${k1} Collection`);\n\n  // Optional extra variety if we have more keywords\n  if (k3) combos.push(`${k1} ${k3}`);\n\n  return unique(combos).slice(0, max);\n}\n\nmodule.exports = { generateNameSuggestions };\n"
    },
    {
      "path": "pages/api/suggest-name.js",
      "content": "const { generateNameSuggestions } = require(\"../../lib/generateNameSuggestions\");\n\nmodule.exports = async function handler(req, res) {\n  if (req.method !== \"POST\") {\n    res.setHeader(\"Allow\", [\"POST\"]);\n    return res.status(405).json({ error: \"Method Not Allowed\" });\n  }\n\n  try {\n    const { description, max } = req.body || {};\n    const suggestions = generateNameSuggestions(description || \"\", { max });\n    return res.status(200).json({ suggestions });\n  } catch (err) {\n    return res.status(400).json({ error: \"Invalid request\" });\n  }\n};\n"
    },
    {
      "path": "pages/admin/ai-tools.js",
      "content": "import { useState } from \"react\";\n\nexport default function AITools() {\n  const [description, setDescription] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(\"\");\n    setSuggestions([]);\n    try {\n      const res = await fetch(\"/api/suggest-name\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ description })\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.error || \"Request failed\");\n      setSuggestions(data.suggestions || []);\n    } catch (err) {\n      setError(err.message || \"Something went wrong\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ maxWidth: 760, margin: \"40px auto\", padding: \"0 16px\" }}>\n      <h1 style={{ marginBottom: 8 }}>AI Tools (Offline)</h1>\n      <p style={{ color: \"#555\", marginTop: 0 }}>\n        Generate product name suggestions from a short description. No external AI used; runs with simple heuristics.\n      </p>\n\n      <form onSubmit={handleSubmit} style={{ marginTop: 16 }}>\n        <label htmlFor=\"desc\" style={{ display: \"block\", fontWeight: 600, marginBottom: 8 }}>\n          Product description\n        </label>\n        <textarea\n          id=\"desc\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          placeholder=\"e.g. Soft cotton t-shirt with classic crew neck and breathable fabric\"\n          rows={5}\n          style={{ width: \"100%\", padding: 12, fontSize: 14, border: \"1px solid #ddd\", borderRadius: 6 }}\n        />\n        <div style={{ marginTop: 12, display: \"flex\", gap: 8 }}>\n          <button\n            type=\"submit\"\n            disabled={loading}\n            style={{\n              background: \"#111\",\n              color: \"#fff\",\n              border: 0,\n              borderRadius: 6,\n              padding: \"10px 14px\",\n              cursor: loading ? \"not-allowed\" : \"pointer\"\n            }}\n          >\n            {loading ? \"Generating...\" : \"Suggest Names\"}\n          </button>\n          {error ? <span style={{ color: \"#b00\" }}>{error}</span> : null}\n        </div>\n      </form>\n\n      {suggestions.length > 0 && (\n        <div style={{ marginTop: 24 }}>\n          <h2 style={{ fontSize: 18, marginBottom: 8 }}>Suggestions</h2>\n          <ul style={{ listStyle: \"disc\", paddingLeft: 18 }}>\n            {suggestions.map((s, i) => (\n              <li key={i} style={{ margin: \"6px 0\" }}>{s}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/generateNameSuggestions.test.js",
      "content": "const assert = require(\"assert\");\nconst { generateNameSuggestions } = require(\"../lib/generateNameSuggestions\");\n\n// Basic smoke tests for the offline name suggestion utility\n(function run() {\n  const samples = [\n    \"Soft cotton t-shirt for men with classic crew neck and breathable fabric.\",\n    \"Lightweight running shoes with breathable mesh and cushioned sole.\",\n    \"\",\n  ];\n\n  // Each sample should yield at least 3 non-empty suggestions\n  for (const desc of samples) {\n    const list = generateNameSuggestions(desc);\n    assert(Array.isArray(list), \"Suggestions should be an array\");\n    assert(list.length >= 3, \"Should return at least 3 suggestions\");\n    list.forEach((s) => assert(typeof s === \"string\" && s.trim().length > 0, \"Suggestion should be a non-empty string\"));\n  }\n\n  // Deterministic check for keyword-driven suggestions\n  const deterministic = generateNameSuggestions(\"breathable cotton crew neck t shirt\");\n  assert(deterministic.some((s) => /cotton/i.test(s)), \"Should include keyword-based suggestion\");\n\n  console.log(\"OK - generateNameSuggestions basic tests passed\");\n})();\n"
    }
  ]
}