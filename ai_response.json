{
  "commit_message": "feat: add Copy SKU button to product list with tests",
  "files": [
    {
      "path": "components/ProductList.js",
      "content": "import React, { useState } from 'react';\n\n// Simple ProductList with a Copy SKU action for each product.\n// Keeps markup minimal and accessible.\nconst copyToClipboard = async (text) => {\n  if (!text) return false;\n  try {\n    if (typeof navigator !== 'undefined' && navigator.clipboard && navigator.clipboard.writeText) {\n      await navigator.clipboard.writeText(text);\n      return true;\n    }\n\n    // Fallback for environments without navigator.clipboard\n    const el = document.createElement('textarea');\n    el.value = text;\n    el.setAttribute('readonly', '');\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n    document.body.appendChild(el);\n    el.select();\n    const successful = document.execCommand('copy');\n    document.body.removeChild(el);\n    return successful;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst ProductItem = ({ product }) => {\n  const [copied, setCopied] = useState(false);\n  const sku = product?.sku || product?.id || '';\n\n  const handleCopy = async () => {\n    const ok = await copyToClipboard(sku);\n    if (ok) {\n      setCopied(true);\n      setTimeout(() => setCopied(false), 1200);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        borderBottom: '1px solid #eee',\n        padding: '0.75rem 0',\n        display: 'flex',\n        gap: '1rem',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}\n      data-testid={`product-item-${sku}`}\n    >\n      <div style={{ flex: 1, minWidth: 0 }}>\n        <div style={{ fontSize: 15, fontWeight: 600 }}>{product?.name || sku}</div>\n        {product?.description && (\n          <div style={{ color: '#666', fontSize: 13, marginTop: 6 }}>{product.description}</div>\n        )}\n        <div style={{ marginTop: 8, color: '#444', fontSize: 12 }}>\n          <strong>SKU:</strong> <span data-testid={`sku-${sku}`}>{sku}</span>\n        </div>\n      </div>\n\n      <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n        <button\n          type=\"button\"\n          onClick={handleCopy}\n          aria-label={`Copy SKU ${sku}`}\n          style={{\n            padding: '0.35rem 0.6rem',\n            borderRadius: 6,\n            border: '1px solid #ddd',\n            background: copied ? '#e7f1ff' : 'white',\n            cursor: 'pointer',\n            fontSize: 13,\n          }}\n        >\n          {copied ? 'Copied!' : 'Copy SKU'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst ProductList = ({ products = [] }) => {\n  if (!Array.isArray(products) || products.length === 0) {\n    return <div style={{ color: '#666', padding: '1rem 0' }}>No products found</div>;\n  }\n\n  return (\n    <div>\n      {products.map((p) => (\n        <ProductItem key={p.sku || p.id || p.name} product={p} />\n      ))}\n    </div>\n  );\n};\n\nexport default ProductList;\n"
    },
    {
      "path": "tests/ProductList.test.js",
      "content": "import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport ProductList from '../components/ProductList';\n\ndescribe('ProductList', () => {\n  beforeEach(() => {\n    // Provide a clipboard mock for tests\n    Object.defineProperty(navigator, 'clipboard', {\n      value: {\n        writeText: jest.fn().mockResolvedValue(undefined),\n      },\n      configurable: true,\n    });\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  it('renders products and shows Copy SKU button that writes to clipboard', async () => {\n    const products = [\n      { sku: 'SKU123', name: 'Test product', description: 'A product for testing' },\n    ];\n\n    render(<ProductList products={products} />);\n\n    expect(screen.getByText('Test product')).toBeInTheDocument();\n    const skuEl = screen.getByTestId('sku-SKU123');\n    expect(skuEl).toBeInTheDocument();\n    expect(skuEl.textContent).toBe('SKU123');\n\n    const button = screen.getByRole('button', { name: /copy sku sku123/i });\n    expect(button).toBeInTheDocument();\n\n    fireEvent.click(button);\n\n    await waitFor(() => {\n      expect(navigator.clipboard.writeText).toHaveBeenCalledWith('SKU123');\n    });\n\n    // After successful copy, button text should change to Copied!\n    expect(button.textContent).toBe('Copied!');\n  });\n\n  it('shows friendly message when no products available', () => {\n    render(<ProductList products={[]} />);\n    expect(screen.getByText(/no products found/i)).toBeInTheDocument();\n  });\n});\n"
    }
  ]
}