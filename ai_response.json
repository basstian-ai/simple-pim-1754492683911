{
  "files": [
    {
      "path": "data/attributes.json",
      "content": "[\n  {\n    \"id\": \"color\",\n    \"code\": \"color\",\n    \"label\": \"Color\",\n    \"type\": \"text\",\n    \"options\": [\"Red\", \"Blue\", \"Green\"]\n  },\n  {\n    \"id\": \"size\",\n    \"code\": \"size\",\n    \"label\": \"Size\",\n    \"type\": \"text\",\n    \"options\": [\"S\", \"M\", \"L\"]\n  },\n  {\n    \"id\": \"material\",\n    \"code\": \"material\",\n    \"label\": \"Material\",\n    \"type\": \"text\",\n    \"options\": [\"Cotton\", \"Wool\", \"Polyester\"]\n  }\n]\n"
    },
    {
      "path": "pages/api/attributes/index.js",
      "content": "const fs = require('fs');\nconst path = require('path');\n\nfunction handler(req, res) {\n  if (req.method !== 'GET') {\n    res.statusCode = 405;\n    res.setHeader('Allow', 'GET');\n    res.json({ error: 'Method Not Allowed' });\n    return;\n  }\n\n  try {\n    const filePath = path.join(process.cwd(), 'data', 'attributes.json');\n    const raw = fs.readFileSync(filePath, 'utf8');\n    const data = JSON.parse(raw);\n    res.statusCode = 200;\n    res.json(data);\n  } catch (e) {\n    res.statusCode = 500;\n    res.json({ error: 'Failed to load attributes' });\n  }\n}\n\nmodule.exports = handler;\nmodule.exports.handler = handler;\n"
    },
    {
      "path": "pages/attributes/index.js",
      "content": "import React, { useEffect, useState } from 'react';\n\nexport default function AttributesPage() {\n  const [attrs, setAttrs] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let mounted = true;\n    fetch('/api/attributes')\n      .then((r) => {\n        if (!r.ok) throw new Error('Failed to load attributes');\n        return r.json();\n      })\n      .then((data) => {\n        if (!mounted) return;\n        setAttrs(Array.isArray(data) ? data : []);\n        setLoading(false);\n      })\n      .catch((err) => {\n        if (!mounted) return;\n        setError(err.message || 'Error loading attributes');\n        setLoading(false);\n      });\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return (\n    <div style={{ padding: 20 }}>\n      <h1>Attributes</h1>\n      {loading && <p>Loadingâ€¦</p>}\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n      {!loading && !error && (\n        attrs.length === 0 ? (\n          <p>No attributes found.</p>\n        ) : (\n          <table border=\"1\" cellPadding=\"8\" cellSpacing=\"0\">\n            <thead>\n              <tr>\n                <th>Code</th>\n                <th>Label</th>\n                <th>Type</th>\n                <th>Options</th>\n              </tr>\n            </thead>\n            <tbody>\n              {attrs.map((a) => (\n                <tr key={a.id || a.code}>\n                  <td>{a.code}</td>\n                  <td>{a.label}</td>\n                  <td>{a.type}</td>\n                  <td>{Array.isArray(a.options) ? a.options.join(', ') : ''}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/api-attributes.test.js",
      "content": "const assert = require('assert');\nconst path = require('path');\n\nconst handler = require(path.join(__dirname, '..', 'pages', 'api', 'attributes'));\n\nfunction mockRes() {\n  const res = {};\n  res.statusCode = 200;\n  res.headers = {};\n  res.setHeader = (k, v) => { res.headers[k] = v; };\n  res.status = (code) => { res.statusCode = code; return res; };\n  res.json = (data) => { res._data = data; return res; };\n  return res;\n}\n\n(async () => {\n  const req = { method: 'GET' };\n  const res = mockRes();\n  await Promise.resolve(handler(req, res));\n\n  assert.strictEqual(res.statusCode, 200, 'Expected 200 OK');\n  assert.ok(Array.isArray(res._data), 'Expected array of attributes');\n  assert.ok(res._data.length >= 1, 'Expected at least one attribute');\n  const item = res._data[0];\n  ['code', 'label', 'type'].forEach((k) => {\n    assert.ok(Object.prototype.hasOwnProperty.call(item, k), `Attribute missing ${k}`);\n  });\n\n  console.log('api-attributes.test.js passed');\n})().catch((err) => {\n  console.error(err);\n  process.exit(1);\n});\n"
    }
  ]
}