{
  "files": [
    {
      "path": "lib/bulkTags.js",
      "content": "'use strict';\n\nfunction normalizeTag(tag) {\n  if (tag == null) return '';\n  return String(tag).trim();\n}\n\nfunction unique(arr) {\n  const set = new Set();\n  const out = [];\n  for (const v of arr) {\n    const k = v; // keep case as-is, uniqueness by exact string\n    if (!set.has(k)) {\n      set.add(k);\n      out.push(v);\n    }\n  }\n  return out;\n}\n\nfunction applyBulkTags(products, ops) {\n  const add = Array.isArray(ops && ops.add) ? ops.add.map(normalizeTag).filter(Boolean) : [];\n  const remove = Array.isArray(ops && ops.remove) ? ops.remove.map(normalizeTag).filter(Boolean) : [];\n  const targetSkus = new Set(\n    Array.isArray(ops && ops.skus)\n      ? ops.skus.map((s) => String(s).trim()).filter(Boolean)\n      : []\n  );\n\n  const results = [];\n  let matched = 0;\n  let updated = 0;\n  let addedCount = 0;\n  let removedCount = 0;\n\n  for (const p of Array.isArray(products) ? products : []) {\n    if (!targetSkus.size || targetSkus.has(p.sku)) {\n      matched += 1;\n      const before = Array.isArray(p.tags) ? [...p.tags] : [];\n      let after = [...before];\n\n      // add\n      for (const t of add) {\n        if (!after.includes(t)) {\n          after.push(t);\n          addedCount += 1;\n        }\n      }\n\n      // remove\n      if (remove.length) {\n        const sizeBefore = after.length;\n        after = after.filter((t) => !remove.includes(t));\n        removedCount += sizeBefore - after.length;\n      }\n\n      after = unique(after);\n\n      const changed = JSON.stringify(before) !== JSON.stringify(after);\n      if (changed) updated += 1;\n\n      results.push({\n        sku: p.sku,\n        before,\n        after,\n        added: add.filter((t) => !before.includes(t)),\n        removed: remove.filter((t) => before.includes(t))\n      });\n    }\n  }\n\n  return {\n    items: results,\n    stats: { matched, updated, added: addedCount, removed: removedCount }\n  };\n}\n\nmodule.exports = { applyBulkTags };\n"
    },
    {
      "path": "pages/api/products/tags/bulk-preview.js",
      "content": "'use strict';\n\nconst { applyBulkTags } = require('../../../../lib/bulkTags');\nconst { getProducts } = require('../../../../lib/products');\n\nfunction parseSkuList(input) {\n  if (!input) return [];\n  if (Array.isArray(input)) return input.map((s) => String(s).trim()).filter(Boolean);\n  // split by newline, comma or whitespace\n  return String(input)\n    .split(/[^A-Za-z0-9_\\-\\.]+/g)\n    .map((s) => s.trim())\n    .filter(Boolean);\n}\n\nmodule.exports = async function handler(req, res) {\n  try {\n    if (req.method !== 'POST') {\n      res.setHeader('Allow', 'POST');\n      return res.status(405).json({ error: 'Method Not Allowed' });\n    }\n\n    const body = req.body || {};\n    const skus = parseSkuList(body.skus || body.skuList || body.sku);\n    const add = Array.isArray(body.add) ? body.add : (body.add ? [body.add] : []);\n    const remove = Array.isArray(body.remove) ? body.remove : (body.remove ? [body.remove] : []);\n\n    if (!skus.length) {\n      return res.status(400).json({ error: 'Provide at least one SKU in skus[] or a string list.' });\n    }\n\n    const products = (await getProducts()) || [];\n    const { items, stats } = applyBulkTags(products, { skus, add, remove });\n\n    return res.status(200).json({ count: items.length, items, stats });\n  } catch (err) {\n    console.error('bulk-preview error', err);\n    return res.status(500).json({ error: 'Bulk tag preview failed' });\n  }\n};\n"
    },
    {
      "path": "pages/admin/bulk-tags.js",
      "content": "import React from 'react';\nimport Layout from '../../components/Layout';\n\nexport default function BulkTagsAdminPage() {\n  const [skuText, setSkuText] = React.useState('');\n  const [addText, setAddText] = React.useState('');\n  const [removeText, setRemoveText] = React.useState('');\n  const [result, setResult] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [loading, setLoading] = React.useState(false);\n\n  async function onPreview(e) {\n    e.preventDefault();\n    setError(null);\n    setResult(null);\n    setLoading(true);\n    try {\n      const res = await fetch('/api/products/tags/bulk-preview', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          skus: skuText,\n          add: addText.split(',').map((s) => s.trim()).filter(Boolean),\n          remove: removeText.split(',').map((s) => s.trim()).filter(Boolean),\n        }),\n      });\n      const json = await res.json();\n      if (!res.ok) throw new Error(json && json.error ? json.error : 'Request failed');\n      setResult(json);\n    } catch (err) {\n      setError(err.message || String(err));\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <Layout title=\"Bulk Tagging Preview\">\n      <div style={container}>\n        <h1>Bulk Tagging Preview</h1>\n        <p>Paste SKUs and specify tags to add or remove. This tool previews changes and does not persist updates.</p>\n\n        <form onSubmit={onPreview} style={form}>\n          <div style={row}> \n            <label style={label}>SKUs</label>\n            <textarea\n              style={textarea}\n              rows={6}\n              value={skuText}\n              onChange={(e) => setSkuText(e.target.value)}\n              placeholder=\"One per line or separated by commas\"\n            />\n          </div>\n\n          <div style={row}> \n            <label style={label}>Add tags</label>\n            <input\n              style={input}\n              value={addText}\n              onChange={(e) => setAddText(e.target.value)}\n              placeholder=\"comma,separated,tags\"\n            />\n          </div>\n\n          <div style={row}> \n            <label style={label}>Remove tags</label>\n            <input\n              style={input}\n              value={removeText}\n              onChange={(e) => setRemoveText(e.target.value)}\n              placeholder=\"comma,separated,tags\"\n            />\n          </div>\n\n          <button type=\"submit\" disabled={loading} style={button}>\n            {loading ? 'Previewingâ€¦' : 'Preview Changes'}\n          </button>\n        </form>\n\n        {error ? (\n          <div style={errorBox}>{error}</div>\n        ) : null}\n\n        {result ? (\n          <div style={{ marginTop: 24 }}>\n            <h2>Result</h2>\n            <div style={{ color: '#374151' }}>\n              Matched: <strong>{result.stats.matched}</strong>, Updated: <strong>{result.stats.updated}</strong>,\n              Added tags: <strong>{result.stats.added}</strong>, Removed tags: <strong>{result.stats.removed}</strong>\n            </div>\n            <table style={table}>\n              <thead>\n                <tr>\n                  <th style={th}>SKU</th>\n                  <th style={th}>Before</th>\n                  <th style={th}>After</th>\n                  <th style={th}>Added</th>\n                  <th style={th}>Removed</th>\n                </tr>\n              </thead>\n              <tbody>\n                {result.items.map((it) => (\n                  <tr key={it.sku}>\n                    <td style={td}><code>{it.sku}</code></td>\n                    <td style={td}>{Array.isArray(it.before) ? it.before.join(', ') : ''}</td>\n                    <td style={td}>{Array.isArray(it.after) ? it.after.join(', ') : ''}</td>\n                    <td style={td}>{Array.isArray(it.added) ? it.added.join(', ') : ''}</td>\n                    <td style={td}>{Array.isArray(it.removed) ? it.removed.join(', ') : ''}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : null}\n      </div>\n    </Layout>\n  );\n}\n\nconst container = { padding: 20, maxWidth: 960, margin: '0 auto' };\nconst form = { display: 'flex', flexDirection: 'column', gap: 12 };\nconst row = { display: 'flex', flexDirection: 'column', gap: 6 };\nconst label = { fontWeight: 600 };\nconst textarea = { width: '100%', fontFamily: 'monospace', border: '1px solid #e5e7eb', borderRadius: 6, padding: 8 };\nconst input = { width: '100%', border: '1px solid #e5e7eb', borderRadius: 6, padding: 8 };\nconst button = { width: 'fit-content', background: '#111827', color: '#fff', border: 0, borderRadius: 6, padding: '10px 14px', cursor: 'pointer' };\nconst errorBox = { marginTop: 12, background: '#fef2f2', color: '#991b1b', border: '1px solid #fecaca', padding: 10, borderRadius: 6 };\nconst table = { width: '100%', borderCollapse: 'collapse', marginTop: 12 };\nconst th = { textAlign: 'left', borderBottom: '1px solid #e5e7eb', padding: '8px 6px' };\nconst td = { borderBottom: '1px solid #f3f4f6', padding: '8px 6px', verticalAlign: 'top' };\n"
    },
    {
      "path": "tests/api-products-bulk-preview.test.js",
      "content": "const handler = require('../pages/api/products/tags/bulk-preview.js');\nconst sampleProducts = require('../lib/sampleProducts');\n\nfunction createMockRes() {\n  const headers = {};\n  let statusCode = 200;\n  let body;\n  const res = {\n    setHeader: (k, v) => { headers[k] = v; },\n    status: (c) => { statusCode = c; return res; },\n    json: (b) => { body = b; return res; },\n  };\n  Object.defineProperty(res, 'headers', { get: () => headers });\n  Object.defineProperty(res, 'statusCode', { get: () => statusCode });\n  Object.defineProperty(res, 'body', { get: () => body });\n  return res;\n}\n\ndescribe('POST /api/products/tags/bulk-preview', () => {\n  test('previews adding a tag for provided SKUs', async () => {\n    const tag = '__bulk_tag__';\n    const skus = sampleProducts.slice(0, 2).map((p) => p.sku);\n\n    const req = { method: 'POST', body: { skus, add: [tag] } };\n    const res = createMockRes();\n\n    await handler(req, res);\n\n    expect(res.statusCode).toBe(200);\n    expect(res.body).toBeDefined();\n    expect(res.body.count).toBe(2);\n    expect(res.body.stats.matched).toBe(2);\n    expect(res.body.stats.added).toBeGreaterThan(0);\n    for (const item of res.body.items) {\n      expect(item.after).toEqual(expect.arrayContaining([tag]));\n    }\n  });\n\n  test('rejects non-POST methods', async () => {\n    const req = { method: 'GET' };\n    const res = createMockRes();\n    await handler(req, res);\n    expect(res.statusCode).toBe(405);\n    expect(res.headers.Allow).toBe('POST');\n  });\n\n  test('requires at least one SKU', async () => {\n    const req = { method: 'POST', body: { add: ['x'] } };\n    const res = createMockRes();\n    await handler(req, res);\n    expect(res.statusCode).toBe(400);\n    expect(res.body.error).toMatch(/Provide at least one SKU/);\n  });\n});\n"
    },
    {
      "path": "tests/bulkTags.test.js",
      "content": "const { applyBulkTags } = require('../lib/bulkTags');\n\ndescribe('applyBulkTags', () => {\n  test('adds and removes tags without mutating input', () => {\n    const products = [\n      { sku: 'A', tags: ['alpha', 'beta'] },\n      { sku: 'B', tags: [] },\n    ];\n\n    const res = applyBulkTags(products, { skus: ['A', 'B'], add: ['new'], remove: ['beta'] });\n\n    // Input not mutated\n    expect(products[0].tags).toEqual(['alpha', 'beta']);\n\n    // Stats\n    expect(res.stats.matched).toBe(2);\n    expect(res.stats.updated).toBe(2);\n    expect(res.stats.added).toBe(2 - 0); // 'new' added to both\n    expect(res.stats.removed).toBe(1); // 'beta' removed from A only\n\n    // Items\n    const a = res.items.find((i) => i.sku === 'A');\n    const b = res.items.find((i) => i.sku === 'B');\n\n    expect(a.before).toEqual(['alpha', 'beta']);\n    expect(a.after).toEqual(expect.arrayContaining(['alpha', 'new']));\n    expect(a.after).not.toEqual(expect.arrayContaining(['beta']));\n\n    expect(b.before).toEqual([]);\n    expect(b.after).toEqual(['new']);\n  });\n\n  test('handles empty ops gracefully', () => {\n    const products = [ { sku: 'X', tags: ['t'] } ];\n    const res = applyBulkTags(products, { skus: ['X'] });\n    expect(res.stats.matched).toBe(1);\n    expect(res.stats.updated).toBe(0);\n    expect(res.items[0].after).toEqual(['t']);\n  });\n});\n"
    },
    {
      "path": "README.md",
      "content": "# Simple PIM\n\nA modern Product Information Management platform that centralizes product data, supports omnichannel distribution, and enables teams to collaborate efficiently.\n\n## Vision\n\nThe long-term goal is a scalable, extensible system comparable to [Bluestone PIM](https://help.bluestonepim.com/1-get-started-with-bluestonepim) and [Akeneo](https://help.akeneo.com/serenity).\n\n## Features\n\n- Dashboard & Admin Interface: Interactive dashboard showing product counts, enrichment status, and recent activity.\n- Product Management: Admin panel with product list, search/filter, and a tabbed product detail editor.\n- Attribute Management: Create and manage attribute groups.\n- Attribute Export: Download a flattened CSV of all attributes across groups at /api/attribute-groups/flat/export.\n- AI-Powered Suggestions: Get AI-based suggestions for product names and attributes.\n- Data Export: Export products and tags to CSV.\n- Tagging and Filtering: Advanced filtering options, including by tags and stock status.\n- Shareable URLs: Filters are reflected in the URL for easy sharing.\n- Bulk Tagging Preview: Admin tool at /admin/bulk-tags with API /api/products/tags/bulk-preview to preview adding/removing tags to many SKUs (no persistence).\n\n## Getting Started\n\nTo get a local copy up and running, follow these simple steps.\n\n### Prerequisites\n\n- npm\n  ```sh\n  npm install npm@latest -g\n  ```\n\n### Installation\n\n1. Clone the repo\n   ```sh\n   git clone https://github.com/basstian-ai/simple-pim-1754492683911.git\n   ```\n2. Install NPM packages\n   ```sh\n   npm install\n   ```\n3. Run the development server\n   ```sh\n   npm run dev\n   ```\n4. Open your browser and navigate to http://localhost:3000\n\n## PIM Development Roadmap\n\n### 1. Dashboard & Admin Interface (Immediate Priority)\n- Build an interactive dashboard showing product counts, enrichment status and recent activity.\n- Implement a responsive admin panel with product list, search/filter, and a tabbed product detail editor.\n- Provide inline editing, variant management and attribute grouping.\n- Deliver navigation, breadcrumbs and user-friendly layouts across desktop and mobile.\n\n### 2. Sample Product Data & Examples (Immediate Priority)\n- Create a realistic sample dataset with categories, attributes, variants and media.\n- Use this dataset in documentation, tests and UI examples.\n- Provide scripts to import/export the sample data.\n\n### 3. Core PIM Foundation\n- Design database schema for products, categories, attributes, variants and media with versioning/audit tables.\n- Expose CRUD APIs for all core entities (REST and GraphQL).\n- Include basic unit tests for APIs and core services.\n\n### 4. Enrichment & Workflow\n- Implement enrichment dashboard showing completeness per channel/locale.\n- Support bulk editing and validation rules for required attributes.\n- Add localization with translation service integration.\n- Provide workflow states (draft â†’ review â†’ approved â†’ published) with transition rules.\n\n### 5. Import/Export & Integration\n- Create CSV/Excel import pipeline with mapping and error reporting.\n- Build connector framework for channel exports (eCommerce platforms, marketplaces, print).\n- Deliver event-driven updates via webhooks.\n- Harden public APIs for thirdâ€‘party consumption.\n\n### 6. Advanced Capabilities\n- Add DAM module for managing and transforming assets.\n- Support product relationships (bundles, accessories, replacements).\n- Introduce AIâ€‘assisted enrichment such as automatic descriptions and categorization.\n- Enhance search with facets, synonyms and suggestions.\n\n### 7. Governance & Scale\n- Implement RBAC with fineâ€‘grained permissions and SSO support.\n- Provide audit logging for user actions and API calls.\n- Add monitoring, backups and horizontal scaling strategy.\n\n## Success Metrics\n- Data completeness and validation error rates.\n- Timeâ€‘toâ€‘market for new products.\n- Adoption of channels/locales and workflow efficiency.\n\n\n## License\n\nDistributed under the MIT License. See LICENSE for more information.\n"
    },
    {
      "path": "changelog.md",
      "content": "# Changelog\n\nAll notable changes to this project will be a document in this file.\n\nThe format is based on Keep a Changelog (https://keepachangelog.com/en/1.0.0/),\nand this project adheres to Semantic Versioning (https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n### Added\n- Dashboard API and Admin Dashboard page with product stats and top tags.\n- Product search suggestions API.\n- CSV export for tags via `/api/tags/export` and a quick link on the home page.\n- AI Product Name Suggestion API and UI page.\n- Shareable URL filters (search, tags, inStock) to product list and new `/tags` page for browsing tags.\n- Attribute Groups (API + simple admin UI).\n- In-stock filter to product listing (UI + API).\n- Product detail API and page by SKU.\n- Product stats API and UI summary.\n- Product-based attribute suggestion API and admin UI.\n- Tag filtering support to `/api/products`.\n- Tag-based product filtering (API + UI).\n- Client-side Attribute Groups admin page at `/admin/attribute-groups` with localStorage persistence.\n- Flat attributes CSV export at `/api/attribute-groups/flat/export`.\n- Bulk Tagging Preview API `/api/products/tags/bulk-preview` and admin page `/admin/bulk-tags`.\n"
    }
  ]
}