{
  "files": [
    {
      "path": "lib/store/attributeGroups.js",
      "content": "'use strict';\n\n// Simple in-memory store for Attribute Groups\n// Persists in-memory across hot reloads via globalThis during a server process lifetime\nconst GLOBAL_KEY = '__SIMPLE_PIM_ATTRIBUTE_GROUPS__';\n\nfunction initStore() {\n  if (!globalThis[GLOBAL_KEY]) {\n    globalThis[GLOBAL_KEY] = {\n      seq: 1,\n      groups: []\n    };\n  }\n  return globalThis[GLOBAL_KEY];\n}\n\nfunction nextId(store) {\n  const id = String(store.seq++);\n  return id;\n}\n\nfunction listGroups() {\n  const store = initStore();\n  // Return deep copy to avoid external mutation\n  return JSON.parse(JSON.stringify(store.groups));\n}\n\nfunction getGroup(id) {\n  const store = initStore();\n  const g = store.groups.find((gr) => String(gr.id) === String(id));\n  return g ? JSON.parse(JSON.stringify(g)) : null;\n}\n\nfunction createGroup({ name, description }) {\n  const store = initStore();\n  if (!name || typeof name !== 'string' || !name.trim()) {\n    const err = new Error('name is required');\n    err.statusCode = 400;\n    throw err;\n  }\n  const now = new Date().toISOString();\n  const group = {\n    id: nextId(store),\n    name: name.trim(),\n    description: description ? String(description) : '',\n    attributes: [],\n    createdAt: now,\n    updatedAt: now\n  };\n  store.groups.push(group);\n  return JSON.parse(JSON.stringify(group));\n}\n\nfunction updateGroup(id, patch) {\n  const store = initStore();\n  const idx = store.groups.findIndex((gr) => String(gr.id) === String(id));\n  if (idx === -1) {\n    const err = new Error('group not found');\n    err.statusCode = 404;\n    throw err;\n  }\n  const current = store.groups[idx];\n  const updated = { ...current };\n\n  if (patch.name !== undefined) {\n    const name = String(patch.name).trim();\n    if (!name) {\n      const err = new Error('name cannot be empty');\n      err.statusCode = 400;\n      throw err;\n    }\n    updated.name = name;\n  }\n  if (patch.description !== undefined) {\n    updated.description = String(patch.description);\n  }\n  if (Array.isArray(patch.attributes)) {\n    // Basic normalization of attributes\n    updated.attributes = patch.attributes.map((a, i) => normalizeAttribute(a, current.attributes[i]));\n  }\n  updated.updatedAt = new Date().toISOString();\n  store.groups[idx] = updated;\n  return JSON.parse(JSON.stringify(updated));\n}\n\nfunction deleteGroup(id) {\n  const store = initStore();\n  const idx = store.groups.findIndex((gr) => String(gr.id) === String(id));\n  if (idx === -1) {\n    const err = new Error('group not found');\n    err.statusCode = 404;\n    throw err;\n  }\n  const [removed] = store.groups.splice(idx, 1);\n  return JSON.parse(JSON.stringify(removed));\n}\n\nfunction normalizeAttribute(attr, previous) {\n  const obj = { ...previous, ...attr };\n  if (!obj.id) obj.id = generateAttrId();\n  if (!obj.name || !String(obj.name).trim()) {\n    const err = new Error('attribute.name is required');\n    err.statusCode = 400;\n    throw err;\n  }\n  obj.name = String(obj.name).trim();\n  obj.type = obj.type ? String(obj.type) : 'text';\n  if (obj.type === 'select' && !Array.isArray(obj.values)) {\n    obj.values = [];\n  }\n  return obj;\n}\n\nfunction generateAttrId() {\n  const store = initStore();\n  // Reuse global seq for simplicity but prefix with 'a'\n  return 'a' + nextId(store);\n}\n\nmodule.exports = {\n  listGroups,\n  getGroup,\n  createGroup,\n  updateGroup,\n  deleteGroup\n};\n"
    },
    {
      "path": "pages/api/attribute-groups.js",
      "content": "import { NextApiRequest, NextApiResponse } from 'next';\nconst store = require('../../lib/store/attributeGroups');\n\nexport default async function handler(req, res) {\n  try {\n    const { method } = req;\n    if (method === 'GET') {\n      const { id } = req.query;\n      if (id) {\n        const group = store.getGroup(id);\n        if (!group) return res.status(404).json({ error: 'not_found' });\n        return res.status(200).json(group);\n      }\n      const groups = store.listGroups();\n      return res.status(200).json({ items: groups, total: groups.length });\n    }\n\n    if (method === 'POST') {\n      const { name, description } = req.body || {};\n      const created = store.createGroup({ name, description });\n      return res.status(201).json(created);\n    }\n\n    if (method === 'PUT') {\n      const { id, name, description, attributes } = req.body || {};\n      if (!id) return res.status(400).json({ error: 'id_required' });\n      const updated = store.updateGroup(id, { name, description, attributes });\n      return res.status(200).json(updated);\n    }\n\n    if (method === 'DELETE') {\n      const id = req.query.id || (req.body && req.body.id);\n      if (!id) return res.status(400).json({ error: 'id_required' });\n      const removed = store.deleteGroup(id);\n      return res.status(200).json(removed);\n    }\n\n    res.setHeader('Allow', 'GET,POST,PUT,DELETE');\n    return res.status(405).json({ error: 'method_not_allowed' });\n  } catch (err) {\n    const status = err && err.statusCode ? err.statusCode : 500;\n    return res.status(status).json({ error: err.message || 'internal_error' });\n  }\n}\n"
    },
    {
      "path": "pages/admin/attribute-groups.js",
      "content": "import React, { useEffect, useState } from 'react';\n\nexport default function AttributeGroupsAdmin() {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [form, setForm] = useState({ name: '', description: '' });\n  const [submitting, setSubmitting] = useState(false);\n\n  async function load() {\n    setLoading(true);\n    setError('');\n    try {\n      const res = await fetch('/api/attribute-groups');\n      if (!res.ok) throw new Error('Failed to load');\n      const data = await res.json();\n      setItems(data.items || []);\n    } catch (e) {\n      setError(e.message || 'Error');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  function onChange(e) {\n    const { name, value } = e.target;\n    setForm((f) => ({ ...f, [name]: value }));\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    if (!form.name.trim()) return;\n    setSubmitting(true);\n    try {\n      const res = await fetch('/api/attribute-groups', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name: form.name, description: form.description })\n      });\n      if (!res.ok) throw new Error('Failed to create');\n      setForm({ name: '', description: '' });\n      await load();\n    } catch (e) {\n      alert(e.message || 'Error');\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  async function onDelete(id) {\n    if (!confirm('Delete this attribute group?')) return;\n    try {\n      const res = await fetch(`/api/attribute-groups?id=${encodeURIComponent(id)}`, { method: 'DELETE' });\n      if (!res.ok) throw new Error('Failed to delete');\n      await load();\n    } catch (e) {\n      alert(e.message || 'Error');\n    }\n  }\n\n  return (\n    <div style={{ maxWidth: 900, margin: '20px auto', padding: '0 16px' }}>\n      <h1>Attribute Groups</h1>\n\n      <section style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: 16, marginBottom: 24 }}>\n        <h2 style={{ marginTop: 0 }}>Create New Group</h2>\n        <form onSubmit={onSubmit} style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>\n          <input\n            name=\"name\"\n            placeholder=\"Name\"\n            value={form.name}\n            onChange={onChange}\n            required\n            style={{ flex: '1 1 220px', padding: 8 }}\n          />\n          <input\n            name=\"description\"\n            placeholder=\"Description (optional)\"\n            value={form.description}\n            onChange={onChange}\n            style={{ flex: '2 1 320px', padding: 8 }}\n          />\n          <button type=\"submit\" disabled={submitting} style={{ padding: '8px 12px' }}>\n            {submitting ? 'Creating…' : 'Add Group'}\n          </button>\n        </form>\n      </section>\n\n      <section>\n        <h2 style={{ marginTop: 0 }}>Existing Groups</h2>\n        {loading ? (\n          <div>Loading…</div>\n        ) : error ? (\n          <div style={{ color: 'red' }}>{error}</div>\n        ) : items.length === 0 ? (\n          <div>No attribute groups yet.</div>\n        ) : (\n          <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>\n            {items.map((g) => (\n              <li key={g.id} style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: 12, marginBottom: 12 }}>\n                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: 12 }}>\n                  <div>\n                    <div style={{ fontWeight: 600 }}>{g.name}</div>\n                    {g.description ? <div style={{ color: '#6b7280' }}>{g.description}</div> : null}\n                    <div style={{ color: '#9ca3af', fontSize: 12 }}>ID: {g.id}</div>\n                  </div>\n                  <div>\n                    <button onClick={() => onDelete(g.id)} style={{ padding: '6px 10px', background: '#ef4444', color: 'white', border: 0, borderRadius: 6 }}>\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/attributeGroupsStore.test.js",
      "content": "'use strict';\n\nconst assert = require('assert');\nconst store = require('../lib/store/attributeGroups');\n\n// Simple smoke test for Attribute Groups store\n(function run() {\n  // Ensure starting from a clean-ish state\n  const before = store.listGroups();\n\n  // Create\n  const g1 = store.createGroup({ name: 'General', description: 'Default attributes' });\n  assert.ok(g1.id, 'created group should have id');\n  assert.strictEqual(g1.name, 'General');\n\n  // List\n  const list1 = store.listGroups();\n  assert.ok(Array.isArray(list1));\n  assert.ok(list1.length >= 1);\n\n  // Get\n  const g1f = store.getGroup(g1.id);\n  assert.strictEqual(g1f.id, g1.id);\n\n  // Update\n  const g1u = store.updateGroup(g1.id, { name: 'Basics' });\n  assert.strictEqual(g1u.name, 'Basics');\n\n  // Delete\n  const removed = store.deleteGroup(g1.id);\n  assert.strictEqual(removed.id, g1.id);\n\n  const after = store.listGroups();\n  assert.strictEqual(after.length, Math.max(0, before.length));\n\n  // Edge cases\n  let threw = false;\n  try {\n    store.createGroup({ name: '   ' });\n  } catch (e) {\n    threw = true;\n  }\n  assert.ok(threw, 'should validate name');\n})();\n\nconsole.log('attributeGroupsStore.test.js: OK');\n"
    }
  ]
}