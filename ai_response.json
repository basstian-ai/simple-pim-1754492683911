{
  "files": [
    {
      "path": "components/AttributeGroupList.js",
      "content": "import React from 'react';\nimport Link from 'next/link';\n\nexport default function AttributeGroupList({ groups }) {\n  if (!groups || groups.length === 0) {\n    return <p>No attribute groups defined.</p>;\n  }\n\n  return (\n    <div>\n      {groups.map((group) => (\n        <div key={group.id} style={{ border: '1px solid #e5e7eb', borderRadius: 8, padding: 16, marginBottom: 16 }}>\n          <div style={{ display: 'flex', alignItems: 'baseline', justifyContent: 'space-between' }}>\n            <h2 style={{ margin: 0 }}>\n              <Link href={`/admin/attribute-group/${group.id}`}>\n                <a style={{ color: '#111827', textDecoration: 'none' }}>{group.name}</a>\n              </Link>\n            </h2>\n            <code style={{ color: '#6b7280' }}>{group.id}</code>\n          </div>\n          {group.description ? (\n            <p style={{ color: '#374151', marginTop: 8 }}>{group.description}</p>\n          ) : null}\n          <ul style={{ listStyle: 'none', paddingLeft: 0, marginTop: 12 }}>\n            {group.attributes.map((attr) => (\n              <li key={attr.code} style={{ padding: '8px 0', borderTop: '1px solid #f3f4f6' }}>\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <div>\n                    <strong>{attr.label || attr.name || attr.code}</strong>\n                    <span style={{ marginLeft: 8, color: '#6b7280' }}>({attr.code})</span>\n                  </div>\n                  <span style={{ fontSize: 12, padding: '2px 6px', background: '#eef2ff', color: '#3730a3', borderRadius: 6 }}>\n                    {attr.type}\n                  </span>\n                </div>\n                {Array.isArray(attr.options) && attr.options.length > 0 ? (\n                  <div style={{ marginTop: 6, color: '#374151' }}>\n                    Options: {attr.options.join(', ')}\n                  </div>\n                ) : null}\n                {attr.unit ? (\n                  <div style={{ marginTop: 6, color: '#374151' }}>Unit: {attr.unit}</div>\n                ) : null}\n                {attr.required ? (\n                  <div style={{ marginTop: 6, color: '#059669' }}>Required</div>\n                ) : (\n                  <div style={{ marginTop: 6, color: '#6b7280' }}>Optional</div>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n}\n"
    },
    {
      "path": "components/AttributeGroupDetail.js",
      "content": "import React from 'react';\n\nexport default function AttributeGroupDetail({ group }) {\n  if (!group) {\n    return (\n      <div style={container}>\n        <p>No attribute group found.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div style={container}>\n      <div style={headerRow}>\n        <h1 style={{ margin: 0 }}>{group.name}</h1>\n        <code style={{ color: '#6b7280' }}>{group.id}</code>\n      </div>\n      {group.description ? (\n        <p style={{ color: '#374151' }}>{group.description}</p>\n      ) : null}\n\n      <section style={{ marginTop: 16 }}>\n        <h2 style={{ fontSize: 18, margin: '8px 0' }}>Attributes</h2>\n        {Array.isArray(group.attributes) && group.attributes.length > 0 ? (\n          <ul style={list}>\n            {group.attributes.map((attr) => (\n              <li key={attr.code} style={listItem}>\n                <div style={{ display: 'flex', alignItems: 'center', gap: 8, flexWrap: 'wrap' }}>\n                  <strong>{attr.label || attr.name || attr.code}</strong>\n                  <code style={codeBadge}>{attr.code}</code>\n                  <span style={pill}>{attr.type}</span>\n                  {attr.required ? <span style={requiredPill}>required</span> : <span style={optionalPill}>optional</span>}\n                </div>\n                {Array.isArray(attr.options) && attr.options.length > 0 ? (\n                  <div style={{ marginTop: 6, color: '#374151' }}>\n                    Options: {attr.options.join(', ')}\n                  </div>\n                ) : null}\n                {attr.unit ? (\n                  <div style={{ marginTop: 6, color: '#374151' }}>Unit: {attr.unit}</div>\n                ) : null}\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p style={{ color: '#6b7280' }}>No attributes in this group.</p>\n        )}\n      </section>\n    </div>\n  );\n}\n\nconst container = { padding: 20, maxWidth: 960, margin: '0 auto' };\nconst headerRow = { display: 'flex', alignItems: 'baseline', justifyContent: 'space-between' };\nconst list = { listStyle: 'none', padding: 0, margin: 0, display: 'flex', flexDirection: 'column', gap: 8 };\nconst listItem = { border: '1px solid #e5e7eb', borderRadius: 8, padding: 12, background: '#fff' };\nconst codeBadge = { background: '#eef2ff', color: '#3730a3', padding: '2px 6px', borderRadius: 4, fontFamily: 'monospace', fontSize: 12 };\nconst pill = { background: '#f1f5f9', color: '#0f172a', padding: '2px 6px', borderRadius: 999, fontSize: 12 };\nconst requiredPill = { background: '#ecfdf5', color: '#065f46', padding: '2px 6px', borderRadius: 999, fontSize: 12 };\nconst optionalPill = { background: '#f3f4f6', color: '#374151', padding: '2px 6px', borderRadius: 999, fontSize: 12 };\n"
    },
    {
      "path": "pages/admin/attribute-group/[id].js",
      "content": "import React from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport AttributeGroupDetail from '../../../components/AttributeGroupDetail';\n\nexport default function AttributeGroupDetailPage() {\n  const router = useRouter();\n  const { id } = router.query || {};\n  const [state, setState] = React.useState({ loading: true, error: null, group: null });\n\n  React.useEffect(() => {\n    let active = true;\n    async function load() {\n      if (!id) return;\n      try {\n        const res = await fetch(`/api/attribute-groups/${encodeURIComponent(id)}`);\n        if (!res.ok) {\n          const text = await res.text();\n          throw new Error(`Failed to load group ${id}: ${res.status} ${text}`);\n        }\n        const data = await res.json();\n        if (active) setState({ loading: false, error: null, group: data.group || data });\n      } catch (err) {\n        if (active) setState({ loading: false, error: err.message, group: null });\n      }\n    }\n    load();\n    return () => {\n      active = false;\n    };\n  }, [id]);\n\n  return (\n    <div style={{ padding: 20, maxWidth: 960, margin: '0 auto' }}>\n      <nav style={{ marginBottom: 12 }}>\n        <Link href=\"/admin/attribute-groups\">\n          <a style={{ color: '#2563eb' }}>← Back to Attribute Groups</a>\n        </Link>\n      </nav>\n      {state.loading ? <p>Loading…</p> : null}\n      {state.error ? (\n        <div style={{ color: '#b91c1c', background: '#fee2e2', padding: 12, borderRadius: 8 }}>\n          {state.error}\n        </div>\n      ) : null}\n      {!state.loading && !state.error ? <AttributeGroupDetail group={state.group} /> : null}\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/attributeGroupDetail.test.js",
      "content": "const React = require('react');\nconst { render } = require('@testing-library/react');\nconst AttributeGroupDetail = require('../components/AttributeGroupDetail').default || require('../components/AttributeGroupDetail');\nconst groups = require('../data/attribute-groups.json');\n\ndescribe('AttributeGroupDetail component', () => {\n  test('renders group name and first attribute details', () => {\n    const group = Array.isArray(groups) && groups.length > 0 ? groups[0] : {\n      id: 'g1', name: 'General', description: 'Fallback', attributes: [ { code: 'color', type: 'text', label: 'Color' } ]\n    };\n    const { container } = render(React.createElement(AttributeGroupDetail, { group }));\n    expect(container.textContent).toContain(group.name);\n    const first = group.attributes[0];\n    const label = first.label || first.name || first.code;\n    expect(container.textContent).toContain(label);\n    expect(container.textContent).toContain(first.code);\n  });\n});\n"
    }
  ]
}