{
  "files": [
    {
      "path": "lib/sampleData.js",
      "content": "const attributeGroups = [\n  {\n    id: \"grp_basics\",\n    name: \"Basics\",\n    attributes: [\n      { id: \"attr_name\", code: \"name\", name: \"Name\", type: \"text\" },\n      { id: \"attr_sku\", code: \"sku\", name: \"SKU\", type: \"text\" },\n      { id: \"attr_desc\", code: \"description\", name: \"Description\", type: \"richtext\" }\n    ]\n  },\n  {\n    id: \"grp_dimensions\",\n    name: \"Dimensions\",\n    attributes: [\n      { id: \"attr_width\", code: \"width\", name: \"Width (cm)\", type: \"number\" },\n      { id: \"attr_height\", code: \"height\", name: \"Height (cm)\", type: \"number\" },\n      { id: \"attr_length\", code: \"length\", name: \"Length (cm)\", type: \"number\" },\n      { id: \"attr_weight\", code: \"weight\", name: \"Weight (kg)\", type: \"number\" }\n    ]\n  },\n  {\n    id: \"grp_media\",\n    name: \"Media\",\n    attributes: [\n      { id: \"attr_images\", code: \"images\", name: \"Images\", type: \"media[]\" },\n      { id: \"attr_video\", code: \"video\", name: \"Video URL\", type: \"url\" }\n    ]\n  },\n  {\n    id: \"grp_seo\",\n    name: \"SEO\",\n    attributes: [\n      { id: \"attr_meta_title\", code: \"meta_title\", name: \"Meta Title\", type: \"text\" },\n      { id: \"attr_meta_description\", code: \"meta_description\", name: \"Meta Description\", type: \"textarea\" }\n    ]\n  }\n];\n\nmodule.exports = { attributeGroups };\n"
    },
    {
      "path": "lib/attributeStore.js",
      "content": "const { attributeGroups: initialGroups } = require('./sampleData');\n\nlet groups = JSON.parse(JSON.stringify(initialGroups));\n\nfunction uid(prefix = 'id') {\n  const rnd = Math.random().toString(36).slice(2, 8);\n  return `${prefix}_${Date.now().toString(36)}_${rnd}`;\n}\n\nfunction slugify(str) {\n  return String(str || '')\n    .trim()\n    .toLowerCase()\n    .replace(/[^a-z0-9]+/g, '_')\n    .replace(/^_+|_+$/g, '');\n}\n\nfunction getAttributeGroups() {\n  return groups;\n}\n\nfunction addGroup(name) {\n  const trimmed = String(name || '').trim();\n  if (!trimmed) throw new Error('Group name is required');\n  const g = { id: uid('grp'), name: trimmed, attributes: [] };\n  groups = [...groups, g];\n  return g;\n}\n\nfunction addAttribute(groupId, attr) {\n  const gIdx = groups.findIndex((g) => g.id === groupId);\n  if (gIdx === -1) throw new Error('Group not found');\n  const base = attr || {};\n  const code = base.code && String(base.code).trim() ? slugify(base.code) : slugify(base.name || 'attribute');\n  const newAttr = {\n    id: uid('attr'),\n    code,\n    name: String(base.name || code),\n    type: String(base.type || 'text')\n  };\n  const next = [...groups];\n  next[gIdx] = { ...next[gIdx], attributes: [...next[gIdx].attributes, newAttr] };\n  groups = next;\n  return newAttr;\n}\n\nfunction reset(newGroups) {\n  groups = JSON.parse(JSON.stringify(newGroups || initialGroups));\n}\n\nmodule.exports = {\n  getAttributeGroups,\n  addGroup,\n  addAttribute,\n  reset\n};\n"
    },
    {
      "path": "pages/api/attributes.js",
      "content": "const store = require('../../lib/attributeStore');\n\nexport default function handler(req, res) {\n  const { method } = req;\n\n  if (method === 'GET') {\n    res.status(200).json({ attributeGroups: store.getAttributeGroups() });\n    return;\n  }\n\n  if (method === 'POST') {\n    try {\n      const body = req.body || {};\n      const { type } = body;\n\n      if (type === 'group') {\n        const { name } = body;\n        const g = store.addGroup(name);\n        res.status(200).json({ ok: true, group: g, attributeGroups: store.getAttributeGroups() });\n        return;\n      }\n\n      if (type === 'attribute') {\n        const { groupId, attribute } = body;\n        const a = store.addAttribute(groupId, attribute || {});\n        res.status(200).json({ ok: true, attribute: a, attributeGroups: store.getAttributeGroups() });\n        return;\n      }\n\n      res.status(400).json({ ok: false, error: 'Unknown type. Use \"group\" or \"attribute\".' });\n    } catch (e) {\n      res.status(400).json({ ok: false, error: e.message || 'Bad Request' });\n    }\n    return;\n  }\n\n  res.setHeader('Allow', ['GET', 'POST']);\n  res.status(405).end('Method Not Allowed');\n}\n"
    },
    {
      "path": "pages/admin/attributes.js",
      "content": "import React, { useEffect, useState } from 'react';\n\nfunction fetchJSON(url, options) {\n  return fetch(url, { headers: { 'Content-Type': 'application/json' }, ...options }).then((r) => {\n    if (!r.ok) throw new Error('Network error');\n    return r.json();\n  });\n}\n\nexport default function AdminAttributesPage() {\n  const [loading, setLoading] = useState(true);\n  const [groups, setGroups] = useState([]);\n  const [error, setError] = useState('');\n\n  // new group\n  const [newGroupName, setNewGroupName] = useState('');\n\n  // new attribute\n  const [selectedGroupId, setSelectedGroupId] = useState('');\n  const [attrName, setAttrName] = useState('');\n  const [attrCode, setAttrCode] = useState('');\n  const [attrType, setAttrType] = useState('text');\n\n  function load() {\n    setLoading(true);\n    setError('');\n    fetchJSON('/api/attributes')\n      .then((data) => {\n        setGroups(data.attributeGroups || []);\n        if (!selectedGroupId && (data.attributeGroups || []).length) {\n          setSelectedGroupId(data.attributeGroups[0].id);\n        }\n      })\n      .catch((e) => setError(e.message || 'Failed to load'))\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  function handleAddGroup(e) {\n    e.preventDefault();\n    if (!newGroupName.trim()) return;\n    setError('');\n    fetchJSON('/api/attributes', {\n      method: 'POST',\n      body: JSON.stringify({ type: 'group', name: newGroupName })\n    })\n      .then((data) => {\n        setGroups(data.attributeGroups || []);\n        setNewGroupName('');\n        if (!selectedGroupId && (data.attributeGroups || []).length) {\n          setSelectedGroupId(data.attributeGroups[data.attributeGroups.length - 1].id);\n        }\n      })\n      .catch((e) => setError(e.message || 'Failed to add group'));\n  }\n\n  function handleAddAttribute(e) {\n    e.preventDefault();\n    if (!selectedGroupId || !attrName.trim()) return;\n    setError('');\n    fetchJSON('/api/attributes', {\n      method: 'POST',\n      body: JSON.stringify({\n        type: 'attribute',\n        groupId: selectedGroupId,\n        attribute: { name: attrName, code: attrCode, type: attrType }\n      })\n    })\n      .then((data) => {\n        setGroups(data.attributeGroups || []);\n        setAttrName('');\n        setAttrCode('');\n      })\n      .catch((e) => setError(e.message || 'Failed to add attribute'));\n  }\n\n  return (\n    <div style={{ padding: '24px', fontFamily: 'system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial' }}>\n      <h1 style={{ margin: 0 }}>Attribute Groups</h1>\n      <p style={{ color: '#555' }}>Manage attribute groups and fields for your products.</p>\n\n      {error ? (\n        <div style={{ background: '#fee', color: '#900', padding: '8px 12px', borderRadius: 6, marginBottom: 12 }}>{error}</div>\n      ) : null}\n\n      <section style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gridGap: 24 }}>\n        <div>\n          <h3 style={{ marginTop: 0 }}>Groups</h3>\n          {loading ? (\n            <div>Loading…</div>\n          ) : (\n            <div>\n              {groups.map((g) => (\n                <div key={g.id} style={{ border: '1px solid #eee', borderRadius: 8, padding: 12, marginBottom: 12 }}>\n                  <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                    <strong>{g.name}</strong>\n                    <small style={{ color: '#666' }}>{g.attributes.length} attrs</small>\n                  </div>\n                  <div style={{ marginTop: 8, display: 'flex', flexWrap: 'wrap', gap: 6 }}>\n                    {g.attributes.map((a) => (\n                      <span key={a.id} style={{ background: '#f5f5f5', border: '1px solid #eee', padding: '2px 8px', borderRadius: 999 }}>\n                        {a.name}\n                        <span style={{ color: '#888' }}> · {a.type}</span>\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        <div>\n          <h3 style={{ marginTop: 0 }}>Add Group</h3>\n          <form onSubmit={handleAddGroup} style={{ display: 'flex', gap: 8, marginBottom: 24 }}>\n            <input\n              aria-label=\"Group Name\"\n              placeholder=\"e.g. Pricing\"\n              value={newGroupName}\n              onChange={(e) => setNewGroupName(e.target.value)}\n              style={{ flex: 1, padding: '8px 10px', borderRadius: 6, border: '1px solid #ddd' }}\n            />\n            <button type=\"submit\" style={{ padding: '8px 12px', borderRadius: 6, background: '#111', color: 'white', border: 0 }}>Add</button>\n          </form>\n\n          <h3>Add Attribute</h3>\n          <form onSubmit={handleAddAttribute}>\n            <div style={{ display: 'grid', gridTemplateColumns: '1fr', gap: 8 }}>\n              <label style={{ display: 'grid', gap: 4 }}>\n                <span style={{ fontSize: 12, color: '#666' }}>Group</span>\n                <select\n                  value={selectedGroupId}\n                  onChange={(e) => setSelectedGroupId(e.target.value)}\n                  style={{ padding: '8px 10px', borderRadius: 6, border: '1px solid #ddd' }}\n                >\n                  <option value=\"\" disabled>\n                    Select a group\n                  </option>\n                  {groups.map((g) => (\n                    <option key={g.id} value={g.id}>\n                      {g.name}\n                    </option>\n                  ))}\n                </select>\n              </label>\n\n              <label style={{ display: 'grid', gap: 4 }}>\n                <span style={{ fontSize: 12, color: '#666' }}>Name</span>\n                <input\n                  aria-label=\"Attribute Name\"\n                  placeholder=\"e.g. Price\"\n                  value={attrName}\n                  onChange={(e) => setAttrName(e.target.value)}\n                  style={{ padding: '8px 10px', borderRadius: 6, border: '1px solid #ddd' }}\n                />\n              </label>\n\n              <label style={{ display: 'grid', gap: 4 }}>\n                <span style={{ fontSize: 12, color: '#666' }}>Code (optional)</span>\n                <input\n                  aria-label=\"Attribute Code\"\n                  placeholder=\"e.g. price\"\n                  value={attrCode}\n                  onChange={(e) => setAttrCode(e.target.value)}\n                  style={{ padding: '8px 10px', borderRadius: 6, border: '1px solid #ddd' }}\n                />\n              </label>\n\n              <label style={{ display: 'grid', gap: 4 }}>\n                <span style={{ fontSize: 12, color: '#666' }}>Type</span>\n                <select\n                  aria-label=\"Attribute Type\"\n                  value={attrType}\n                  onChange={(e) => setAttrType(e.target.value)}\n                  style={{ padding: '8px 10px', borderRadius: 6, border: '1px solid #ddd' }}\n                >\n                  <option value=\"text\">Text</option>\n                  <option value=\"textarea\">Textarea</option>\n                  <option value=\"richtext\">Rich Text</option>\n                  <option value=\"number\">Number</option>\n                  <option value=\"boolean\">Boolean</option>\n                  <option value=\"select\">Select</option>\n                  <option value=\"media[]\">Media List</option>\n                  <option value=\"url\">URL</option>\n                </select>\n              </label>\n\n              <div>\n                <button type=\"submit\" style={{ padding: '8px 12px', borderRadius: 6, background: '#111', color: 'white', border: 0 }} disabled={!selectedGroupId || !attrName.trim()}>\n                  Add Attribute\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </section>\n    </div>\n  );\n}\n"
    },
    {
      "path": "tests/attributeStore.test.js",
      "content": "const assert = require('assert');\nconst store = require('../lib/attributeStore');\nconst { attributeGroups } = require('../lib/sampleData');\n\n// Reset to known state\nstore.reset(attributeGroups);\n\nconst beforeCount = store.getAttributeGroups().length;\nconst g = store.addGroup('Test Group');\nassert.ok(g && g.id && g.name === 'Test Group', 'Group should be created with id and name');\nconst afterCount = store.getAttributeGroups().length;\nassert.strictEqual(afterCount, beforeCount + 1, 'Group count should increase by 1');\n\nconst attr = store.addAttribute(g.id, { name: 'Test Attribute', type: 'text' });\nassert.ok(attr && attr.id && attr.code === 'test_attribute', 'Attribute should be created with slug code');\n\nconst found = store.getAttributeGroups().find((x) => x.id === g.id);\nassert.strictEqual(found.attributes.length, 1, 'New group should have 1 attribute');\n\nconsole.log('attributeStore tests passed');\n"
    }
  ],
  "commit_message": "FEATURE: Add admin UI and API for managing attribute groups and attributes with rich sample data and a small store test"
}